// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_funkin_vis_AudioBuffer
#include <funkin/vis/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d161c511107170d8_11_new,"funkin.vis.AudioBuffer","new",0x830ff8fd,"funkin.vis.AudioBuffer.new","funkin/vis/AudioBuffer.hx",11,0xd093a915)
namespace funkin{
namespace vis{

void AudioBuffer_obj::__construct( ::lime::utils::ArrayBufferView data,Float sampleRate){
            	HX_STACKFRAME(&_hx_pos_d161c511107170d8_11_new)
HXLINE(  12)		this->data = data;
HXLINE(  13)		this->sampleRate = sampleRate;
            	}

Dynamic AudioBuffer_obj::__CreateEmpty() { return new AudioBuffer_obj; }

void *AudioBuffer_obj::_hx_vtable = 0;

Dynamic AudioBuffer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AudioBuffer_obj > _hx_result = new AudioBuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AudioBuffer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x192ff1a7;
}


::hx::ObjectPtr< AudioBuffer_obj > AudioBuffer_obj::__new( ::lime::utils::ArrayBufferView data,Float sampleRate) {
	::hx::ObjectPtr< AudioBuffer_obj > __this = new AudioBuffer_obj();
	__this->__construct(data,sampleRate);
	return __this;
}

::hx::ObjectPtr< AudioBuffer_obj > AudioBuffer_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::utils::ArrayBufferView data,Float sampleRate) {
	AudioBuffer_obj *__this = (AudioBuffer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AudioBuffer_obj), true, "funkin.vis.AudioBuffer"));
	*(void **)__this = AudioBuffer_obj::_hx_vtable;
	__this->__construct(data,sampleRate);
	return __this;
}

AudioBuffer_obj::AudioBuffer_obj()
{
}

void AudioBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioBuffer);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_END_CLASS();
}

void AudioBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
}

::hx::Val AudioBuffer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return ::hx::Val( sampleRate ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AudioBuffer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("sampleRate",2a,3c,4c,67));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AudioBuffer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(AudioBuffer_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsFloat,(int)offsetof(AudioBuffer_obj,sampleRate),HX_("sampleRate",2a,3c,4c,67)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AudioBuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioBuffer_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("sampleRate",2a,3c,4c,67),
	::String(null()) };

::hx::Class AudioBuffer_obj::__mClass;

void AudioBuffer_obj::__register()
{
	AudioBuffer_obj _hx_dummy;
	AudioBuffer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.AudioBuffer",8b,b6,0e,cf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AudioBuffer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AudioBuffer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioBuffer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
