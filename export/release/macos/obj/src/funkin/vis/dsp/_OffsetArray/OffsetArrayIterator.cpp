// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_funkin_vis_dsp__OffsetArray_OffsetArrayIterator
#include <funkin/vis/dsp/_OffsetArray/OffsetArrayIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_98b10ae30f37bbfc_65_new,"funkin.vis.dsp._OffsetArray.OffsetArrayIterator","new",0xc8de7b97,"funkin.vis.dsp._OffsetArray.OffsetArrayIterator.new","funkin/vis/dsp/OffsetArray.hx",65,0xe9621293)
HX_LOCAL_STACK_FRAME(_hx_pos_98b10ae30f37bbfc_71_next,"funkin.vis.dsp._OffsetArray.OffsetArrayIterator","next",0xf9cda9dc,"funkin.vis.dsp._OffsetArray.OffsetArrayIterator.next","funkin/vis/dsp/OffsetArray.hx",71,0xe9621293)
HX_LOCAL_STACK_FRAME(_hx_pos_98b10ae30f37bbfc_77_hasNext,"funkin.vis.dsp._OffsetArray.OffsetArrayIterator","hasNext",0x1e0cb824,"funkin.vis.dsp._OffsetArray.OffsetArrayIterator.hasNext","funkin/vis/dsp/OffsetArray.hx",77,0xe9621293)
namespace funkin{
namespace vis{
namespace dsp{
namespace _OffsetArray{

void OffsetArrayIterator_obj::__construct(::cpp::VirtualArray array,int offset){
            	HX_STACKFRAME(&_hx_pos_98b10ae30f37bbfc_65_new)
HXLINE(  66)		this->array = array;
HXLINE(  67)		this->offset = offset;
HXLINE(  68)		this->enumeration = 0;
            	}

Dynamic OffsetArrayIterator_obj::__CreateEmpty() { return new OffsetArrayIterator_obj; }

void *OffsetArrayIterator_obj::_hx_vtable = 0;

Dynamic OffsetArrayIterator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OffsetArrayIterator_obj > _hx_result = new OffsetArrayIterator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OffsetArrayIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1988441b;
}

 ::Dynamic OffsetArrayIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_98b10ae30f37bbfc_71_next)
HXLINE(  72)		int i = this->enumeration++;
HXLINE(  73)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("key",9f,89,51,00),(i + this->offset))
            			->setFixed(1,HX_("value",71,7f,b8,31),this->array->__get(i)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(OffsetArrayIterator_obj,next,return )

bool OffsetArrayIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_98b10ae30f37bbfc_77_hasNext)
HXDLIN(  77)		return (this->enumeration < this->array->get_length());
            	}


HX_DEFINE_DYNAMIC_FUNC0(OffsetArrayIterator_obj,hasNext,return )


OffsetArrayIterator_obj::OffsetArrayIterator_obj()
{
}

void OffsetArrayIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OffsetArrayIterator);
	HX_MARK_MEMBER_NAME(array,"array");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(enumeration,"enumeration");
	HX_MARK_END_CLASS();
}

void OffsetArrayIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(array,"array");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(enumeration,"enumeration");
}

::hx::Val OffsetArrayIterator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { return ::hx::Val( array ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return ::hx::Val( hasNext_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enumeration") ) { return ::hx::Val( enumeration ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OffsetArrayIterator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"array") ) { array=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enumeration") ) { enumeration=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OffsetArrayIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("array",99,6d,8f,25));
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("enumeration",47,76,11,5e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OffsetArrayIterator_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(OffsetArrayIterator_obj,array),HX_("array",99,6d,8f,25)},
	{::hx::fsInt,(int)offsetof(OffsetArrayIterator_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsInt,(int)offsetof(OffsetArrayIterator_obj,enumeration),HX_("enumeration",47,76,11,5e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OffsetArrayIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String OffsetArrayIterator_obj_sMemberFields[] = {
	HX_("array",99,6d,8f,25),
	HX_("offset",93,97,3f,60),
	HX_("enumeration",47,76,11,5e),
	HX_("next",f3,84,02,49),
	HX_("hasNext",6d,a5,46,18),
	::String(null()) };

::hx::Class OffsetArrayIterator_obj::__mClass;

void OffsetArrayIterator_obj::__register()
{
	OffsetArrayIterator_obj _hx_dummy;
	OffsetArrayIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.dsp._OffsetArray.OffsetArrayIterator",25,64,cd,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OffsetArrayIterator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OffsetArrayIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OffsetArrayIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OffsetArrayIterator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
} // end namespace dsp
} // end namespace _OffsetArray
