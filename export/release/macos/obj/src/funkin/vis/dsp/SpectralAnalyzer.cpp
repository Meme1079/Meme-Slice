// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_funkin_vis_AudioBuffer
#include <funkin/vis/AudioBuffer.h>
#endif
#ifndef INCLUDED_funkin_vis_AudioClip
#include <funkin/vis/AudioClip.h>
#endif
#ifndef INCLUDED_funkin_vis_audioclip_frontends_LimeAudioClip
#include <funkin/vis/audioclip/frontends/LimeAudioClip.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_FFT
#include <funkin/vis/dsp/FFT.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_MathType
#include <funkin/vis/dsp/MathType.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_RecentPeakFinder
#include <funkin/vis/dsp/RecentPeakFinder.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_SpectralAnalyzer
#include <funkin/vis/dsp/SpectralAnalyzer.h>
#endif
#ifndef INCLUDED_grig_audio_FFT
#include <grig/audio/FFT.h>
#endif
#ifndef INCLUDED_grig_audio_FFTVisualization
#include <grig/audio/FFTVisualization.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_36_new,"funkin.vis.dsp.SpectralAnalyzer","new",0x7fc921b4,"funkin.vis.dsp.SpectralAnalyzer.new","funkin/vis/dsp/SpectralAnalyzer.hx",36,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_61_freqToBin,"funkin.vis.dsp.SpectralAnalyzer","freqToBin",0xb6ff2a88,"funkin.vis.dsp.SpectralAnalyzer.freqToBin","funkin/vis/dsp/SpectralAnalyzer.hx",61,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_72_normalizedB,"funkin.vis.dsp.SpectralAnalyzer","normalizedB",0xd5ed117f,"funkin.vis.dsp.SpectralAnalyzer.normalizedB","funkin/vis/dsp/SpectralAnalyzer.hx",72,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_80_calcBars,"funkin.vis.dsp.SpectralAnalyzer","calcBars",0x11e3f8a1,"funkin.vis.dsp.SpectralAnalyzer.calcBars","funkin/vis/dsp/SpectralAnalyzer.hx",80,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_134_resizeBlackmanWindow,"funkin.vis.dsp.SpectralAnalyzer","resizeBlackmanWindow",0x5734ddcb,"funkin.vis.dsp.SpectralAnalyzer.resizeBlackmanWindow","funkin/vis/dsp/SpectralAnalyzer.hx",134,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_163_getLevels,"funkin.vis.dsp.SpectralAnalyzer","getLevels",0x15794ff9,"funkin.vis.dsp.SpectralAnalyzer.getLevels","funkin/vis/dsp/SpectralAnalyzer.hx",163,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_254_getSignal,"funkin.vis.dsp.SpectralAnalyzer","getSignal",0x25afbff2,"funkin.vis.dsp.SpectralAnalyzer.getSignal","funkin/vis/dsp/SpectralAnalyzer.hx",254,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_300_set_minDb,"funkin.vis.dsp.SpectralAnalyzer","set_minDb",0x2435a667,"funkin.vis.dsp.SpectralAnalyzer.set_minDb","funkin/vis/dsp/SpectralAnalyzer.hx",300,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_311_set_maxDb,"funkin.vis.dsp.SpectralAnalyzer","set_maxDb",0x1ef387f9,"funkin.vis.dsp.SpectralAnalyzer.set_maxDb","funkin/vis/dsp/SpectralAnalyzer.hx",311,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_322_set_fftN,"funkin.vis.dsp.SpectralAnalyzer","set_fftN",0x487101c3,"funkin.vis.dsp.SpectralAnalyzer.set_fftN","funkin/vis/dsp/SpectralAnalyzer.hx",322,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_296_min_Int,"funkin.vis.dsp.SpectralAnalyzer","min_Int",0xf5cdd7b6,"funkin.vis.dsp.SpectralAnalyzer.min_Int","funkin/vis/dsp/SpectralAnalyzer.hx",296,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_285_clamp_Float,"funkin.vis.dsp.SpectralAnalyzer","clamp_Float",0x1655a34c,"funkin.vis.dsp.SpectralAnalyzer.clamp_Float","funkin/vis/dsp/SpectralAnalyzer.hx",285,0x6ed3f099)
HX_LOCAL_STACK_FRAME(_hx_pos_ff4ea58ac4611d7d_290_calculateBlackmanWindow,"funkin.vis.dsp.SpectralAnalyzer","calculateBlackmanWindow",0xb999ffe5,"funkin.vis.dsp.SpectralAnalyzer.calculateBlackmanWindow","funkin/vis/dsp/SpectralAnalyzer.hx",290,0x6ed3f099)
namespace funkin{
namespace vis{
namespace dsp{

void SpectralAnalyzer_obj::__construct( ::lime::media::AudioSource audioSource,int barCount,::hx::Null< Float >  __o_maxDelta,::hx::Null< int >  __o_peakHold){
            		Float maxDelta = __o_maxDelta.Default(((Float)0.01));
            		int peakHold = __o_peakHold.Default(30);
            	HX_GC_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_36_new)
HXLINE( 252)		this->_buffer = ::Array_obj< Float >::__new(0);
HXLINE(  57)		this->blackmanWindow = ::Array_obj< Float >::__new();
HXLINE(  56)		this->barHistories = ::Array_obj< ::Dynamic>::__new();
HXLINE(  55)		this->vis =  ::grig::audio::FFTVisualization_obj::__alloc( HX_CTX );
HXLINE(  49)		this->fftN2 = 2048;
HXLINE(  42)		this->maxFreq = ((Float)22000);
HXLINE(  41)		this->minFreq = ((Float)50);
HXLINE(  40)		this->fftN = 4096;
HXLINE(  39)		this->maxDb = ((Float)-20);
HXLINE(  38)		this->minDb = ((Float)-70);
HXLINE( 146)		this->audioSource = audioSource;
HXLINE( 147)		this->audioClip =  ::funkin::vis::audioclip::frontends::LimeAudioClip_obj::__alloc( HX_CTX ,audioSource);
HXLINE( 148)		this->barCount = barCount;
HXLINE( 149)		this->maxDelta = maxDelta;
HXLINE( 150)		this->peakHold = peakHold;
HXLINE( 155)		this->fft =  ::grig::audio::FFT_obj::__alloc( HX_CTX ,this->fftN);
HXLINE( 158)		this->calcBars(barCount,peakHold);
HXLINE( 159)		this->resizeBlackmanWindow(this->fftN);
            	}

Dynamic SpectralAnalyzer_obj::__CreateEmpty() { return new SpectralAnalyzer_obj; }

void *SpectralAnalyzer_obj::_hx_vtable = 0;

Dynamic SpectralAnalyzer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SpectralAnalyzer_obj > _hx_result = new SpectralAnalyzer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SpectralAnalyzer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5953d91c;
}

int SpectralAnalyzer_obj::freqToBin(Float freq, ::funkin::vis::dsp::MathType __o_mathType){
            		 ::funkin::vis::dsp::MathType mathType = __o_mathType;
            		if (::hx::IsNull(__o_mathType)) mathType = ::funkin::vis::dsp::MathType_obj::Round_dyn();
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_61_freqToBin)
HXLINE(  62)		Float bin = ((freq * ( (Float)(this->fftN2) )) / ( ( ::funkin::vis::AudioBuffer)(this->audioClip->__Field(HX_("audioBuffer",76,ee,44,9f),::hx::paccDynamic)) )->sampleRate);
HXLINE(  63)		switch((int)(mathType->_hx_getIndex())){
            			case (int)0: {
HXLINE(  64)				return ::Math_obj::round(bin);
            			}
            			break;
            			case (int)1: {
HXLINE(  65)				return ::Math_obj::floor(bin);
            			}
            			break;
            			case (int)2: {
HXLINE(  66)				return ::Math_obj::ceil(bin);
            			}
            			break;
            			case (int)3: {
HXLINE(  67)				return ::Std_obj::_hx_int(bin);
            			}
            			break;
            		}
HXLINE(  63)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SpectralAnalyzer_obj,freqToBin,return )

Float SpectralAnalyzer_obj::normalizedB(Float value){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_72_normalizedB)
HXLINE(  73)		Float maxValue = this->maxDb;
HXLINE(  74)		Float minValue = this->minDb;
HXLINE(  76)		Float val = ((value - minValue) / (maxValue - minValue));
HXDLIN(  76)		if ((val <= 0)) {
HXLINE(  76)			return ( (Float)(0) );
            		}
            		else {
HXLINE(  76)			if ((val >= 1)) {
HXLINE(  76)				return ( (Float)(1) );
            			}
            			else {
HXLINE(  76)				return val;
            			}
            		}
HXDLIN(  76)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpectralAnalyzer_obj,normalizedB,return )

void SpectralAnalyzer_obj::calcBars(int barCount,int peakHold){
            	HX_GC_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_80_calcBars)
HXLINE( 124)		if ((barCount > this->barHistories->length)) {
HXLINE( 125)			this->barHistories->resize(barCount);
            		}
HXLINE( 127)		{
HXLINE( 127)			int _g = 0;
HXDLIN( 127)			int _g1 = barCount;
HXDLIN( 127)			while((_g < _g1)){
HXLINE( 127)				_g = (_g + 1);
HXDLIN( 127)				int i = (_g - 1);
HXLINE( 128)				if (::hx::IsNull( this->barHistories->__get(i).StaticCast<  ::funkin::vis::dsp::RecentPeakFinder >() )) {
HXLINE( 128)					this->barHistories[i] =  ::funkin::vis::dsp::RecentPeakFinder_obj::__alloc( HX_CTX ,null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SpectralAnalyzer_obj,calcBars,(void))

void SpectralAnalyzer_obj::resizeBlackmanWindow(int size){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_134_resizeBlackmanWindow)
HXLINE( 136)		if ((this->blackmanWindow->length == size)) {
HXLINE( 136)			return;
            		}
HXLINE( 137)		this->blackmanWindow->resize(size);
HXLINE( 138)		{
HXLINE( 138)			int _g = 0;
HXDLIN( 138)			int _g1 = size;
HXDLIN( 138)			while((_g < _g1)){
HXLINE( 138)				_g = (_g + 1);
HXDLIN( 138)				int i = (_g - 1);
HXLINE( 139)				this->blackmanWindow[i] = ::funkin::vis::dsp::SpectralAnalyzer_obj::calculateBlackmanWindow(i,size);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpectralAnalyzer_obj,resizeBlackmanWindow,(void))

::Array< ::Dynamic> SpectralAnalyzer_obj::getLevels(::Array< ::Dynamic> levels){
            	HX_GC_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_163_getLevels)
HXLINE( 164)		if (::hx::IsNull( levels )) {
HXLINE( 164)			levels = ::Array_obj< ::Dynamic>::__new();
            		}
HXLINE( 194)		int numOctets = ::Std_obj::_hx_int((( (Float)(this->audioSource->buffer->bitsPerSample) ) / ( (Float)(8) )));
HXLINE( 195)		int wantedLength = ((this->fftN * numOctets) * this->audioSource->buffer->channels);
HXLINE( 196)		int startFrame = ::funkin::vis::AudioClip_obj::get_currentFrame(this->audioClip);
HXLINE( 197)		startFrame = (startFrame - ::hx::Mod(startFrame,numOctets));
HXLINE( 198)		 ::lime::utils::ArrayBufferView this1 = this->audioSource->buffer->data;
HXDLIN( 198)		int x = (startFrame + wantedLength);
HXDLIN( 198)		int y = this->audioSource->buffer->data->length;
HXDLIN( 198)		 ::Dynamic end;
HXDLIN( 198)		if ((x > y)) {
HXLINE( 198)			end = y;
            		}
            		else {
HXLINE( 198)			end = x;
            		}
HXDLIN( 198)		 ::Dynamic end1 = end;
HXDLIN( 198)		if (::hx::IsNull( end1 )) {
HXLINE( 198)			end1 = this1->length;
            		}
HXDLIN( 198)		int len = (( (int)(end1) ) - startFrame);
HXDLIN( 198)		int byte_offset = ((startFrame * this1->bytesPerElement) + this1->byteOffset);
HXDLIN( 198)		 ::lime::utils::ArrayBufferView view;
HXDLIN( 198)		switch((int)(this1->type)){
            			case (int)0: {
HXLINE( 198)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 198)				 ::Dynamic elements = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN( 198)				 ::Dynamic byteoffset = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset )) {
HXLINE( 198)					byteoffset = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 198)				if (::hx::IsNotNull( elements )) {
HXLINE( 198)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,1);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 198)						_this->byteOffset = 0;
HXDLIN( 198)						_this->length = array->get_length();
HXDLIN( 198)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 198)						_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 198)						_this->copyFromArray(array,null());
HXDLIN( 198)						this2 = _this;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 198)							::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this1->byteOffset = 0;
HXDLIN( 198)							_this1->length = array1->get_length();
HXDLIN( 198)							_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 198)							_this1->buffer = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 198)							_this1->copyFromArray(array1,null());
HXDLIN( 198)							this2 = _this1;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view1 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 198)								 ::haxe::io::Bytes srcData = view1->buffer;
HXDLIN( 198)								int srcLength = view1->length;
HXDLIN( 198)								int srcByteOffset = view1->byteOffset;
HXDLIN( 198)								int srcElementSize = view1->bytesPerElement;
HXDLIN( 198)								int elementSize = _this2->bytesPerElement;
HXDLIN( 198)								if ((view1->type == _this2->type)) {
HXLINE( 198)									int srcLength1 = srcData->length;
HXDLIN( 198)									int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 198)									_this2->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 198)									_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 198)								_this2->byteOffset = 0;
HXDLIN( 198)								_this2->length = srcLength;
HXDLIN( 198)								this2 = _this2;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 198)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 198)									if ((in_byteOffset < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength = buffer->length;
HXDLIN( 198)									int elementSize1 = _this3->bytesPerElement;
HXDLIN( 198)									int newByteLength = bufferByteLength;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength = (len * _this3->bytesPerElement);
HXDLIN( 198)										int newRange = (in_byteOffset + newByteLength);
HXDLIN( 198)										if ((newRange > bufferByteLength)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this3->buffer = buffer;
HXDLIN( 198)									_this3->byteOffset = in_byteOffset;
HXDLIN( 198)									_this3->byteLength = newByteLength;
HXDLIN( 198)									_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 198)									this2 = _this3;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this2;
            			}
            			break;
            			case (int)2: {
HXLINE( 198)				 ::Dynamic elements1 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer1 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array2 = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector1 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view2 = null();
HXDLIN( 198)				 ::Dynamic byteoffset1 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset1 )) {
HXLINE( 198)					byteoffset1 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 198)				if (::hx::IsNotNull( elements1 )) {
HXLINE( 198)					this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements1,2);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array2 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 198)						_this4->byteOffset = 0;
HXDLIN( 198)						_this4->length = array2->get_length();
HXDLIN( 198)						_this4->byteLength = (_this4->length * _this4->bytesPerElement);
HXDLIN( 198)						_this4->buffer = ::haxe::io::Bytes_obj::alloc(_this4->byteLength);
HXDLIN( 198)						_this4->copyFromArray(array2,null());
HXDLIN( 198)						this3 = _this4;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector1 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 198)							::cpp::VirtualArray array3 = ( (::cpp::VirtualArray)(vector1->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this5->byteOffset = 0;
HXDLIN( 198)							_this5->length = array3->get_length();
HXDLIN( 198)							_this5->byteLength = (_this5->length * _this5->bytesPerElement);
HXDLIN( 198)							_this5->buffer = ::haxe::io::Bytes_obj::alloc(_this5->byteLength);
HXDLIN( 198)							_this5->copyFromArray(array3,null());
HXDLIN( 198)							this3 = _this5;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view2 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 198)								 ::haxe::io::Bytes srcData1 = view2->buffer;
HXDLIN( 198)								int srcLength2 = view2->length;
HXDLIN( 198)								int srcByteOffset1 = view2->byteOffset;
HXDLIN( 198)								int srcElementSize1 = view2->bytesPerElement;
HXDLIN( 198)								int elementSize2 = _this6->bytesPerElement;
HXDLIN( 198)								if ((view2->type == _this6->type)) {
HXLINE( 198)									int srcLength3 = srcData1->length;
HXDLIN( 198)									int cloneLength1 = (srcLength3 - srcByteOffset1);
HXDLIN( 198)									_this6->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength1);
HXDLIN( 198)									_this6->buffer->blit(0,srcData1,srcByteOffset1,cloneLength1);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this6->byteLength = (_this6->bytesPerElement * srcLength2);
HXDLIN( 198)								_this6->byteOffset = 0;
HXDLIN( 198)								_this6->length = srcLength2;
HXDLIN( 198)								this3 = _this6;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer1 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 198)									int in_byteOffset1 = ( (int)(byteoffset1) );
HXDLIN( 198)									if ((in_byteOffset1 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset1,_this7->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength1 = buffer1->length;
HXDLIN( 198)									int elementSize3 = _this7->bytesPerElement;
HXDLIN( 198)									int newByteLength1 = bufferByteLength1;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength1,_this7->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength1 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength1 = (len * _this7->bytesPerElement);
HXDLIN( 198)										int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 198)										if ((newRange1 > bufferByteLength1)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this7->buffer = buffer1;
HXDLIN( 198)									_this7->byteOffset = in_byteOffset1;
HXDLIN( 198)									_this7->byteLength = newByteLength1;
HXDLIN( 198)									_this7->length = ::Std_obj::_hx_int((( (Float)(newByteLength1) ) / ( (Float)(_this7->bytesPerElement) )));
HXDLIN( 198)									this3 = _this7;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this3;
            			}
            			break;
            			case (int)3: {
HXLINE( 198)				 ::Dynamic elements2 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer2 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array4 = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector2 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view3 = null();
HXDLIN( 198)				 ::Dynamic byteoffset2 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset2 )) {
HXLINE( 198)					byteoffset2 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 198)				if (::hx::IsNotNull( elements2 )) {
HXLINE( 198)					this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements2,3);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array4 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 198)						_this8->byteOffset = 0;
HXDLIN( 198)						_this8->length = array4->get_length();
HXDLIN( 198)						_this8->byteLength = (_this8->length * _this8->bytesPerElement);
HXDLIN( 198)						_this8->buffer = ::haxe::io::Bytes_obj::alloc(_this8->byteLength);
HXDLIN( 198)						_this8->copyFromArray(array4,null());
HXDLIN( 198)						this4 = _this8;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector2 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 198)							::cpp::VirtualArray array5 = ( (::cpp::VirtualArray)(vector2->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this9->byteOffset = 0;
HXDLIN( 198)							_this9->length = array5->get_length();
HXDLIN( 198)							_this9->byteLength = (_this9->length * _this9->bytesPerElement);
HXDLIN( 198)							_this9->buffer = ::haxe::io::Bytes_obj::alloc(_this9->byteLength);
HXDLIN( 198)							_this9->copyFromArray(array5,null());
HXDLIN( 198)							this4 = _this9;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view3 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this10 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 198)								 ::haxe::io::Bytes srcData2 = view3->buffer;
HXDLIN( 198)								int srcLength4 = view3->length;
HXDLIN( 198)								int srcByteOffset2 = view3->byteOffset;
HXDLIN( 198)								int srcElementSize2 = view3->bytesPerElement;
HXDLIN( 198)								int elementSize4 = _this10->bytesPerElement;
HXDLIN( 198)								if ((view3->type == _this10->type)) {
HXLINE( 198)									int srcLength5 = srcData2->length;
HXDLIN( 198)									int cloneLength2 = (srcLength5 - srcByteOffset2);
HXDLIN( 198)									_this10->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength2);
HXDLIN( 198)									_this10->buffer->blit(0,srcData2,srcByteOffset2,cloneLength2);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this10->byteLength = (_this10->bytesPerElement * srcLength4);
HXDLIN( 198)								_this10->byteOffset = 0;
HXDLIN( 198)								_this10->length = srcLength4;
HXDLIN( 198)								this4 = _this10;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer2 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this11 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 198)									int in_byteOffset2 = ( (int)(byteoffset2) );
HXDLIN( 198)									if ((in_byteOffset2 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset2,_this11->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength2 = buffer2->length;
HXDLIN( 198)									int elementSize5 = _this11->bytesPerElement;
HXDLIN( 198)									int newByteLength2 = bufferByteLength2;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength2,_this11->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength2 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength2 = (len * _this11->bytesPerElement);
HXDLIN( 198)										int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 198)										if ((newRange2 > bufferByteLength2)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this11->buffer = buffer2;
HXDLIN( 198)									_this11->byteOffset = in_byteOffset2;
HXDLIN( 198)									_this11->byteLength = newByteLength2;
HXDLIN( 198)									_this11->length = ::Std_obj::_hx_int((( (Float)(newByteLength2) ) / ( (Float)(_this11->bytesPerElement) )));
HXDLIN( 198)									this4 = _this11;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this4;
            			}
            			break;
            			case (int)4: {
HXLINE( 198)				 ::Dynamic elements3 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer3 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array6 = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector3 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view4 = null();
HXDLIN( 198)				 ::Dynamic byteoffset3 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset3 )) {
HXLINE( 198)					byteoffset3 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 198)				if (::hx::IsNotNull( elements3 )) {
HXLINE( 198)					this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements3,4);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array6 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this12 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 198)						_this12->byteOffset = 0;
HXDLIN( 198)						_this12->length = array6->get_length();
HXDLIN( 198)						_this12->byteLength = (_this12->length * _this12->bytesPerElement);
HXDLIN( 198)						_this12->buffer = ::haxe::io::Bytes_obj::alloc(_this12->byteLength);
HXDLIN( 198)						_this12->copyFromArray(array6,null());
HXDLIN( 198)						this5 = _this12;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector3 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this13 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 198)							::cpp::VirtualArray array7 = ( (::cpp::VirtualArray)(vector3->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this13->byteOffset = 0;
HXDLIN( 198)							_this13->length = array7->get_length();
HXDLIN( 198)							_this13->byteLength = (_this13->length * _this13->bytesPerElement);
HXDLIN( 198)							_this13->buffer = ::haxe::io::Bytes_obj::alloc(_this13->byteLength);
HXDLIN( 198)							_this13->copyFromArray(array7,null());
HXDLIN( 198)							this5 = _this13;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view4 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this14 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 198)								 ::haxe::io::Bytes srcData3 = view4->buffer;
HXDLIN( 198)								int srcLength6 = view4->length;
HXDLIN( 198)								int srcByteOffset3 = view4->byteOffset;
HXDLIN( 198)								int srcElementSize3 = view4->bytesPerElement;
HXDLIN( 198)								int elementSize6 = _this14->bytesPerElement;
HXDLIN( 198)								if ((view4->type == _this14->type)) {
HXLINE( 198)									int srcLength7 = srcData3->length;
HXDLIN( 198)									int cloneLength3 = (srcLength7 - srcByteOffset3);
HXDLIN( 198)									_this14->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength3);
HXDLIN( 198)									_this14->buffer->blit(0,srcData3,srcByteOffset3,cloneLength3);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this14->byteLength = (_this14->bytesPerElement * srcLength6);
HXDLIN( 198)								_this14->byteOffset = 0;
HXDLIN( 198)								_this14->length = srcLength6;
HXDLIN( 198)								this5 = _this14;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer3 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this15 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 198)									int in_byteOffset3 = ( (int)(byteoffset3) );
HXDLIN( 198)									if ((in_byteOffset3 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset3,_this15->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength3 = buffer3->length;
HXDLIN( 198)									int elementSize7 = _this15->bytesPerElement;
HXDLIN( 198)									int newByteLength3 = bufferByteLength3;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength3,_this15->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength3 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength3 = (len * _this15->bytesPerElement);
HXDLIN( 198)										int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 198)										if ((newRange3 > bufferByteLength3)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this15->buffer = buffer3;
HXDLIN( 198)									_this15->byteOffset = in_byteOffset3;
HXDLIN( 198)									_this15->byteLength = newByteLength3;
HXDLIN( 198)									_this15->length = ::Std_obj::_hx_int((( (Float)(newByteLength3) ) / ( (Float)(_this15->bytesPerElement) )));
HXDLIN( 198)									this5 = _this15;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this5;
            			}
            			break;
            			case (int)5: {
HXLINE( 198)				 ::Dynamic elements4 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer4 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array8 = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector4 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view5 = null();
HXDLIN( 198)				 ::Dynamic byteoffset4 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset4 )) {
HXLINE( 198)					byteoffset4 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 198)				if (::hx::IsNotNull( elements4 )) {
HXLINE( 198)					this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements4,5);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array8 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this16 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 198)						_this16->byteOffset = 0;
HXDLIN( 198)						_this16->length = array8->get_length();
HXDLIN( 198)						_this16->byteLength = (_this16->length * _this16->bytesPerElement);
HXDLIN( 198)						_this16->buffer = ::haxe::io::Bytes_obj::alloc(_this16->byteLength);
HXDLIN( 198)						_this16->copyFromArray(array8,null());
HXDLIN( 198)						this6 = _this16;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector4 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this17 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 198)							::cpp::VirtualArray array9 = ( (::cpp::VirtualArray)(vector4->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this17->byteOffset = 0;
HXDLIN( 198)							_this17->length = array9->get_length();
HXDLIN( 198)							_this17->byteLength = (_this17->length * _this17->bytesPerElement);
HXDLIN( 198)							_this17->buffer = ::haxe::io::Bytes_obj::alloc(_this17->byteLength);
HXDLIN( 198)							_this17->copyFromArray(array9,null());
HXDLIN( 198)							this6 = _this17;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view5 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this18 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 198)								 ::haxe::io::Bytes srcData4 = view5->buffer;
HXDLIN( 198)								int srcLength8 = view5->length;
HXDLIN( 198)								int srcByteOffset4 = view5->byteOffset;
HXDLIN( 198)								int srcElementSize4 = view5->bytesPerElement;
HXDLIN( 198)								int elementSize8 = _this18->bytesPerElement;
HXDLIN( 198)								if ((view5->type == _this18->type)) {
HXLINE( 198)									int srcLength9 = srcData4->length;
HXDLIN( 198)									int cloneLength4 = (srcLength9 - srcByteOffset4);
HXDLIN( 198)									_this18->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength4);
HXDLIN( 198)									_this18->buffer->blit(0,srcData4,srcByteOffset4,cloneLength4);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this18->byteLength = (_this18->bytesPerElement * srcLength8);
HXDLIN( 198)								_this18->byteOffset = 0;
HXDLIN( 198)								_this18->length = srcLength8;
HXDLIN( 198)								this6 = _this18;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer4 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this19 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 198)									int in_byteOffset4 = ( (int)(byteoffset4) );
HXDLIN( 198)									if ((in_byteOffset4 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset4,_this19->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength4 = buffer4->length;
HXDLIN( 198)									int elementSize9 = _this19->bytesPerElement;
HXDLIN( 198)									int newByteLength4 = bufferByteLength4;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength4,_this19->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength4 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength4 = (len * _this19->bytesPerElement);
HXDLIN( 198)										int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 198)										if ((newRange4 > bufferByteLength4)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this19->buffer = buffer4;
HXDLIN( 198)									_this19->byteOffset = in_byteOffset4;
HXDLIN( 198)									_this19->byteLength = newByteLength4;
HXDLIN( 198)									_this19->length = ::Std_obj::_hx_int((( (Float)(newByteLength4) ) / ( (Float)(_this19->bytesPerElement) )));
HXDLIN( 198)									this6 = _this19;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this6;
            			}
            			break;
            			case (int)6: {
HXLINE( 198)				 ::Dynamic elements5 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer5 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array10 = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector5 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view6 = null();
HXDLIN( 198)				 ::Dynamic byteoffset5 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset5 )) {
HXLINE( 198)					byteoffset5 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 198)				if (::hx::IsNotNull( elements5 )) {
HXLINE( 198)					this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements5,6);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array10 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this20 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 198)						_this20->byteOffset = 0;
HXDLIN( 198)						_this20->length = array10->get_length();
HXDLIN( 198)						_this20->byteLength = (_this20->length * _this20->bytesPerElement);
HXDLIN( 198)						_this20->buffer = ::haxe::io::Bytes_obj::alloc(_this20->byteLength);
HXDLIN( 198)						_this20->copyFromArray(array10,null());
HXDLIN( 198)						this7 = _this20;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector5 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this21 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 198)							::cpp::VirtualArray array11 = ( (::cpp::VirtualArray)(vector5->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this21->byteOffset = 0;
HXDLIN( 198)							_this21->length = array11->get_length();
HXDLIN( 198)							_this21->byteLength = (_this21->length * _this21->bytesPerElement);
HXDLIN( 198)							_this21->buffer = ::haxe::io::Bytes_obj::alloc(_this21->byteLength);
HXDLIN( 198)							_this21->copyFromArray(array11,null());
HXDLIN( 198)							this7 = _this21;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view6 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this22 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 198)								 ::haxe::io::Bytes srcData5 = view6->buffer;
HXDLIN( 198)								int srcLength10 = view6->length;
HXDLIN( 198)								int srcByteOffset5 = view6->byteOffset;
HXDLIN( 198)								int srcElementSize5 = view6->bytesPerElement;
HXDLIN( 198)								int elementSize10 = _this22->bytesPerElement;
HXDLIN( 198)								if ((view6->type == _this22->type)) {
HXLINE( 198)									int srcLength11 = srcData5->length;
HXDLIN( 198)									int cloneLength5 = (srcLength11 - srcByteOffset5);
HXDLIN( 198)									_this22->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength5);
HXDLIN( 198)									_this22->buffer->blit(0,srcData5,srcByteOffset5,cloneLength5);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this22->byteLength = (_this22->bytesPerElement * srcLength10);
HXDLIN( 198)								_this22->byteOffset = 0;
HXDLIN( 198)								_this22->length = srcLength10;
HXDLIN( 198)								this7 = _this22;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer5 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this23 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 198)									int in_byteOffset5 = ( (int)(byteoffset5) );
HXDLIN( 198)									if ((in_byteOffset5 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset5,_this23->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength5 = buffer5->length;
HXDLIN( 198)									int elementSize11 = _this23->bytesPerElement;
HXDLIN( 198)									int newByteLength5 = bufferByteLength5;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength5,_this23->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength5 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength5 = (len * _this23->bytesPerElement);
HXDLIN( 198)										int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 198)										if ((newRange5 > bufferByteLength5)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this23->buffer = buffer5;
HXDLIN( 198)									_this23->byteOffset = in_byteOffset5;
HXDLIN( 198)									_this23->byteLength = newByteLength5;
HXDLIN( 198)									_this23->length = ::Std_obj::_hx_int((( (Float)(newByteLength5) ) / ( (Float)(_this23->bytesPerElement) )));
HXDLIN( 198)									this7 = _this23;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this7;
            			}
            			break;
            			case (int)7: {
HXLINE( 198)				 ::Dynamic elements6 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer6 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array12 = null();
HXDLIN( 198)				 ::openfl::_Vector::IntVector vector6 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view7 = null();
HXDLIN( 198)				 ::Dynamic byteoffset6 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset6 )) {
HXLINE( 198)					byteoffset6 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 198)				if (::hx::IsNotNull( elements6 )) {
HXLINE( 198)					this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements6,7);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array12 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this24 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 198)						_this24->byteOffset = 0;
HXDLIN( 198)						_this24->length = array12->get_length();
HXDLIN( 198)						_this24->byteLength = (_this24->length * _this24->bytesPerElement);
HXDLIN( 198)						_this24->buffer = ::haxe::io::Bytes_obj::alloc(_this24->byteLength);
HXDLIN( 198)						_this24->copyFromArray(array12,null());
HXDLIN( 198)						this8 = _this24;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector6 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this25 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 198)							::cpp::VirtualArray array13 = ( (::cpp::VirtualArray)(vector6->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this25->byteOffset = 0;
HXDLIN( 198)							_this25->length = array13->get_length();
HXDLIN( 198)							_this25->byteLength = (_this25->length * _this25->bytesPerElement);
HXDLIN( 198)							_this25->buffer = ::haxe::io::Bytes_obj::alloc(_this25->byteLength);
HXDLIN( 198)							_this25->copyFromArray(array13,null());
HXDLIN( 198)							this8 = _this25;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view7 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this26 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 198)								 ::haxe::io::Bytes srcData6 = view7->buffer;
HXDLIN( 198)								int srcLength12 = view7->length;
HXDLIN( 198)								int srcByteOffset6 = view7->byteOffset;
HXDLIN( 198)								int srcElementSize6 = view7->bytesPerElement;
HXDLIN( 198)								int elementSize12 = _this26->bytesPerElement;
HXDLIN( 198)								if ((view7->type == _this26->type)) {
HXLINE( 198)									int srcLength13 = srcData6->length;
HXDLIN( 198)									int cloneLength6 = (srcLength13 - srcByteOffset6);
HXDLIN( 198)									_this26->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength6);
HXDLIN( 198)									_this26->buffer->blit(0,srcData6,srcByteOffset6,cloneLength6);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this26->byteLength = (_this26->bytesPerElement * srcLength12);
HXDLIN( 198)								_this26->byteOffset = 0;
HXDLIN( 198)								_this26->length = srcLength12;
HXDLIN( 198)								this8 = _this26;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer6 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this27 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 198)									int in_byteOffset6 = ( (int)(byteoffset6) );
HXDLIN( 198)									if ((in_byteOffset6 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset6,_this27->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength6 = buffer6->length;
HXDLIN( 198)									int elementSize13 = _this27->bytesPerElement;
HXDLIN( 198)									int newByteLength6 = bufferByteLength6;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength6,_this27->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength6 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength6 = (len * _this27->bytesPerElement);
HXDLIN( 198)										int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 198)										if ((newRange6 > bufferByteLength6)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this27->buffer = buffer6;
HXDLIN( 198)									_this27->byteOffset = in_byteOffset6;
HXDLIN( 198)									_this27->byteLength = newByteLength6;
HXDLIN( 198)									_this27->length = ::Std_obj::_hx_int((( (Float)(newByteLength6) ) / ( (Float)(_this27->bytesPerElement) )));
HXDLIN( 198)									this8 = _this27;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this8;
            			}
            			break;
            			case (int)8: {
HXLINE( 198)				 ::Dynamic elements7 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer7 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array14 = null();
HXDLIN( 198)				 ::openfl::_Vector::FloatVector vector7 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view8 = null();
HXDLIN( 198)				 ::Dynamic byteoffset7 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset7 )) {
HXLINE( 198)					byteoffset7 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 198)				if (::hx::IsNotNull( elements7 )) {
HXLINE( 198)					this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements7,8);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array14 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this28 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 198)						_this28->byteOffset = 0;
HXDLIN( 198)						_this28->length = array14->get_length();
HXDLIN( 198)						_this28->byteLength = (_this28->length * _this28->bytesPerElement);
HXDLIN( 198)						_this28->buffer = ::haxe::io::Bytes_obj::alloc(_this28->byteLength);
HXDLIN( 198)						_this28->copyFromArray(array14,null());
HXDLIN( 198)						this9 = _this28;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector7 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this29 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 198)							::cpp::VirtualArray array15 = ( (::cpp::VirtualArray)(vector7->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this29->byteOffset = 0;
HXDLIN( 198)							_this29->length = array15->get_length();
HXDLIN( 198)							_this29->byteLength = (_this29->length * _this29->bytesPerElement);
HXDLIN( 198)							_this29->buffer = ::haxe::io::Bytes_obj::alloc(_this29->byteLength);
HXDLIN( 198)							_this29->copyFromArray(array15,null());
HXDLIN( 198)							this9 = _this29;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view8 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this30 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 198)								 ::haxe::io::Bytes srcData7 = view8->buffer;
HXDLIN( 198)								int srcLength14 = view8->length;
HXDLIN( 198)								int srcByteOffset7 = view8->byteOffset;
HXDLIN( 198)								int srcElementSize7 = view8->bytesPerElement;
HXDLIN( 198)								int elementSize14 = _this30->bytesPerElement;
HXDLIN( 198)								if ((view8->type == _this30->type)) {
HXLINE( 198)									int srcLength15 = srcData7->length;
HXDLIN( 198)									int cloneLength7 = (srcLength15 - srcByteOffset7);
HXDLIN( 198)									_this30->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength7);
HXDLIN( 198)									_this30->buffer->blit(0,srcData7,srcByteOffset7,cloneLength7);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this30->byteLength = (_this30->bytesPerElement * srcLength14);
HXDLIN( 198)								_this30->byteOffset = 0;
HXDLIN( 198)								_this30->length = srcLength14;
HXDLIN( 198)								this9 = _this30;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer7 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this31 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 198)									int in_byteOffset7 = ( (int)(byteoffset7) );
HXDLIN( 198)									if ((in_byteOffset7 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset7,_this31->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength7 = buffer7->length;
HXDLIN( 198)									int elementSize15 = _this31->bytesPerElement;
HXDLIN( 198)									int newByteLength7 = bufferByteLength7;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength7,_this31->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength7 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength7 = (len * _this31->bytesPerElement);
HXDLIN( 198)										int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 198)										if ((newRange7 > bufferByteLength7)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this31->buffer = buffer7;
HXDLIN( 198)									_this31->byteOffset = in_byteOffset7;
HXDLIN( 198)									_this31->byteLength = newByteLength7;
HXDLIN( 198)									_this31->length = ::Std_obj::_hx_int((( (Float)(newByteLength7) ) / ( (Float)(_this31->bytesPerElement) )));
HXDLIN( 198)									this9 = _this31;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this9;
            			}
            			break;
            			case (int)9: {
HXLINE( 198)				 ::Dynamic elements8 = null();
HXDLIN( 198)				 ::haxe::io::Bytes buffer8 = this1->buffer;
HXDLIN( 198)				::cpp::VirtualArray array16 = null();
HXDLIN( 198)				 ::openfl::_Vector::FloatVector vector8 = null();
HXDLIN( 198)				 ::lime::utils::ArrayBufferView view9 = null();
HXDLIN( 198)				 ::Dynamic byteoffset8 = byte_offset;
HXDLIN( 198)				if (::hx::IsNull( byteoffset8 )) {
HXLINE( 198)					byteoffset8 = 0;
            				}
HXDLIN( 198)				 ::lime::utils::ArrayBufferView this10;
HXDLIN( 198)				if (::hx::IsNotNull( elements8 )) {
HXLINE( 198)					this10 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements8,9);
            				}
            				else {
HXLINE( 198)					if (::hx::IsNotNull( array16 )) {
HXLINE( 198)						 ::lime::utils::ArrayBufferView _this32 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 198)						_this32->byteOffset = 0;
HXDLIN( 198)						_this32->length = array16->get_length();
HXDLIN( 198)						_this32->byteLength = (_this32->length * _this32->bytesPerElement);
HXDLIN( 198)						_this32->buffer = ::haxe::io::Bytes_obj::alloc(_this32->byteLength);
HXDLIN( 198)						_this32->copyFromArray(array16,null());
HXDLIN( 198)						this10 = _this32;
            					}
            					else {
HXLINE( 198)						if (::hx::IsNotNull( vector8 )) {
HXLINE( 198)							 ::lime::utils::ArrayBufferView _this33 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 198)							::cpp::VirtualArray array17 = ( (::cpp::VirtualArray)(vector8->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 198)							_this33->byteOffset = 0;
HXDLIN( 198)							_this33->length = array17->get_length();
HXDLIN( 198)							_this33->byteLength = (_this33->length * _this33->bytesPerElement);
HXDLIN( 198)							_this33->buffer = ::haxe::io::Bytes_obj::alloc(_this33->byteLength);
HXDLIN( 198)							_this33->copyFromArray(array17,null());
HXDLIN( 198)							this10 = _this33;
            						}
            						else {
HXLINE( 198)							if (::hx::IsNotNull( view9 )) {
HXLINE( 198)								 ::lime::utils::ArrayBufferView _this34 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 198)								 ::haxe::io::Bytes srcData8 = view9->buffer;
HXDLIN( 198)								int srcLength16 = view9->length;
HXDLIN( 198)								int srcByteOffset8 = view9->byteOffset;
HXDLIN( 198)								int srcElementSize8 = view9->bytesPerElement;
HXDLIN( 198)								int elementSize16 = _this34->bytesPerElement;
HXDLIN( 198)								if ((view9->type == _this34->type)) {
HXLINE( 198)									int srcLength17 = srcData8->length;
HXDLIN( 198)									int cloneLength8 = (srcLength17 - srcByteOffset8);
HXDLIN( 198)									_this34->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength8);
HXDLIN( 198)									_this34->buffer->blit(0,srcData8,srcByteOffset8,cloneLength8);
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 198)								_this34->byteLength = (_this34->bytesPerElement * srcLength16);
HXDLIN( 198)								_this34->byteOffset = 0;
HXDLIN( 198)								_this34->length = srcLength16;
HXDLIN( 198)								this10 = _this34;
            							}
            							else {
HXLINE( 198)								if (::hx::IsNotNull( buffer8 )) {
HXLINE( 198)									 ::lime::utils::ArrayBufferView _this35 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 198)									int in_byteOffset8 = ( (int)(byteoffset8) );
HXDLIN( 198)									if ((in_byteOffset8 < 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									if ((::hx::Mod(in_byteOffset8,_this35->bytesPerElement) != 0)) {
HXLINE( 198)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 198)									int bufferByteLength8 = buffer8->length;
HXDLIN( 198)									int elementSize17 = _this35->bytesPerElement;
HXDLIN( 198)									int newByteLength8 = bufferByteLength8;
HXDLIN( 198)									if (::hx::IsNull( len )) {
HXLINE( 198)										newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 198)										if ((::hx::Mod(bufferByteLength8,_this35->bytesPerElement) != 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 198)										if ((newByteLength8 < 0)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 198)										newByteLength8 = (len * _this35->bytesPerElement);
HXDLIN( 198)										int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 198)										if ((newRange8 > bufferByteLength8)) {
HXLINE( 198)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 198)									_this35->buffer = buffer8;
HXDLIN( 198)									_this35->byteOffset = in_byteOffset8;
HXDLIN( 198)									_this35->byteLength = newByteLength8;
HXDLIN( 198)									_this35->length = ::Std_obj::_hx_int((( (Float)(newByteLength8) ) / ( (Float)(_this35->bytesPerElement) )));
HXDLIN( 198)									this10 = _this35;
            								}
            								else {
HXLINE( 198)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 198)				view = this10;
            			}
            			break;
            		}
HXDLIN( 198)		 ::lime::utils::ArrayBufferView segment = view;
HXLINE( 199)		::Array< Float > signal = this->getSignal(segment,this->audioSource->buffer->bitsPerSample);
HXLINE( 201)		if ((this->audioSource->buffer->channels > 1)) {
HXLINE( 202)			::Array< Float > mixed = ::Array_obj< Float >::__new();
HXLINE( 203)			mixed->resize(::Std_obj::_hx_int((( (Float)(signal->length) ) / ( (Float)(this->audioSource->buffer->channels) ))));
HXLINE( 204)			{
HXLINE( 204)				int _g = 0;
HXDLIN( 204)				int _g1 = mixed->length;
HXDLIN( 204)				while((_g < _g1)){
HXLINE( 204)					_g = (_g + 1);
HXDLIN( 204)					int i = (_g - 1);
HXLINE( 205)					mixed[i] = ((Float)0.0);
HXLINE( 206)					{
HXLINE( 206)						int _g2 = 0;
HXDLIN( 206)						int _g3 = this->audioSource->buffer->channels;
HXDLIN( 206)						while((_g2 < _g3)){
HXLINE( 206)							_g2 = (_g2 + 1);
HXDLIN( 206)							int c = (_g2 - 1);
HXLINE( 207)							::Array< Float > mixed1 = mixed;
HXDLIN( 207)							int i1 = i;
HXDLIN( 207)							mixed1[i1] = (mixed1->__get(i1) + (((Float)0.7) * signal->__get(((i * this->audioSource->buffer->channels) + c))));
            						}
            					}
HXLINE( 209)					::Array< Float > mixed2 = mixed;
HXDLIN( 209)					int i2 = i;
HXDLIN( 209)					mixed2[i2] = (mixed2->__get(i2) * this->blackmanWindow->__get(i));
            				}
            			}
HXLINE( 211)			signal = mixed;
            		}
HXLINE( 214)		int range = 16;
HXLINE( 215)		::Array< Float > freqs = this->fft->calcFreq(signal);
HXLINE( 216)		::Array< int > bars = this->vis->makeLogGraph(freqs,(this->barCount + 1),::Math_obj::floor((this->maxDb - this->minDb)),range);
HXLINE( 218)		if (((bars->length - 1) > this->barHistories->length)) {
HXLINE( 219)			this->barHistories->resize((bars->length - 1));
            		}
HXLINE( 223)		levels->resize((bars->length - 1));
HXLINE( 224)		{
HXLINE( 224)			int _g4 = 0;
HXDLIN( 224)			int _g5 = (bars->length - 1);
HXDLIN( 224)			while((_g4 < _g5)){
HXLINE( 224)				_g4 = (_g4 + 1);
HXDLIN( 224)				int i3 = (_g4 - 1);
HXLINE( 226)				if (::hx::IsNull( this->barHistories->__get(i3).StaticCast<  ::funkin::vis::dsp::RecentPeakFinder >() )) {
HXLINE( 226)					this->barHistories[i3] =  ::funkin::vis::dsp::RecentPeakFinder_obj::__alloc( HX_CTX ,null());
            				}
HXLINE( 227)				 ::funkin::vis::dsp::RecentPeakFinder recentValues = this->barHistories->__get(i3).StaticCast<  ::funkin::vis::dsp::RecentPeakFinder >();
HXLINE( 228)				Float value = (( (Float)(bars->__get(i3)) ) / ( (Float)(range) ));
HXLINE( 231)				Float lastValue = recentValues->get_lastValue();
HXLINE( 232)				if ((this->maxDelta > ((Float)0.0))) {
HXLINE( 233)					Float val = (value - lastValue);
HXDLIN( 233)					Float min = (( (Float)(-1) ) * this->maxDelta);
HXDLIN( 233)					Float max = this->maxDelta;
HXDLIN( 233)					Float delta;
HXDLIN( 233)					if ((val <= min)) {
HXLINE( 233)						delta = min;
            					}
            					else {
HXLINE( 233)						if ((val >= max)) {
HXLINE( 233)							delta = max;
            						}
            						else {
HXLINE( 233)							delta = val;
            						}
            					}
HXLINE( 234)					value = (lastValue + delta);
            				}
HXLINE( 236)				recentValues->push(value);
HXLINE( 238)				Float recentPeak = recentValues->peak;
HXLINE( 240)				if (::hx::IsNotNull( levels->__get(i3) )) {
HXLINE( 242)					levels->__get(i3)->__SetField(HX_("value",71,7f,b8,31),value,::hx::paccDynamic);
HXLINE( 243)					levels->__get(i3)->__SetField(HX_("peak",1f,de,54,4a),recentPeak,::hx::paccDynamic);
            				}
            				else {
HXLINE( 245)					levels[i3] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("value",71,7f,b8,31),value)
            						->setFixed(1,HX_("peak",1f,de,54,4a),recentPeak));
            				}
            			}
            		}
HXLINE( 247)		return levels;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpectralAnalyzer_obj,getLevels,return )

::Array< Float > SpectralAnalyzer_obj::getSignal( ::lime::utils::ArrayBufferView data,int bitsPerSample){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_254_getSignal)
HXLINE( 255)		switch((int)(bitsPerSample)){
            			case (int)8: {
HXLINE( 258)				this->_buffer->resize(data->length);
HXLINE( 259)				{
HXLINE( 259)					int _g = 0;
HXDLIN( 259)					int _g1 = data->length;
HXDLIN( 259)					while((_g < _g1)){
HXLINE( 259)						_g = (_g + 1);
HXDLIN( 259)						int i = (_g - 1);
HXLINE( 260)						::Array< Float > _hx_tmp = this->_buffer;
HXDLIN( 260)						int _hx_int = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + i)) & 255)) );
HXDLIN( 260)						Float _hx_tmp1;
HXDLIN( 260)						if ((_hx_int < 0)) {
HXLINE( 260)							_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            						}
            						else {
HXLINE( 260)							_hx_tmp1 = (_hx_int + ((Float)0.0));
            						}
HXDLIN( 260)						_hx_tmp[i] = (_hx_tmp1 / ((Float)128.0));
            					}
            				}
            			}
            			break;
            			case (int)16: {
HXLINE( 263)				::Array< Float > _hx_tmp2 = this->_buffer;
HXDLIN( 263)				_hx_tmp2->resize(::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(2) ))));
HXLINE( 264)				{
HXLINE( 264)					int _g2 = 0;
HXDLIN( 264)					int _g3 = this->_buffer->length;
HXDLIN( 264)					while((_g2 < _g3)){
HXLINE( 264)						_g2 = (_g2 + 1);
HXDLIN( 264)						int i1 = (_g2 - 1);
HXLINE( 265)						::Array< Float > _hx_tmp3 = this->_buffer;
HXDLIN( 265)						int pos = (i1 * 2);
HXDLIN( 265)						int a = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + pos)) & 255)) );
HXDLIN( 265)						int val = (a | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (pos + 1))) & 255)) ) << 8));
HXDLIN( 265)						int _hx_tmp4;
HXDLIN( 265)						if (((val & 32768) != 0)) {
HXLINE( 265)							_hx_tmp4 = (val - 65536);
            						}
            						else {
HXLINE( 265)							_hx_tmp4 = val;
            						}
HXDLIN( 265)						_hx_tmp3[i1] = (( (Float)(_hx_tmp4) ) / ((Float)32767.0));
            					}
            				}
            			}
            			break;
            			case (int)24: {
HXLINE( 268)				::Array< Float > _hx_tmp5 = this->_buffer;
HXDLIN( 268)				_hx_tmp5->resize(::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(3) ))));
HXLINE( 269)				{
HXLINE( 269)					int _g4 = 0;
HXDLIN( 269)					int _g5 = this->_buffer->length;
HXDLIN( 269)					while((_g4 < _g5)){
HXLINE( 269)						_g4 = (_g4 + 1);
HXDLIN( 269)						int i2 = (_g4 - 1);
HXLINE( 270)						::Array< Float > _hx_tmp6 = this->_buffer;
HXDLIN( 270)						int pos1 = (i2 * 3);
HXDLIN( 270)						int a1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + pos1)) & 255)) );
HXDLIN( 270)						int a2 = (a1 | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (pos1 + 1))) & 255)) ) << 8));
HXDLIN( 270)						int val1 = (a2 | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (pos1 + 2))) & 255)) ) << 16));
HXDLIN( 270)						int _hx_tmp7;
HXDLIN( 270)						if (((val1 & 8388608) != 0)) {
HXLINE( 270)							_hx_tmp7 = (val1 - 16777216);
            						}
            						else {
HXLINE( 270)							_hx_tmp7 = val1;
            						}
HXDLIN( 270)						_hx_tmp6[i2] = (( (Float)(_hx_tmp7) ) / ((Float)8388607.0));
            					}
            				}
            			}
            			break;
            			case (int)32: {
HXLINE( 273)				::Array< Float > _hx_tmp8 = this->_buffer;
HXDLIN( 273)				_hx_tmp8->resize(::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) ))));
HXLINE( 274)				{
HXLINE( 274)					int _g6 = 0;
HXDLIN( 274)					int _g7 = this->_buffer->length;
HXDLIN( 274)					while((_g6 < _g7)){
HXLINE( 274)						_g6 = (_g6 + 1);
HXDLIN( 274)						int i3 = (_g6 - 1);
HXLINE( 275)						::Array< Float > _hx_tmp9 = this->_buffer;
HXDLIN( 275)						int pos2 = (i3 * 4);
HXDLIN( 275)						int a3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + pos2)) & 255)) );
HXDLIN( 275)						int a4 = (a3 | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (pos2 + 1))) & 255)) ) << 8));
HXDLIN( 275)						int a5 = (a4 | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (pos2 + 2))) & 255)) ) << 16));
HXDLIN( 275)						_hx_tmp9[i3] = (( (Float)((a5 | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (pos2 + 3))) & 255)) ) << 24))) ) / ((Float)2147483647.0));
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 277)				::haxe::Log_obj::trace(HX_("Unknown integer audio format",59,79,02,31),::hx::SourceInfo(HX_("funkin/vis/dsp/SpectralAnalyzer.hx",99,f0,d3,6e),277,HX_("funkin.vis.dsp.SpectralAnalyzer",c2,77,c9,e5),HX_("getSignal",9e,b7,dc,30)));
            			}
            		}
HXLINE( 279)		return this->_buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SpectralAnalyzer_obj,getSignal,return )

Float SpectralAnalyzer_obj::set_minDb(Float value){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_300_set_minDb)
HXLINE( 301)		this->minDb = value;
HXLINE( 307)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpectralAnalyzer_obj,set_minDb,return )

Float SpectralAnalyzer_obj::set_maxDb(Float value){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_311_set_maxDb)
HXLINE( 312)		this->maxDb = value;
HXLINE( 318)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpectralAnalyzer_obj,set_maxDb,return )

int SpectralAnalyzer_obj::set_fftN(int value){
            	HX_GC_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_322_set_fftN)
HXLINE( 323)		this->fftN = value;
HXLINE( 324)		int pow2 = ::funkin::vis::dsp::FFT_obj::nextPow2(value);
HXLINE( 325)		this->fftN2 = ::Std_obj::_hx_int((( (Float)(pow2) ) / ( (Float)(2) )));
HXLINE( 330)		this->fft =  ::grig::audio::FFT_obj::__alloc( HX_CTX ,value);
HXLINE( 333)		this->calcBars(this->barCount,this->peakHold);
HXLINE( 334)		this->resizeBlackmanWindow(this->fftN);
HXLINE( 335)		return pow2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpectralAnalyzer_obj,set_fftN,return )

int SpectralAnalyzer_obj::min_Int(int x,int y){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_296_min_Int)
HXDLIN( 296)		if ((x > y)) {
HXDLIN( 296)			return y;
            		}
            		else {
HXDLIN( 296)			return x;
            		}
HXDLIN( 296)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SpectralAnalyzer_obj,min_Int,return )

Float SpectralAnalyzer_obj::clamp_Float(Float val,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_285_clamp_Float)
HXDLIN( 285)		if ((val <= min)) {
HXDLIN( 285)			return min;
            		}
            		else {
HXDLIN( 285)			if ((val >= max)) {
HXDLIN( 285)				return max;
            			}
            			else {
HXDLIN( 285)				return val;
            			}
            		}
HXDLIN( 285)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SpectralAnalyzer_obj,clamp_Float,return )

Float SpectralAnalyzer_obj::calculateBlackmanWindow(int n,int fftN){
            	HX_STACKFRAME(&_hx_pos_ff4ea58ac4611d7d_290_calculateBlackmanWindow)
HXDLIN( 290)		return ((((Float)0.42) - (((Float)0.50) * ::Math_obj::cos((((( (Float)(2) ) * ::Math_obj::PI) * ( (Float)(n) )) / ( (Float)((fftN - 1)) ))))) + (((Float)0.08) * ::Math_obj::cos((((( (Float)(4) ) * ::Math_obj::PI) * ( (Float)(n) )) / ( (Float)((fftN - 1)) )))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SpectralAnalyzer_obj,calculateBlackmanWindow,return )


::hx::ObjectPtr< SpectralAnalyzer_obj > SpectralAnalyzer_obj::__new( ::lime::media::AudioSource audioSource,int barCount,::hx::Null< Float >  __o_maxDelta,::hx::Null< int >  __o_peakHold) {
	::hx::ObjectPtr< SpectralAnalyzer_obj > __this = new SpectralAnalyzer_obj();
	__this->__construct(audioSource,barCount,__o_maxDelta,__o_peakHold);
	return __this;
}

::hx::ObjectPtr< SpectralAnalyzer_obj > SpectralAnalyzer_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::media::AudioSource audioSource,int barCount,::hx::Null< Float >  __o_maxDelta,::hx::Null< int >  __o_peakHold) {
	SpectralAnalyzer_obj *__this = (SpectralAnalyzer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SpectralAnalyzer_obj), true, "funkin.vis.dsp.SpectralAnalyzer"));
	*(void **)__this = SpectralAnalyzer_obj::_hx_vtable;
	__this->__construct(audioSource,barCount,__o_maxDelta,__o_peakHold);
	return __this;
}

SpectralAnalyzer_obj::SpectralAnalyzer_obj()
{
}

void SpectralAnalyzer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpectralAnalyzer);
	HX_MARK_MEMBER_NAME(minDb,"minDb");
	HX_MARK_MEMBER_NAME(maxDb,"maxDb");
	HX_MARK_MEMBER_NAME(fftN,"fftN");
	HX_MARK_MEMBER_NAME(minFreq,"minFreq");
	HX_MARK_MEMBER_NAME(maxFreq,"maxFreq");
	HX_MARK_MEMBER_NAME(audioSource,"audioSource");
	HX_MARK_MEMBER_NAME(audioClip,"audioClip");
	HX_MARK_MEMBER_NAME(barCount,"barCount");
	HX_MARK_MEMBER_NAME(maxDelta,"maxDelta");
	HX_MARK_MEMBER_NAME(peakHold,"peakHold");
	HX_MARK_MEMBER_NAME(fftN2,"fftN2");
	HX_MARK_MEMBER_NAME(fft,"fft");
	HX_MARK_MEMBER_NAME(vis,"vis");
	HX_MARK_MEMBER_NAME(barHistories,"barHistories");
	HX_MARK_MEMBER_NAME(blackmanWindow,"blackmanWindow");
	HX_MARK_MEMBER_NAME(_buffer,"_buffer");
	HX_MARK_END_CLASS();
}

void SpectralAnalyzer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(minDb,"minDb");
	HX_VISIT_MEMBER_NAME(maxDb,"maxDb");
	HX_VISIT_MEMBER_NAME(fftN,"fftN");
	HX_VISIT_MEMBER_NAME(minFreq,"minFreq");
	HX_VISIT_MEMBER_NAME(maxFreq,"maxFreq");
	HX_VISIT_MEMBER_NAME(audioSource,"audioSource");
	HX_VISIT_MEMBER_NAME(audioClip,"audioClip");
	HX_VISIT_MEMBER_NAME(barCount,"barCount");
	HX_VISIT_MEMBER_NAME(maxDelta,"maxDelta");
	HX_VISIT_MEMBER_NAME(peakHold,"peakHold");
	HX_VISIT_MEMBER_NAME(fftN2,"fftN2");
	HX_VISIT_MEMBER_NAME(fft,"fft");
	HX_VISIT_MEMBER_NAME(vis,"vis");
	HX_VISIT_MEMBER_NAME(barHistories,"barHistories");
	HX_VISIT_MEMBER_NAME(blackmanWindow,"blackmanWindow");
	HX_VISIT_MEMBER_NAME(_buffer,"_buffer");
}

::hx::Val SpectralAnalyzer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fft") ) { return ::hx::Val( fft ); }
		if (HX_FIELD_EQ(inName,"vis") ) { return ::hx::Val( vis ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fftN") ) { return ::hx::Val( fftN ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"minDb") ) { return ::hx::Val( minDb ); }
		if (HX_FIELD_EQ(inName,"maxDb") ) { return ::hx::Val( maxDb ); }
		if (HX_FIELD_EQ(inName,"fftN2") ) { return ::hx::Val( fftN2 ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minFreq") ) { return ::hx::Val( minFreq ); }
		if (HX_FIELD_EQ(inName,"maxFreq") ) { return ::hx::Val( maxFreq ); }
		if (HX_FIELD_EQ(inName,"_buffer") ) { return ::hx::Val( _buffer ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barCount") ) { return ::hx::Val( barCount ); }
		if (HX_FIELD_EQ(inName,"maxDelta") ) { return ::hx::Val( maxDelta ); }
		if (HX_FIELD_EQ(inName,"peakHold") ) { return ::hx::Val( peakHold ); }
		if (HX_FIELD_EQ(inName,"calcBars") ) { return ::hx::Val( calcBars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fftN") ) { return ::hx::Val( set_fftN_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"audioClip") ) { return ::hx::Val( audioClip ); }
		if (HX_FIELD_EQ(inName,"freqToBin") ) { return ::hx::Val( freqToBin_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLevels") ) { return ::hx::Val( getLevels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSignal") ) { return ::hx::Val( getSignal_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minDb") ) { return ::hx::Val( set_minDb_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxDb") ) { return ::hx::Val( set_maxDb_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"audioSource") ) { return ::hx::Val( audioSource ); }
		if (HX_FIELD_EQ(inName,"normalizedB") ) { return ::hx::Val( normalizedB_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"barHistories") ) { return ::hx::Val( barHistories ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"blackmanWindow") ) { return ::hx::Val( blackmanWindow ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"resizeBlackmanWindow") ) { return ::hx::Val( resizeBlackmanWindow_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SpectralAnalyzer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"min_Int") ) { outValue = min_Int_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clamp_Float") ) { outValue = clamp_Float_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"calculateBlackmanWindow") ) { outValue = calculateBlackmanWindow_dyn(); return true; }
	}
	return false;
}

::hx::Val SpectralAnalyzer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fft") ) { fft=inValue.Cast<  ::grig::audio::FFT >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vis") ) { vis=inValue.Cast<  ::grig::audio::FFTVisualization >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fftN") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_fftN(inValue.Cast< int >()) );fftN=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"minDb") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minDb(inValue.Cast< Float >()) );minDb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxDb") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxDb(inValue.Cast< Float >()) );maxDb=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fftN2") ) { fftN2=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minFreq") ) { minFreq=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxFreq") ) { maxFreq=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_buffer") ) { _buffer=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barCount") ) { barCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxDelta") ) { maxDelta=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"peakHold") ) { peakHold=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"audioClip") ) { audioClip=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"audioSource") ) { audioSource=inValue.Cast<  ::lime::media::AudioSource >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"barHistories") ) { barHistories=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"blackmanWindow") ) { blackmanWindow=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpectralAnalyzer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("minDb",b0,55,68,08));
	outFields->push(HX_("maxDb",42,37,26,03));
	outFields->push(HX_("fftN",9a,8e,b9,43));
	outFields->push(HX_("minFreq",6a,0b,cc,34));
	outFields->push(HX_("maxFreq",7c,f5,f2,c3));
	outFields->push(HX_("audioSource",51,e2,e1,00));
	outFields->push(HX_("audioClip",c6,36,78,61));
	outFields->push(HX_("barCount",fc,85,31,19));
	outFields->push(HX_("maxDelta",b4,3a,44,81));
	outFields->push(HX_("peakHold",fe,ce,73,02));
	outFields->push(HX_("fftN2",58,38,a3,fe));
	outFields->push(HX_("fft",34,bf,4d,00));
	outFields->push(HX_("vis",e0,e5,59,00));
	outFields->push(HX_("barHistories",5f,42,fd,ae));
	outFields->push(HX_("blackmanWindow",8b,fc,7b,f4));
	outFields->push(HX_("_buffer",9f,ce,0b,3f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SpectralAnalyzer_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SpectralAnalyzer_obj,minDb),HX_("minDb",b0,55,68,08)},
	{::hx::fsFloat,(int)offsetof(SpectralAnalyzer_obj,maxDb),HX_("maxDb",42,37,26,03)},
	{::hx::fsInt,(int)offsetof(SpectralAnalyzer_obj,fftN),HX_("fftN",9a,8e,b9,43)},
	{::hx::fsFloat,(int)offsetof(SpectralAnalyzer_obj,minFreq),HX_("minFreq",6a,0b,cc,34)},
	{::hx::fsFloat,(int)offsetof(SpectralAnalyzer_obj,maxFreq),HX_("maxFreq",7c,f5,f2,c3)},
	{::hx::fsObject /*  ::lime::media::AudioSource */ ,(int)offsetof(SpectralAnalyzer_obj,audioSource),HX_("audioSource",51,e2,e1,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SpectralAnalyzer_obj,audioClip),HX_("audioClip",c6,36,78,61)},
	{::hx::fsInt,(int)offsetof(SpectralAnalyzer_obj,barCount),HX_("barCount",fc,85,31,19)},
	{::hx::fsFloat,(int)offsetof(SpectralAnalyzer_obj,maxDelta),HX_("maxDelta",b4,3a,44,81)},
	{::hx::fsInt,(int)offsetof(SpectralAnalyzer_obj,peakHold),HX_("peakHold",fe,ce,73,02)},
	{::hx::fsInt,(int)offsetof(SpectralAnalyzer_obj,fftN2),HX_("fftN2",58,38,a3,fe)},
	{::hx::fsObject /*  ::grig::audio::FFT */ ,(int)offsetof(SpectralAnalyzer_obj,fft),HX_("fft",34,bf,4d,00)},
	{::hx::fsObject /*  ::grig::audio::FFTVisualization */ ,(int)offsetof(SpectralAnalyzer_obj,vis),HX_("vis",e0,e5,59,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SpectralAnalyzer_obj,barHistories),HX_("barHistories",5f,42,fd,ae)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SpectralAnalyzer_obj,blackmanWindow),HX_("blackmanWindow",8b,fc,7b,f4)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SpectralAnalyzer_obj,_buffer),HX_("_buffer",9f,ce,0b,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SpectralAnalyzer_obj_sStaticStorageInfo = 0;
#endif

static ::String SpectralAnalyzer_obj_sMemberFields[] = {
	HX_("minDb",b0,55,68,08),
	HX_("maxDb",42,37,26,03),
	HX_("fftN",9a,8e,b9,43),
	HX_("minFreq",6a,0b,cc,34),
	HX_("maxFreq",7c,f5,f2,c3),
	HX_("audioSource",51,e2,e1,00),
	HX_("audioClip",c6,36,78,61),
	HX_("barCount",fc,85,31,19),
	HX_("maxDelta",b4,3a,44,81),
	HX_("peakHold",fe,ce,73,02),
	HX_("fftN2",58,38,a3,fe),
	HX_("fft",34,bf,4d,00),
	HX_("vis",e0,e5,59,00),
	HX_("barHistories",5f,42,fd,ae),
	HX_("blackmanWindow",8b,fc,7b,f4),
	HX_("freqToBin",34,22,2c,c2),
	HX_("normalizedB",2b,4c,08,c0),
	HX_("calcBars",75,9a,44,3b),
	HX_("resizeBlackmanWindow",9f,ed,ea,e2),
	HX_("getLevels",a5,47,a6,20),
	HX_("_buffer",9f,ce,0b,3f),
	HX_("getSignal",9e,b7,dc,30),
	HX_("set_minDb",13,9e,62,2f),
	HX_("set_maxDb",a5,7f,20,2a),
	HX_("set_fftN",97,a3,d1,71),
	::String(null()) };

::hx::Class SpectralAnalyzer_obj::__mClass;

static ::String SpectralAnalyzer_obj_sStaticFields[] = {
	HX_("min_Int",62,4c,33,45),
	HX_("clamp_Float",f8,dd,70,00),
	HX_("calculateBlackmanWindow",91,8c,f8,59),
	::String(null())
};

void SpectralAnalyzer_obj::__register()
{
	SpectralAnalyzer_obj _hx_dummy;
	SpectralAnalyzer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.dsp.SpectralAnalyzer",c2,77,c9,e5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SpectralAnalyzer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SpectralAnalyzer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SpectralAnalyzer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SpectralAnalyzer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpectralAnalyzer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpectralAnalyzer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
} // end namespace dsp
