// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_FFT
#include <funkin/vis/dsp/FFT.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_Signal
#include <funkin/vis/dsp/Signal.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp__Complex_Complex_Impl_
#include <funkin/vis/dsp/_Complex/Complex_Impl_.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp__OffsetArray_OffsetArray_Impl_
#include <funkin/vis/dsp/_OffsetArray/OffsetArray_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_24_fft,"funkin.vis.dsp.FFT","fft",0x6cd365a2,"funkin.vis.dsp.FFT.fft","funkin/vis/dsp/FFT.hx",24,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_32_rfft,"funkin.vis.dsp.FFT","rfft",0xd4140bd4,"funkin.vis.dsp.FFT.rfft","funkin/vis/dsp/FFT.hx",32,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_46_ifft,"funkin.vis.dsp.FFT","ifft",0xce21203d,"funkin.vis.dsp.FFT.ifft","funkin/vis/dsp/FFT.hx",46,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_49_do_fft,"funkin.vis.dsp.FFT","do_fft",0x9aff0f92,"funkin.vis.dsp.FFT.do_fft","funkin/vis/dsp/FFT.hx",49,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_70_ditfft2,"funkin.vis.dsp.FFT","ditfft2",0xb57494bb,"funkin.vis.dsp.FFT.ditfft2","funkin/vis/dsp/FFT.hx",70,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_88_ditfft4,"funkin.vis.dsp.FFT","ditfft4",0xb57494bd,"funkin.vis.dsp.FFT.ditfft4","funkin/vis/dsp/FFT.hx",88,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_125_dft,"funkin.vis.dsp.FFT","dft",0x6cd1e120,"funkin.vis.dsp.FFT.dft","funkin/vis/dsp/FFT.hx",125,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_145_precomputeTwiddleFactors,"funkin.vis.dsp.FFT","precomputeTwiddleFactors",0xa5d81bab,"funkin.vis.dsp.FFT.precomputeTwiddleFactors","funkin/vis/dsp/FFT.hx",145,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_169_computeTwiddle,"funkin.vis.dsp.FFT","computeTwiddle",0x498e401a,"funkin.vis.dsp.FFT.computeTwiddle","funkin/vis/dsp/FFT.hx",169,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_181_useTwiddleFactor,"funkin.vis.dsp.FFT","useTwiddleFactor",0xa6f6e4b9,"funkin.vis.dsp.FFT.useTwiddleFactor","funkin/vis/dsp/FFT.hx",181,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_191_nextPow2,"funkin.vis.dsp.FFT","nextPow2",0x40ab78ff,"funkin.vis.dsp.FFT.nextPow2","funkin/vis/dsp/FFT.hx",191,0xacfb5e25)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa59441b2036984_201_main,"funkin.vis.dsp.FFT","main",0xd0c2320b,"funkin.vis.dsp.FFT.main","funkin/vis/dsp/FFT.hx",201,0xacfb5e25)
static const Float _hx_array_data_ceceb7dc_37[] = {
	5919.911,
};
namespace funkin{
namespace vis{
namespace dsp{

void FFT_obj::__construct() { }

Dynamic FFT_obj::__CreateEmpty() { return new FFT_obj; }

void *FFT_obj::_hx_vtable = 0;

Dynamic FFT_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FFT_obj > _hx_result = new FFT_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FFT_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f010ade;
}

::Array< ::Dynamic> FFT_obj::fft(::Array< ::Dynamic> input){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_24_fft)
HXDLIN(  24)		return ::funkin::vis::dsp::FFT_obj::do_fft(input,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FFT_obj,fft,return )

::Array< ::Dynamic> FFT_obj::rfft(::Array< Float > input){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_32_rfft)
HXLINE(  34)		 ::Dynamic f = ::funkin::vis::dsp::_hx__Complex::Complex_Impl__obj::fromReal_dyn();
HXDLIN(  34)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(input->length);
HXDLIN(  34)		{
HXLINE(  34)			int _g = 0;
HXDLIN(  34)			int _g1 = input->length;
HXDLIN(  34)			while((_g < _g1)){
HXLINE(  34)				_g = (_g + 1);
HXDLIN(  34)				int i = (_g - 1);
HXDLIN(  34)				{
HXLINE(  34)					 ::Dynamic inValue = f(_hx_array_unsafe_get(input,i));
HXDLIN(  34)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN(  34)		::Array< ::Dynamic> s = ::funkin::vis::dsp::FFT_obj::fft(result);
HXLINE(  35)		return s->slice(0,(::Std_obj::_hx_int((( (Float)(s->length) ) / ( (Float)(2) ))) + 1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FFT_obj,rfft,return )

::Array< ::Dynamic> FFT_obj::ifft(::Array< ::Dynamic> input){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_46_ifft)
HXDLIN(  46)		return ::funkin::vis::dsp::FFT_obj::do_fft(input,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FFT_obj,ifft,return )

::Array< ::Dynamic> FFT_obj::do_fft(::Array< ::Dynamic> input,bool inverse){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_49_do_fft)
HXLINE(  50)		int n = ::funkin::vis::dsp::FFT_obj::nextPow2(input->length);
HXLINE(  51)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  51)		{
HXLINE(  51)			int _g1 = 0;
HXDLIN(  51)			int _g2 = n;
HXDLIN(  51)			while((_g1 < _g2)){
HXLINE(  51)				_g1 = (_g1 + 1);
HXDLIN(  51)				int i = (_g1 - 1);
HXDLIN(  51)				if ((i < input->length)) {
HXLINE(  51)					_g->push(input->__get(i));
            				}
            				else {
HXLINE(  51)					_g->push(::funkin::vis::dsp::_hx__Complex::Complex_Impl__obj::zero);
            				}
            			}
            		}
HXDLIN(  51)		::Array< ::Dynamic> ts = _g;
HXLINE(  52)		::Array< ::Dynamic> _g3 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  52)		{
HXLINE(  52)			int _g4 = 0;
HXDLIN(  52)			int _g5 = n;
HXDLIN(  52)			while((_g4 < _g5)){
HXLINE(  52)				_g4 = (_g4 + 1);
HXDLIN(  52)				int _ = (_g4 - 1);
HXDLIN(  52)				_g3->push(::funkin::vis::dsp::_hx__Complex::Complex_Impl__obj::zero);
            			}
            		}
HXDLIN(  52)		::Array< ::Dynamic> fs = _g3;
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if (inverse) {
HXLINE(  54)			::Array< ::Dynamic> tmp = ::funkin::vis::dsp::FFT_obj::twiddleFactorsInversed;
HXDLIN(  54)			 ::Dynamic _hx_tmp1;
HXDLIN(  54)			if (::hx::IsNotNull( tmp )) {
HXLINE(  54)				_hx_tmp1 = tmp->length;
            			}
            			else {
HXLINE(  54)				_hx_tmp1 = null();
            			}
HXDLIN(  54)			_hx_tmp = ::hx::IsNotEq( _hx_tmp1,n );
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  55)			::funkin::vis::dsp::FFT_obj::precomputeTwiddleFactors(n,true);
            		}
            		else {
HXLINE(  56)			bool _hx_tmp2;
HXDLIN(  56)			if (!(inverse)) {
HXLINE(  56)				::Array< ::Dynamic> tmp1 = ::funkin::vis::dsp::FFT_obj::twiddleFactors;
HXDLIN(  56)				 ::Dynamic _hx_tmp3;
HXDLIN(  56)				if (::hx::IsNotNull( tmp1 )) {
HXLINE(  56)					_hx_tmp3 = tmp1->length;
            				}
            				else {
HXLINE(  56)					_hx_tmp3 = null();
            				}
HXDLIN(  56)				_hx_tmp2 = ::hx::IsNotEq( _hx_tmp3,n );
            			}
            			else {
HXLINE(  56)				_hx_tmp2 = false;
            			}
HXDLIN(  56)			if (_hx_tmp2) {
HXLINE(  57)				::funkin::vis::dsp::FFT_obj::precomputeTwiddleFactors(n,false);
            			}
            		}
HXLINE(  59)		::funkin::vis::dsp::FFT_obj::ditfft4(ts,0,fs,0,n,1,inverse);
HXLINE(  60)		if (inverse) {
HXLINE(  60)			::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(fs->length);
HXDLIN(  60)			{
HXLINE(  60)				int _g6 = 0;
HXDLIN(  60)				int _g7 = fs->length;
HXDLIN(  60)				while((_g6 < _g7)){
HXLINE(  60)					_g6 = (_g6 + 1);
HXDLIN(  60)					int i1 = (_g6 - 1);
HXDLIN(  60)					{
HXLINE(  60)						 ::Dynamic z = _hx_array_unsafe_get(fs,i1);
HXDLIN(  60)						Float k = (( (Float)(1) ) / ( (Float)(n) ));
HXDLIN(  60)						result->__unsafe_set(i1, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("imag",ca,71,ba,45),(( (Float)(z->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * k))
            							->setFixed(1,HX_("real",5e,4b,a7,4b),(( (Float)(z->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * k))));
            					}
            				}
            			}
HXDLIN(  60)			return result;
            		}
            		else {
HXLINE(  60)			return fs;
            		}
HXDLIN(  60)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FFT_obj,do_fft,return )

void FFT_obj::ditfft2(::Array< ::Dynamic> time,int t,::Array< ::Dynamic> freq,int f,int n,int step,bool inverse){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_70_ditfft2)
HXDLIN(  70)		if ((n == 1)) {
HXLINE(  71)			 ::Dynamic this1 = time->__get(t);
HXDLIN(  71)			freq[f] =  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("imag",ca,71,ba,45), ::Dynamic(this1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)))
            				->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic(this1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic))));
            		}
            		else {
HXLINE(  73)			int halfLen = ::Std_obj::_hx_int((( (Float)(n) ) / ( (Float)(2) )));
HXLINE(  74)			::funkin::vis::dsp::FFT_obj::ditfft2(time,t,freq,f,halfLen,(step * 2),inverse);
HXLINE(  75)			::funkin::vis::dsp::FFT_obj::ditfft2(time,(t + step),freq,(f + halfLen),halfLen,(step * 2),inverse);
HXLINE(  76)			{
HXLINE(  76)				int _g = 0;
HXDLIN(  76)				int _g1 = halfLen;
HXDLIN(  76)				while((_g < _g1)){
HXLINE(  76)					_g = (_g + 1);
HXDLIN(  76)					int k = (_g - 1);
HXLINE(  77)					 ::Dynamic twiddle;
HXDLIN(  77)					if (inverse) {
HXLINE(  77)						twiddle = ::funkin::vis::dsp::FFT_obj::twiddleFactorsInversed->__get(k);
            					}
            					else {
HXLINE(  77)						twiddle = ::funkin::vis::dsp::FFT_obj::twiddleFactors->__get(k);
            					}
HXLINE(  78)					 ::Dynamic this2 = freq->__get((f + k));
HXDLIN(  78)					Float even_real = ( (Float)(this2->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) );
HXDLIN(  78)					Float even_imag = ( (Float)(this2->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) );
HXLINE(  79)					 ::Dynamic this3 = freq->__get(((f + k) + halfLen));
HXDLIN(  79)					Float odd_real = ( (Float)(this3->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) );
HXDLIN(  79)					Float odd_imag = ( (Float)(this3->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) );
HXLINE(  80)					Float rhs_real = ((( (Float)(twiddle->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * odd_real) - (( (Float)(twiddle->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * odd_imag));
HXDLIN(  80)					Float rhs_imag = ((( (Float)(twiddle->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * odd_imag) + (( (Float)(twiddle->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * odd_real));
HXDLIN(  80)					freq[(f + k)] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(even_imag + rhs_imag))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(even_real + rhs_real)));
HXLINE(  81)					Float rhs_real1 = ((( (Float)(twiddle->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * odd_real) - (( (Float)(twiddle->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * odd_imag));
HXDLIN(  81)					Float rhs_imag1 = ((( (Float)(twiddle->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * odd_imag) + (( (Float)(twiddle->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * odd_real));
HXDLIN(  81)					freq[((f + k) + halfLen)] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(even_imag - rhs_imag1))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(even_real - rhs_real1)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FFT_obj,ditfft2,(void))

void FFT_obj::ditfft4(::Array< ::Dynamic> time,int t,::Array< ::Dynamic> freq,int f,int n,int step,bool inverse){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_88_ditfft4)
HXDLIN(  88)		if ((n == 4)) {
HXLINE(  90)			int _g = 0;
HXDLIN(  90)			int _g1 = n;
HXDLIN(  90)			while((_g < _g1)){
HXLINE(  90)				_g = (_g + 1);
HXDLIN(  90)				int k = (_g - 1);
HXLINE(  91)				 ::Dynamic sum = ::funkin::vis::dsp::_hx__Complex::Complex_Impl__obj::zero;
HXLINE(  92)				{
HXLINE(  92)					{
HXLINE(  93)						int w;
HXDLIN(  93)						if (inverse) {
HXLINE(  93)							w = 1;
            						}
            						else {
HXLINE(  93)							w = -1;
            						}
HXDLIN(  93)						Float w1 = (((( (Float)((w * 2)) ) * ::Math_obj::PI) * ( (Float)(k) )) / ( (Float)(n) ));
HXDLIN(  93)						Float twiddle_real = ::Math_obj::cos(w1);
HXDLIN(  93)						Float twiddle_imag = ::Math_obj::sin(w1);
HXLINE(  94)						 ::Dynamic this1 = time->__get((t + (0 * step)));
HXDLIN(  94)						Float rhs_real = ((( (Float)(this1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_real) - (( (Float)(this1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_imag));
HXDLIN(  94)						Float rhs_imag = ((( (Float)(this1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_imag) + (( (Float)(this1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_real));
HXDLIN(  94)						sum =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("imag",ca,71,ba,45), ::Dynamic((sum->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic) + rhs_imag)))
            							->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic((sum->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic) + rhs_real))));
            					}
HXLINE(  92)					{
HXLINE(  93)						int w2;
HXDLIN(  93)						if (inverse) {
HXLINE(  93)							w2 = 1;
            						}
            						else {
HXLINE(  93)							w2 = -1;
            						}
HXDLIN(  93)						Float w3 = (((( (Float)((w2 * 2)) ) * ::Math_obj::PI) * ( (Float)(k) )) / ( (Float)(n) ));
HXDLIN(  93)						Float twiddle_real1 = ::Math_obj::cos(w3);
HXDLIN(  93)						Float twiddle_imag1 = ::Math_obj::sin(w3);
HXLINE(  94)						 ::Dynamic this2 = time->__get((t + step));
HXDLIN(  94)						Float rhs_real1 = ((( (Float)(this2->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_real1) - (( (Float)(this2->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_imag1));
HXDLIN(  94)						Float rhs_imag1 = ((( (Float)(this2->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_imag1) + (( (Float)(this2->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_real1));
HXDLIN(  94)						sum =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("imag",ca,71,ba,45), ::Dynamic((sum->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic) + rhs_imag1)))
            							->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic((sum->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic) + rhs_real1))));
            					}
HXLINE(  92)					{
HXLINE(  93)						int w4;
HXDLIN(  93)						if (inverse) {
HXLINE(  93)							w4 = 1;
            						}
            						else {
HXLINE(  93)							w4 = -1;
            						}
HXDLIN(  93)						Float w5 = (((( (Float)((w4 * 2)) ) * ::Math_obj::PI) * ( (Float)(k) )) / ( (Float)(n) ));
HXDLIN(  93)						Float twiddle_real2 = ::Math_obj::cos(w5);
HXDLIN(  93)						Float twiddle_imag2 = ::Math_obj::sin(w5);
HXLINE(  94)						 ::Dynamic this3 = time->__get((t + (2 * step)));
HXDLIN(  94)						Float rhs_real2 = ((( (Float)(this3->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_real2) - (( (Float)(this3->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_imag2));
HXDLIN(  94)						Float rhs_imag2 = ((( (Float)(this3->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_imag2) + (( (Float)(this3->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_real2));
HXDLIN(  94)						sum =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("imag",ca,71,ba,45), ::Dynamic((sum->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic) + rhs_imag2)))
            							->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic((sum->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic) + rhs_real2))));
            					}
HXLINE(  92)					{
HXLINE(  93)						int w6;
HXDLIN(  93)						if (inverse) {
HXLINE(  93)							w6 = 1;
            						}
            						else {
HXLINE(  93)							w6 = -1;
            						}
HXDLIN(  93)						Float w7 = (((( (Float)((w6 * 2)) ) * ::Math_obj::PI) * ( (Float)(k) )) / ( (Float)(n) ));
HXDLIN(  93)						Float twiddle_real3 = ::Math_obj::cos(w7);
HXDLIN(  93)						Float twiddle_imag3 = ::Math_obj::sin(w7);
HXLINE(  94)						 ::Dynamic this4 = time->__get((t + (3 * step)));
HXDLIN(  94)						Float rhs_real3 = ((( (Float)(this4->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_real3) - (( (Float)(this4->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_imag3));
HXDLIN(  94)						Float rhs_imag3 = ((( (Float)(this4->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * twiddle_imag3) + (( (Float)(this4->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * twiddle_real3));
HXDLIN(  94)						sum =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("imag",ca,71,ba,45), ::Dynamic((sum->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic) + rhs_imag3)))
            							->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic((sum->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic) + rhs_real3))));
            					}
            				}
HXLINE(  96)				freq[(f + k)] = sum;
            			}
            		}
            		else {
HXLINE(  99)			int quarterLen = ::Std_obj::_hx_int((( (Float)(n) ) / ( (Float)(4) )));
HXLINE( 100)			::funkin::vis::dsp::FFT_obj::ditfft4(time,t,freq,f,quarterLen,(step * 4),inverse);
HXLINE( 101)			::funkin::vis::dsp::FFT_obj::ditfft4(time,(t + step),freq,(f + quarterLen),quarterLen,(step * 4),inverse);
HXLINE( 102)			::funkin::vis::dsp::FFT_obj::ditfft4(time,(t + (2 * step)),freq,(f + (2 * quarterLen)),quarterLen,(step * 4),inverse);
HXLINE( 103)			::funkin::vis::dsp::FFT_obj::ditfft4(time,(t + (3 * step)),freq,(f + (3 * quarterLen)),quarterLen,(step * 4),inverse);
HXLINE( 105)			{
HXLINE( 105)				int _g2 = 0;
HXDLIN( 105)				int _g3 = quarterLen;
HXDLIN( 105)				while((_g2 < _g3)){
HXLINE( 105)					_g2 = (_g2 + 1);
HXDLIN( 105)					int k1 = (_g2 - 1);
HXLINE( 106)					int w8;
HXDLIN( 106)					if (inverse) {
HXLINE( 106)						w8 = 1;
            					}
            					else {
HXLINE( 106)						w8 = -1;
            					}
HXDLIN( 106)					Float w9 = (((( (Float)((w8 * 2)) ) * ::Math_obj::PI) * ( (Float)(k1) )) / ( (Float)(n) ));
HXDLIN( 106)					Float twiddle0_real = ::Math_obj::cos(w9);
HXDLIN( 106)					Float twiddle0_imag = ::Math_obj::sin(w9);
HXLINE( 107)					int w10;
HXDLIN( 107)					if (inverse) {
HXLINE( 107)						w10 = 1;
            					}
            					else {
HXLINE( 107)						w10 = -1;
            					}
HXDLIN( 107)					Float w11 = (((( (Float)((w10 * 2)) ) * ::Math_obj::PI) * ( (Float)(k1) )) / ( (Float)(n) ));
HXDLIN( 107)					Float twiddle1_real = ::Math_obj::cos(w11);
HXDLIN( 107)					Float twiddle1_imag = ::Math_obj::sin(w11);
HXLINE( 108)					int w12;
HXDLIN( 108)					if (inverse) {
HXLINE( 108)						w12 = 1;
            					}
            					else {
HXLINE( 108)						w12 = -1;
            					}
HXDLIN( 108)					Float w13 = ((((( (Float)((w12 * 2)) ) * ::Math_obj::PI) * ( (Float)(k1) )) * ( (Float)(2) )) / ( (Float)(n) ));
HXDLIN( 108)					Float twiddle2_real = ::Math_obj::cos(w13);
HXDLIN( 108)					Float twiddle2_imag = ::Math_obj::sin(w13);
HXLINE( 109)					int w14;
HXDLIN( 109)					if (inverse) {
HXLINE( 109)						w14 = 1;
            					}
            					else {
HXLINE( 109)						w14 = -1;
            					}
HXDLIN( 109)					Float w15 = ((((( (Float)((w14 * 2)) ) * ::Math_obj::PI) * ( (Float)(k1) )) * ( (Float)(3) )) / ( (Float)(n) ));
HXDLIN( 109)					Float twiddle3_real = ::Math_obj::cos(w15);
HXDLIN( 109)					Float twiddle3_imag = ::Math_obj::sin(w15);
HXLINE( 111)					 ::Dynamic this5 = freq->__get((f + k1));
HXDLIN( 111)					Float f0_real = ( (Float)(this5->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) );
HXDLIN( 111)					Float f0_imag = ( (Float)(this5->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) );
HXLINE( 112)					 ::Dynamic this6 = freq->__get(((f + k1) + quarterLen));
HXDLIN( 112)					Float this_real = ( (Float)(this6->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) );
HXDLIN( 112)					Float this_imag = ( (Float)(this6->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) );
HXDLIN( 112)					Float f1_real = ((this_real * twiddle1_real) - (this_imag * twiddle1_imag));
HXDLIN( 112)					Float f1_imag = ((this_real * twiddle1_imag) + (this_imag * twiddle1_real));
HXLINE( 113)					 ::Dynamic this7 = freq->__get(((f + k1) + (2 * quarterLen)));
HXDLIN( 113)					Float this_real1 = ( (Float)(this7->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) );
HXDLIN( 113)					Float this_imag1 = ( (Float)(this7->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) );
HXDLIN( 113)					Float f2_real = ((this_real1 * twiddle2_real) - (this_imag1 * twiddle2_imag));
HXDLIN( 113)					Float f2_imag = ((this_real1 * twiddle2_imag) + (this_imag1 * twiddle2_real));
HXLINE( 114)					 ::Dynamic this8 = freq->__get(((f + k1) + (3 * quarterLen)));
HXDLIN( 114)					Float this_real2 = ( (Float)(this8->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) );
HXDLIN( 114)					Float this_imag2 = ( (Float)(this8->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) );
HXDLIN( 114)					Float f3_real = ((this_real2 * twiddle3_real) - (this_imag2 * twiddle3_imag));
HXDLIN( 114)					Float f3_imag = ((this_real2 * twiddle3_imag) + (this_imag2 * twiddle3_real));
HXLINE( 116)					Float this_real3 = (f0_real + f1_real);
HXDLIN( 116)					Float this_imag3 = (f0_imag + f1_imag);
HXDLIN( 116)					Float this_real4 = (this_real3 + f2_real);
HXDLIN( 116)					Float this_imag4 = (this_imag3 + f2_imag);
HXDLIN( 116)					freq[(f + k1)] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(this_imag4 + f3_imag))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(this_real4 + f3_real)));
HXLINE( 117)					Float this_real5 = (f0_real + f1_real);
HXDLIN( 117)					Float this_imag5 = (f0_imag + f1_imag);
HXDLIN( 117)					Float this_real6 = (this_real5 - f2_real);
HXDLIN( 117)					Float this_imag6 = (this_imag5 - f2_imag);
HXDLIN( 117)					freq[((f + k1) + quarterLen)] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(this_imag6 - f3_imag))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(this_real6 - f3_real)));
HXLINE( 118)					Float this_real7 = (f0_real - f1_real);
HXDLIN( 118)					Float this_imag7 = (f0_imag - f1_imag);
HXDLIN( 118)					Float this_real8 = (this_real7 - f2_real);
HXDLIN( 118)					Float this_imag8 = (this_imag7 - f2_imag);
HXDLIN( 118)					freq[((f + k1) + (2 * quarterLen))] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(this_imag8 + f3_imag))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(this_real8 + f3_real)));
HXLINE( 119)					Float this_real9 = (f0_real - f1_real);
HXDLIN( 119)					Float this_imag9 = (f0_imag - f1_imag);
HXDLIN( 119)					Float this_real10 = (this_real9 + f2_real);
HXDLIN( 119)					Float this_imag10 = (this_imag9 + f2_imag);
HXDLIN( 119)					freq[((f + k1) + (3 * quarterLen))] =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(this_imag10 - f3_imag))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(this_real10 - f3_real)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(FFT_obj,ditfft4,(void))

::Array< ::Dynamic> FFT_obj::dft(::Array< ::Dynamic> ts, ::Dynamic inverse){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_125_dft)
HXLINE( 126)		if (::hx::IsNull( inverse )) {
HXLINE( 126)			inverse = false;
            		}
HXLINE( 127)		int n = ts->length;
HXLINE( 128)		::Array< ::Dynamic> fs = ::Array_obj< ::Dynamic>::__new();
HXLINE( 129)		fs->resize(n);
HXLINE( 130)		{
HXLINE( 130)			int _g = 0;
HXDLIN( 130)			int _g1 = n;
HXDLIN( 130)			while((_g < _g1)){
HXLINE( 130)				_g = (_g + 1);
HXDLIN( 130)				int f = (_g - 1);
HXLINE( 131)				 ::Dynamic sum = ::funkin::vis::dsp::_hx__Complex::Complex_Impl__obj::zero;
HXLINE( 132)				{
HXLINE( 132)					int _g2 = 0;
HXDLIN( 132)					int _g3 = n;
HXDLIN( 132)					while((_g2 < _g3)){
HXLINE( 132)						_g2 = (_g2 + 1);
HXDLIN( 132)						int t = (_g2 - 1);
HXLINE( 133)						 ::Dynamic this1 = ts->__get(t);
HXDLIN( 133)						int w;
HXDLIN( 133)						if (( (bool)(inverse) )) {
HXLINE( 133)							w = 1;
            						}
            						else {
HXLINE( 133)							w = -1;
            						}
HXDLIN( 133)						Float w1 = ((((( (Float)((w * 2)) ) * ::Math_obj::PI) * ( (Float)(f) )) * ( (Float)(t) )) / ( (Float)(n) ));
HXDLIN( 133)						Float rhs_real = ::Math_obj::cos(w1);
HXDLIN( 133)						Float rhs_imag = ::Math_obj::sin(w1);
HXDLIN( 133)						Float rhs_real1 = ((( (Float)(this1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * rhs_real) - (( (Float)(this1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * rhs_imag));
HXDLIN( 133)						Float rhs_imag1 = ((( (Float)(this1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * rhs_imag) + (( (Float)(this1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * rhs_real));
HXDLIN( 133)						sum =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("imag",ca,71,ba,45), ::Dynamic((sum->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic) + rhs_imag1)))
            							->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic((sum->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic) + rhs_real1))));
            					}
            				}
HXLINE( 135)				 ::Dynamic _hx_tmp;
HXDLIN( 135)				if (( (bool)(inverse) )) {
HXLINE( 135)					Float k = (( (Float)(1) ) / ( (Float)(n) ));
HXDLIN( 135)					_hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(( (Float)(sum->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * k))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(( (Float)(sum->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * k)));
            				}
            				else {
HXLINE( 135)					_hx_tmp = sum;
            				}
HXDLIN( 135)				fs[f] = _hx_tmp;
            			}
            		}
HXLINE( 137)		return fs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FFT_obj,dft,return )

::Array< ::Dynamic> FFT_obj::twiddleFactorsInversed;

::Array< ::Dynamic> FFT_obj::twiddleFactors;

void FFT_obj::precomputeTwiddleFactors(int maxN,bool inverse){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_145_precomputeTwiddleFactors)
HXLINE( 146)		int n = maxN;
HXLINE( 147)		int base_len = maxN;
HXLINE( 148)		int len = (base_len * 4);
HXLINE( 149)		::Array< ::Dynamic> twiddles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 157)		{
HXLINE( 157)			int _g = 0;
HXDLIN( 157)			int _g1 = ::Std_obj::_hx_int((( (Float)(n) ) / ( (Float)(2) )));
HXDLIN( 157)			while((_g < _g1)){
HXLINE( 157)				_g = (_g + 1);
HXDLIN( 157)				int k = (_g - 1);
HXLINE( 158)				 ::Dynamic twiddle = ::funkin::vis::dsp::FFT_obj::computeTwiddle(k,n,inverse);
HXLINE( 159)				twiddles->push(twiddle);
            			}
            		}
HXLINE( 162)		if (inverse) {
HXLINE( 163)			::funkin::vis::dsp::FFT_obj::twiddleFactorsInversed = twiddles;
            		}
            		else {
HXLINE( 165)			::funkin::vis::dsp::FFT_obj::twiddleFactors = twiddles;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FFT_obj,precomputeTwiddleFactors,(void))

 ::Dynamic FFT_obj::computeTwiddle(int index,int fft_len,::hx::Null< bool >  __o_inverse){
            		bool inverse = __o_inverse.Default(false);
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_169_computeTwiddle)
HXLINE( 170)		Float constant = ((( (Float)(-2) ) * ::Math_obj::PI) / ( (Float)(fft_len) ));
HXLINE( 171)		Float angle = (constant * ( (Float)(index) ));
HXLINE( 173)		 ::Dynamic result =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("imag",ca,71,ba,45),::Math_obj::sin(angle))
            			->setFixed(1,HX_("real",5e,4b,a7,4b),::Math_obj::cos(angle)));
HXLINE( 175)		if (inverse) {
HXLINE( 176)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("imag",ca,71,ba,45),-(( (Float)(result->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) )))
            				->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic(result->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic))));
            		}
            		else {
HXLINE( 178)			return result;
            		}
HXLINE( 175)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FFT_obj,computeTwiddle,return )

 ::Dynamic FFT_obj::useTwiddleFactor(int n,int k,::hx::Null< bool >  __o_inverse){
            		bool inverse = __o_inverse.Default(false);
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_181_useTwiddleFactor)
HXLINE( 184)		::Array< ::Dynamic> twiddlesToUse;
HXDLIN( 184)		if (inverse) {
HXLINE( 184)			twiddlesToUse = ::funkin::vis::dsp::FFT_obj::twiddleFactorsInversed;
            		}
            		else {
HXLINE( 184)			twiddlesToUse = ::funkin::vis::dsp::FFT_obj::twiddleFactors;
            		}
HXLINE( 185)		return twiddlesToUse->__get(k);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FFT_obj,useTwiddleFactor,return )

int FFT_obj::nextPow2(int x){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_191_nextPow2)
HXLINE( 192)		if ((x < 2)) {
HXLINE( 192)			return 1;
            		}
            		else {
HXLINE( 193)			if (((x & (x - 1)) == 0)) {
HXLINE( 193)				return x;
            			}
            		}
HXLINE( 194)		int pow = 2;
HXLINE( 195)		x = (x - 1);
HXLINE( 196)		while(true){
HXLINE( 196)			x = (x >> 1);
HXDLIN( 196)			if (!((x != 0))) {
HXLINE( 196)				goto _hx_goto_20;
            			}
HXDLIN( 196)			pow = (pow << 1);
            		}
            		_hx_goto_20:;
HXLINE( 197)		return pow;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FFT_obj,nextPow2,return )

void FFT_obj::main(){
            	HX_STACKFRAME(&_hx_pos_5aa59441b2036984_201_main)
HXLINE( 203)		Float Fs = ((Float)44100.0);
HXLINE( 204)		int N = 512;
HXLINE( 205)		int halfN = ::Std_obj::_hx_int((( (Float)(N) ) / ( (Float)(2) )));
HXLINE( 208)		::Array< Float > freqs = ::Array_obj< Float >::fromData( _hx_array_data_ceceb7dc_37,1);
HXLINE( 209)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 209)		{
HXLINE( 209)			int _g1 = 0;
HXDLIN( 209)			int _g2 = N;
HXDLIN( 209)			while((_g1 < _g2)){
HXLINE( 209)				_g1 = (_g1 + 1);
HXDLIN( 209)				int n = (_g1 - 1);
HXDLIN( 209)				::Array< Float > result = ::Array_obj< Float >::__new(freqs->length);
HXDLIN( 209)				{
HXLINE( 209)					int _g3 = 0;
HXDLIN( 209)					int _g4 = freqs->length;
HXDLIN( 209)					while((_g3 < _g4)){
HXLINE( 209)						_g3 = (_g3 + 1);
HXDLIN( 209)						int i = (_g3 - 1);
HXDLIN( 209)						{
HXLINE( 209)							Float f = ( (Float)(_hx_array_unsafe_get(freqs,i)) );
HXDLIN( 209)							result->__unsafe_set(i,::Math_obj::sin(((((( (Float)(2) ) * ::Math_obj::PI) * f) * ( (Float)(n) )) / Fs)));
            						}
            					}
            				}
HXDLIN( 209)				_g->push(::funkin::vis::dsp::Signal_obj::sum(result));
            			}
            		}
HXDLIN( 209)		::Array< Float > ts = _g;
HXLINE( 212)		::Array< ::Dynamic> fs_pos = ::funkin::vis::dsp::FFT_obj::rfft(ts);
HXLINE( 214)		::Array< ::Dynamic> _g5 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 214)		{
HXLINE( 214)			int _g6 = -((halfN - 1));
HXDLIN( 214)			int _g7 = 0;
HXDLIN( 214)			while((_g6 < _g7)){
HXLINE( 214)				_g6 = (_g6 + 1);
HXDLIN( 214)				int k = (_g6 - 1);
HXDLIN( 214)				 ::Dynamic this1 = fs_pos->__get(-(k));
HXDLIN( 214)				_g5->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("imag",ca,71,ba,45),-(( (Float)(this1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) )))
            					->setFixed(1,HX_("real",5e,4b,a7,4b), ::Dynamic(this1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)))));
            			}
            		}
HXLINE( 213)		::Array< ::Dynamic> fs_fft_array = _g5->concat(fs_pos);
HXDLIN( 213)		int fs_fft_offset = -((halfN - 1));
HXLINE( 220)		 ::Dynamic f1 = ::funkin::vis::dsp::_hx__Complex::Complex_Impl__obj::fromReal_dyn();
HXDLIN( 220)		::Array< ::Dynamic> result1 = ::Array_obj< ::Dynamic>::__new(ts->length);
HXDLIN( 220)		{
HXLINE( 220)			int _g8 = 0;
HXDLIN( 220)			int _g9 = ts->length;
HXDLIN( 220)			while((_g8 < _g9)){
HXLINE( 220)				_g8 = (_g8 + 1);
HXDLIN( 220)				int i1 = (_g8 - 1);
HXDLIN( 220)				{
HXLINE( 220)					 ::Dynamic inValue = f1(_hx_array_unsafe_get(ts,i1));
HXDLIN( 220)					result1->__unsafe_set(i1,inValue);
            				}
            			}
            		}
HXLINE( 219)		::Array< ::Dynamic> fs_dft_array = ::funkin::vis::dsp::_OffsetArray::OffsetArray_Impl__obj::circShift(::funkin::vis::dsp::FFT_obj::dft(result1,null()),(halfN - 1));
HXDLIN( 219)		int fs_dft_offset = -((halfN - 1));
HXLINE( 223)		::Array< ::Dynamic> _g10 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 223)		{
HXLINE( 223)			int _g11 = -((halfN - 1));
HXDLIN( 223)			int _g12 = halfN;
HXDLIN( 223)			while((_g11 < _g12)){
HXLINE( 223)				_g11 = (_g11 + 1);
HXDLIN( 223)				int k1 = (_g11 - 1);
HXDLIN( 223)				 ::Dynamic this2 = fs_fft_array->__get((k1 - fs_fft_offset));
HXDLIN( 223)				 ::Dynamic rhs = fs_dft_array->__get((k1 - fs_dft_offset));
HXDLIN( 223)				_g10->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("imag",ca,71,ba,45),(( (Float)(this2->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) - ( (Float)(rhs->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) )))
            					->setFixed(1,HX_("real",5e,4b,a7,4b),(( (Float)(this2->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) - ( (Float)(rhs->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) )))));
            			}
            		}
HXDLIN( 223)		::Array< ::Dynamic> fs_err = _g10;
HXLINE( 224)		::Array< Float > result2 = ::Array_obj< Float >::__new(fs_err->length);
HXDLIN( 224)		{
HXLINE( 224)			int _g13 = 0;
HXDLIN( 224)			int _g14 = fs_err->length;
HXDLIN( 224)			while((_g13 < _g14)){
HXLINE( 224)				_g13 = (_g13 + 1);
HXDLIN( 224)				int i2 = (_g13 - 1);
HXDLIN( 224)				{
HXLINE( 224)					 ::Dynamic z = _hx_array_unsafe_get(fs_err,i2);
HXDLIN( 224)					result2->__unsafe_set(i2,::Math_obj::sqrt(((( (Float)(z->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * ( (Float)(z->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) )) + (( (Float)(z->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * ( (Float)(z->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) )))));
            				}
            			}
            		}
HXDLIN( 224)		Float max_fs_err = ::funkin::vis::dsp::Signal_obj::max(result2);
HXLINE( 225)		if ((max_fs_err > ((Float)1e-6))) {
HXLINE( 225)			::haxe::Log_obj::trace((HX_("FT Error: ",7c,27,3d,a9) + max_fs_err),null());
            		}
HXLINE( 228)		::Array< ::Dynamic> _this = fs_fft_array;
HXDLIN( 228)		::Array< Float > result3 = ::Array_obj< Float >::__new(_this->length);
HXDLIN( 228)		{
HXLINE( 228)			int _g15 = 0;
HXDLIN( 228)			int _g16 = _this->length;
HXDLIN( 228)			while((_g15 < _g16)){
HXLINE( 228)				_g15 = (_g15 + 1);
HXDLIN( 228)				int i3 = (_g15 - 1);
HXDLIN( 228)				{
HXLINE( 228)					 ::Dynamic z1 = _hx_array_unsafe_get(_this,i3);
HXDLIN( 228)					result3->__unsafe_set(i3,::Math_obj::sqrt(((( (Float)(z1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * ( (Float)(z1->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) )) + (( (Float)(z1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * ( (Float)(z1->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) )))));
            				}
            			}
            		}
HXDLIN( 228)		::Array< int > _this1 = ::funkin::vis::dsp::Signal_obj::findPeaks(result3,null(),null());
HXDLIN( 228)		::Array< Float > result4 = ::Array_obj< Float >::__new(_this1->length);
HXDLIN( 228)		{
HXLINE( 228)			int _g17 = 0;
HXDLIN( 228)			int _g18 = _this1->length;
HXDLIN( 228)			while((_g17 < _g18)){
HXLINE( 228)				_g17 = (_g17 + 1);
HXDLIN( 228)				int i4 = (_g17 - 1);
HXDLIN( 228)				{
HXLINE( 228)					Float inValue1 = ((( (Float)((( (int)(_hx_array_unsafe_get(_this1,i4)) ) - (halfN - 1))) ) * Fs) / ( (Float)(N) ));
HXDLIN( 228)					result4->__unsafe_set(i4,inValue1);
            				}
            			}
            		}
HXDLIN( 228)		::Array< Float > _g19 = ::Array_obj< Float >::__new(0);
HXDLIN( 228)		{
HXLINE( 228)			int _g20 = 0;
HXDLIN( 228)			::Array< Float > _g21 = result4;
HXDLIN( 228)			while((_g20 < _g21->length)){
HXLINE( 228)				Float v = _g21->__get(_g20);
HXDLIN( 228)				_g20 = (_g20 + 1);
HXDLIN( 228)				if ((v >= 0)) {
HXLINE( 228)					_g19->push(v);
            				}
            			}
            		}
HXDLIN( 228)		::Array< Float > freqis = _g19;
HXLINE( 232)		if ((freqis->length != freqs->length)) {
HXLINE( 233)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 233)			::String _hx_tmp1 = (HX_("Found frequencies: ",a2,50,84,42) + ::Std_obj::string(freqis));
HXDLIN( 233)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("funkin/vis/dsp/FFT.hx",25,5e,fb,ac),233,HX_("funkin.vis.dsp.FFT",dc,b7,ce,ce),HX_("main",39,38,56,48)));
            		}
            		else {
HXLINE( 235)			::Array< Float > _g22 = ::Array_obj< Float >::__new(0);
HXDLIN( 235)			{
HXLINE( 235)				int _g23 = 0;
HXDLIN( 235)				int _g24 = freqs->length;
HXDLIN( 235)				while((_g23 < _g24)){
HXLINE( 235)					_g23 = (_g23 + 1);
HXDLIN( 235)					int i5 = (_g23 - 1);
HXDLIN( 235)					_g22->push((freqis->__get(i5) - freqs->__get(i5)));
            				}
            			}
HXDLIN( 235)			::Array< Float > freqs_err = _g22;
HXLINE( 236)			 ::Dynamic f2 = ::Math_obj::abs_dyn();
HXDLIN( 236)			::Array< Float > result5 = ::Array_obj< Float >::__new(freqs_err->length);
HXDLIN( 236)			{
HXLINE( 236)				int _g25 = 0;
HXDLIN( 236)				int _g26 = freqs_err->length;
HXDLIN( 236)				while((_g25 < _g26)){
HXLINE( 236)					_g25 = (_g25 + 1);
HXDLIN( 236)					int i6 = (_g25 - 1);
HXDLIN( 236)					{
HXLINE( 236)						Float inValue2 = ( (Float)(f2(_hx_array_unsafe_get(freqs_err,i6))) );
HXDLIN( 236)						result5->__unsafe_set(i6,inValue2);
            					}
            				}
            			}
HXDLIN( 236)			Float max_freqs_err = ::funkin::vis::dsp::Signal_obj::max(result5);
HXLINE( 237)			if ((max_freqs_err > (Fs / ( (Float)(N) )))) {
HXLINE( 237)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 237)				::String _hx_tmp3 = (HX_("Frequency Errors: ",55,81,c8,3f) + ::Std_obj::string(freqs_err));
HXDLIN( 237)				_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("funkin/vis/dsp/FFT.hx",25,5e,fb,ac),237,HX_("funkin.vis.dsp.FFT",dc,b7,ce,ce),HX_("main",39,38,56,48)));
            			}
            		}
HXLINE( 241)		::Array< ::Dynamic> _this2 = ::funkin::vis::dsp::_OffsetArray::OffsetArray_Impl__obj::circShift(fs_fft_array,-((halfN - 1)));
HXDLIN( 241)		::Array< ::Dynamic> result6 = ::Array_obj< ::Dynamic>::__new(_this2->length);
HXDLIN( 241)		{
HXLINE( 241)			int _g27 = 0;
HXDLIN( 241)			int _g28 = _this2->length;
HXDLIN( 241)			while((_g27 < _g28)){
HXLINE( 241)				_g27 = (_g27 + 1);
HXDLIN( 241)				int i7 = (_g27 - 1);
HXDLIN( 241)				{
HXLINE( 241)					 ::Dynamic z2 = _hx_array_unsafe_get(_this2,i7);
HXDLIN( 241)					Float k2 = (( (Float)(1) ) / Fs);
HXDLIN( 241)					result6->__unsafe_set(i7, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("imag",ca,71,ba,45),(( (Float)(z2->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * k2))
            						->setFixed(1,HX_("real",5e,4b,a7,4b),(( (Float)(z2->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * k2))));
            				}
            			}
            		}
HXDLIN( 241)		::Array< ::Dynamic> ts_ifft = ::funkin::vis::dsp::FFT_obj::ifft(result6);
HXLINE( 242)		::Array< Float > _g29 = ::Array_obj< Float >::__new(0);
HXDLIN( 242)		{
HXLINE( 242)			int _g30 = 0;
HXDLIN( 242)			int _g31 = N;
HXDLIN( 242)			while((_g30 < _g31)){
HXLINE( 242)				_g30 = (_g30 + 1);
HXDLIN( 242)				int n1 = (_g30 - 1);
HXDLIN( 242)				 ::Dynamic this3 = ts_ifft->__get(n1);
HXDLIN( 242)				Float this_real = (( (Float)(this3->__Field(HX_("real",5e,4b,a7,4b),::hx::paccDynamic)) ) * Fs);
HXDLIN( 242)				Float this_imag = (( (Float)(this3->__Field(HX_("imag",ca,71,ba,45),::hx::paccDynamic)) ) * Fs);
HXDLIN( 242)				_g29->push((this_real - ts->__get(n1)));
            			}
            		}
HXDLIN( 242)		::Array< Float > ts_err = _g29;
HXLINE( 243)		 ::Dynamic f3 = ::Math_obj::abs_dyn();
HXDLIN( 243)		::Array< Float > result7 = ::Array_obj< Float >::__new(ts_err->length);
HXDLIN( 243)		{
HXLINE( 243)			int _g32 = 0;
HXDLIN( 243)			int _g33 = ts_err->length;
HXDLIN( 243)			while((_g32 < _g33)){
HXLINE( 243)				_g32 = (_g32 + 1);
HXDLIN( 243)				int i8 = (_g32 - 1);
HXDLIN( 243)				{
HXLINE( 243)					Float inValue3 = ( (Float)(f3(_hx_array_unsafe_get(ts_err,i8))) );
HXDLIN( 243)					result7->__unsafe_set(i8,inValue3);
            				}
            			}
            		}
HXDLIN( 243)		Float max_ts_err = ::funkin::vis::dsp::Signal_obj::max(result7);
HXLINE( 244)		if ((max_ts_err > ((Float)1e-6))) {
HXLINE( 244)			::haxe::Log_obj::trace((HX_("IFT Error: ",05,bd,a9,68) + max_ts_err),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FFT_obj,main,(void))


FFT_obj::FFT_obj()
{
}

bool FFT_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fft") ) { outValue = fft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dft") ) { outValue = dft_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rfft") ) { outValue = rfft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ifft") ) { outValue = ifft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"do_fft") ) { outValue = do_fft_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ditfft2") ) { outValue = ditfft2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ditfft4") ) { outValue = ditfft4_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextPow2") ) { outValue = nextPow2_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"twiddleFactors") ) { outValue = ( twiddleFactors ); return true; }
		if (HX_FIELD_EQ(inName,"computeTwiddle") ) { outValue = computeTwiddle_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"useTwiddleFactor") ) { outValue = useTwiddleFactor_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"twiddleFactorsInversed") ) { outValue = ( twiddleFactorsInversed ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"precomputeTwiddleFactors") ) { outValue = precomputeTwiddleFactors_dyn(); return true; }
	}
	return false;
}

bool FFT_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"twiddleFactors") ) { twiddleFactors=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"twiddleFactorsInversed") ) { twiddleFactorsInversed=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FFT_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FFT_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FFT_obj::twiddleFactorsInversed,HX_("twiddleFactorsInversed",d9,1b,07,5e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FFT_obj::twiddleFactors,HX_("twiddleFactors",05,64,69,12)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FFT_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FFT_obj::twiddleFactorsInversed,"twiddleFactorsInversed");
	HX_MARK_MEMBER_NAME(FFT_obj::twiddleFactors,"twiddleFactors");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FFT_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FFT_obj::twiddleFactorsInversed,"twiddleFactorsInversed");
	HX_VISIT_MEMBER_NAME(FFT_obj::twiddleFactors,"twiddleFactors");
};

#endif

::hx::Class FFT_obj::__mClass;

static ::String FFT_obj_sStaticFields[] = {
	HX_("fft",34,bf,4d,00),
	HX_("rfft",02,12,a8,4b),
	HX_("ifft",6b,26,b5,45),
	HX_("do_fft",40,7d,43,24),
	HX_("ditfft2",4d,1f,10,48),
	HX_("ditfft4",4f,1f,10,48),
	HX_("dft",b2,3a,4c,00),
	HX_("twiddleFactorsInversed",d9,1b,07,5e),
	HX_("twiddleFactors",05,64,69,12),
	HX_("precomputeTwiddleFactors",d9,8c,9f,d0),
	HX_("computeTwiddle",c8,0b,9d,e0),
	HX_("useTwiddleFactor",e7,77,12,38),
	HX_("nextPow2",2d,2e,29,f6),
	HX_("main",39,38,56,48),
	::String(null())
};

void FFT_obj::__register()
{
	FFT_obj _hx_dummy;
	FFT_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.dsp.FFT",dc,b7,ce,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FFT_obj::__GetStatic;
	__mClass->mSetStaticField = &FFT_obj::__SetStatic;
	__mClass->mMarkFunc = FFT_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FFT_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FFT_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FFT_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FFT_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FFT_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
} // end namespace dsp
