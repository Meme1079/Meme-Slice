// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_funkin_vis_dsp_RecentPeakFinder
#include <funkin/vis/dsp/RecentPeakFinder.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_Signal
#include <funkin/vis/dsp/Signal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d37fc47ec07dc2f_3_new,"funkin.vis.dsp.RecentPeakFinder","new",0x58a52c2a,"funkin.vis.dsp.RecentPeakFinder.new","funkin/vis/dsp/RecentPeakFinder.hx",3,0x1bff66e3)
HX_LOCAL_STACK_FRAME(_hx_pos_5d37fc47ec07dc2f_15_push,"funkin.vis.dsp.RecentPeakFinder","push",0x394006d0,"funkin.vis.dsp.RecentPeakFinder.push","funkin/vis/dsp/RecentPeakFinder.hx",15,0x1bff66e3)
HX_LOCAL_STACK_FRAME(_hx_pos_5d37fc47ec07dc2f_24_get_lastValue,"funkin.vis.dsp.RecentPeakFinder","get_lastValue",0x46fb3d5c,"funkin.vis.dsp.RecentPeakFinder.get_lastValue","funkin/vis/dsp/RecentPeakFinder.hx",24,0x1bff66e3)
namespace funkin{
namespace vis{
namespace dsp{

void RecentPeakFinder_obj::__construct(::hx::Null< int >  __o_length){
            		int length = __o_length.Default(30);
            	HX_STACKFRAME(&_hx_pos_5d37fc47ec07dc2f_3_new)
HXLINE(   7)		this->peak = ((Float)0);
HXLINE(   6)		this->bufferIndex = 0;
HXLINE(  11)		this->buffer = ::Array_obj< Float >::__new();
HXLINE(  12)		this->buffer->resize(length);
            	}

Dynamic RecentPeakFinder_obj::__CreateEmpty() { return new RecentPeakFinder_obj; }

void *RecentPeakFinder_obj::_hx_vtable = 0;

Dynamic RecentPeakFinder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RecentPeakFinder_obj > _hx_result = new RecentPeakFinder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RecentPeakFinder_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3b8ff092;
}

void RecentPeakFinder_obj::push(Float value){
            	HX_STACKFRAME(&_hx_pos_5d37fc47ec07dc2f_15_push)
HXLINE(  16)		this->buffer[this->bufferIndex] = value;
HXLINE(  17)		if ((value > this->peak)) {
HXLINE(  17)			this->peak = value;
            		}
            		else {
HXLINE(  18)			this->peak = ::funkin::vis::dsp::Signal_obj::max(this->buffer);
            		}
HXLINE(  19)		int _hx_tmp;
HXDLIN(  19)		if (((this->bufferIndex + 1) == this->buffer->length)) {
HXLINE(  19)			_hx_tmp = 0;
            		}
            		else {
HXLINE(  19)			_hx_tmp = (this->bufferIndex + 1);
            		}
HXDLIN(  19)		this->bufferIndex = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RecentPeakFinder_obj,push,(void))

Float RecentPeakFinder_obj::get_lastValue(){
            	HX_STACKFRAME(&_hx_pos_5d37fc47ec07dc2f_24_get_lastValue)
HXDLIN(  24)		if ((this->bufferIndex == 0)) {
HXDLIN(  24)			return this->buffer->__get((this->buffer->length - 1));
            		}
            		else {
HXLINE(  25)			return this->buffer->__get((this->bufferIndex - 1));
            		}
HXLINE(  24)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RecentPeakFinder_obj,get_lastValue,return )


::hx::ObjectPtr< RecentPeakFinder_obj > RecentPeakFinder_obj::__new(::hx::Null< int >  __o_length) {
	::hx::ObjectPtr< RecentPeakFinder_obj > __this = new RecentPeakFinder_obj();
	__this->__construct(__o_length);
	return __this;
}

::hx::ObjectPtr< RecentPeakFinder_obj > RecentPeakFinder_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_length) {
	RecentPeakFinder_obj *__this = (RecentPeakFinder_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RecentPeakFinder_obj), true, "funkin.vis.dsp.RecentPeakFinder"));
	*(void **)__this = RecentPeakFinder_obj::_hx_vtable;
	__this->__construct(__o_length);
	return __this;
}

RecentPeakFinder_obj::RecentPeakFinder_obj()
{
}

void RecentPeakFinder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RecentPeakFinder);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(peak,"peak");
	HX_MARK_END_CLASS();
}

void RecentPeakFinder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(peak,"peak");
}

::hx::Val RecentPeakFinder_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"peak") ) { return ::hx::Val( peak ); }
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastValue") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_lastValue() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { return ::hx::Val( bufferIndex ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_lastValue") ) { return ::hx::Val( get_lastValue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RecentPeakFinder_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"peak") ) { peak=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RecentPeakFinder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buffer",00,bd,94,d0));
	outFields->push(HX_("bufferIndex",f2,2d,60,5b));
	outFields->push(HX_("peak",1f,de,54,4a));
	outFields->push(HX_("lastValue",3b,ad,65,7e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RecentPeakFinder_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(RecentPeakFinder_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{::hx::fsInt,(int)offsetof(RecentPeakFinder_obj,bufferIndex),HX_("bufferIndex",f2,2d,60,5b)},
	{::hx::fsFloat,(int)offsetof(RecentPeakFinder_obj,peak),HX_("peak",1f,de,54,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RecentPeakFinder_obj_sStaticStorageInfo = 0;
#endif

static ::String RecentPeakFinder_obj_sMemberFields[] = {
	HX_("buffer",00,bd,94,d0),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("peak",1f,de,54,4a),
	HX_("push",da,11,61,4a),
	HX_("get_lastValue",12,81,c9,3f),
	::String(null()) };

::hx::Class RecentPeakFinder_obj::__mClass;

void RecentPeakFinder_obj::__register()
{
	RecentPeakFinder_obj _hx_dummy;
	RecentPeakFinder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.dsp.RecentPeakFinder",38,8f,05,c8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RecentPeakFinder_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RecentPeakFinder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RecentPeakFinder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RecentPeakFinder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
} // end namespace dsp
