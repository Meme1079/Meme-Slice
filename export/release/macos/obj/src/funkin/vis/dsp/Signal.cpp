// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_funkin_vis_dsp_Signal
#include <funkin/vis/dsp/Signal.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_14_smooth,"funkin.vis.dsp.Signal","smooth",0xa198c41c,"funkin.vis.dsp.Signal.smooth","funkin/vis/dsp/Signal.hx",14,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_39_findPeaks,"funkin.vis.dsp.Signal","findPeaks",0x270e9b4d,"funkin.vis.dsp.Signal.findPeaks","funkin/vis/dsp/Signal.hx",39,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_64_sum,"funkin.vis.dsp.Signal","sum",0xcc454cdd,"funkin.vis.dsp.Signal.sum","funkin/vis/dsp/Signal.hx",64,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_85_mean,"funkin.vis.dsp.Signal","mean",0xec5a7eb3,"funkin.vis.dsp.Signal.mean","funkin/vis/dsp/Signal.hx",85,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_91_max,"funkin.vis.dsp.Signal","max",0xcc40adf6,"funkin.vis.dsp.Signal.max","funkin/vis/dsp/Signal.hx",91,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_97_maxi,"funkin.vis.dsp.Signal","maxi",0xec5789b3,"funkin.vis.dsp.Signal.maxi","funkin/vis/dsp/Signal.hx",97,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_103_min,"funkin.vis.dsp.Signal","min",0xcc40b4e4,"funkin.vis.dsp.Signal.min","funkin/vis/dsp/Signal.hx",103,0xc1e5c21b)
HX_LOCAL_STACK_FRAME(_hx_pos_279dfe4de0510e76_109_mini,"funkin.vis.dsp.Signal","mini",0xec5d9305,"funkin.vis.dsp.Signal.mini","funkin/vis/dsp/Signal.hx",109,0xc1e5c21b)
namespace funkin{
namespace vis{
namespace dsp{

void Signal_obj::__construct() { }

Dynamic Signal_obj::__CreateEmpty() { return new Signal_obj; }

void *Signal_obj::_hx_vtable = 0;

Dynamic Signal_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Signal_obj > _hx_result = new Signal_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Signal_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d0b6cfe;
}

::Array< Float > Signal_obj::smooth(::Array< Float > y,int n){
            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_14_smooth)
HXDLIN(  14)		if ((n <= 0)) {
HXLINE(  15)			return null();
            		}
            		else {
HXLINE(  16)			if ((n == 1)) {
HXLINE(  17)				return y->copy();
            			}
            			else {
HXLINE(  19)				::Array< Float > smoothed = ::Array_obj< Float >::__new();
HXLINE(  20)				smoothed->resize(y->length);
HXLINE(  21)				{
HXLINE(  21)					int _g = 0;
HXDLIN(  21)					int _g1 = y->length;
HXDLIN(  21)					while((_g < _g1)){
HXLINE(  21)						_g = (_g + 1);
HXDLIN(  21)						int i = (_g - 1);
HXLINE(  22)						int m;
HXDLIN(  22)						if (((i + 1) < n)) {
HXLINE(  22)							m = i;
            						}
            						else {
HXLINE(  22)							m = (n - 1);
            						}
HXLINE(  23)						smoothed[i] = ::funkin::vis::dsp::Signal_obj::sum(y->slice((i - m),(i + 1)));
            					}
            				}
HXLINE(  25)				return smoothed;
            			}
            		}
HXLINE(  14)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Signal_obj,smooth,return )

::Array< int > Signal_obj::findPeaks(::Array< Float > y, ::Dynamic threshold, ::Dynamic minHeight){
            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_39_findPeaks)
HXLINE(  40)		if (::hx::IsNull( threshold )) {
HXLINE(  40)			threshold = ((Float)0.0);
            		}
            		else {
HXLINE(  40)			threshold = ::Math_obj::abs(( (Float)(threshold) ));
            		}
HXLINE(  41)		if (::hx::IsNull( minHeight )) {
HXLINE(  41)			minHeight = ::funkin::vis::dsp::Signal_obj::min(y);
            		}
HXLINE(  43)		::Array< int > peaks = ::Array_obj< int >::__new();
HXLINE(  45)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN(  45)		{
HXLINE(  45)			int _g1 = 1;
HXDLIN(  45)			int _g2 = y->length;
HXDLIN(  45)			while((_g1 < _g2)){
HXLINE(  45)				_g1 = (_g1 + 1);
HXDLIN(  45)				int i = (_g1 - 1);
HXDLIN(  45)				_g->push((y->__get(i) - y->__get((i - 1))));
            			}
            		}
HXDLIN(  45)		::Array< Float > dy = _g;
HXLINE(  46)		{
HXLINE(  46)			int _g3 = 1;
HXDLIN(  46)			int _g4 = dy->length;
HXDLIN(  46)			while((_g3 < _g4)){
HXLINE(  46)				_g3 = (_g3 + 1);
HXDLIN(  46)				int i1 = (_g3 - 1);
HXLINE(  49)				bool _hx_tmp;
HXDLIN(  49)				bool _hx_tmp1;
HXDLIN(  49)				if (::hx::IsGreater( dy->__get((i1 - 1)),threshold )) {
HXLINE(  49)					_hx_tmp1 = (dy->__get(i1) < -(threshold));
            				}
            				else {
HXLINE(  49)					_hx_tmp1 = false;
            				}
HXDLIN(  49)				if (_hx_tmp1) {
HXLINE(  49)					_hx_tmp = ::hx::IsGreater( y->__get(i1),minHeight );
            				}
            				else {
HXLINE(  49)					_hx_tmp = false;
            				}
HXLINE(  48)				if (_hx_tmp) {
HXLINE(  52)					peaks->push(i1);
            				}
            			}
            		}
HXLINE(  56)		return peaks;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Signal_obj,findPeaks,return )

Float Signal_obj::sum(::Array< Float > array){
            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_64_sum)
HXLINE(  67)		Float sum = ((Float)0.0);
HXLINE(  68)		Float c = ((Float)0.0);
HXLINE(  70)		{
HXLINE(  70)			int _g = 0;
HXDLIN(  70)			while((_g < array->length)){
HXLINE(  70)				Float v = array->__get(_g);
HXDLIN(  70)				_g = (_g + 1);
HXLINE(  71)				Float t = (sum + v);
HXLINE(  72)				Float c1;
HXDLIN(  72)				if ((::Math_obj::abs(sum) >= ::Math_obj::abs(v))) {
HXLINE(  72)					c1 = ((sum - t) + v);
            				}
            				else {
HXLINE(  72)					c1 = ((v - t) + sum);
            				}
HXDLIN(  72)				c = (c + c1);
HXLINE(  75)				sum = t;
            			}
            		}
HXLINE(  78)		return (sum + c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,sum,return )

Float Signal_obj::mean(::Array< Float > y){
            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_85_mean)
HXDLIN(  85)		Float _hx_tmp = ::funkin::vis::dsp::Signal_obj::sum(y);
HXDLIN(  85)		return (_hx_tmp / ( (Float)(y->length) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,mean,return )

Float Signal_obj::max(::Array< Float > y){
            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_91_max)
HXDLIN(  91)		return ( (Float)(::Lambda_obj::fold(y,::Math_obj::max_dyn(),y->__get(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,max,return )

int Signal_obj::maxi(::Array< Float > y){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< Float >,y) HXARGC(3)
            		int _hx_run(Float yi,int m,int i){
            			HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_97_maxi)
HXDLIN(  97)			if ((yi > y->__get(m))) {
HXDLIN(  97)				return i;
            			}
            			else {
HXDLIN(  97)				return m;
            			}
HXDLIN(  97)			return 0;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_97_maxi)
HXDLIN(  97)		return ( (int)(::Lambda_obj::foldi(y, ::Dynamic(new _hx_Closure_0(y)),0)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,maxi,return )

Float Signal_obj::min(::Array< Float > y){
            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_103_min)
HXDLIN( 103)		return ( (Float)(::Lambda_obj::fold(y,::Math_obj::min_dyn(),y->__get(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,min,return )

int Signal_obj::mini(::Array< Float > y){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< Float >,y) HXARGC(3)
            		int _hx_run(Float yi,int m,int i){
            			HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_109_mini)
HXDLIN( 109)			if ((yi < y->__get(m))) {
HXDLIN( 109)				return i;
            			}
            			else {
HXDLIN( 109)				return m;
            			}
HXDLIN( 109)			return 0;
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACKFRAME(&_hx_pos_279dfe4de0510e76_109_mini)
HXDLIN( 109)		return ( (int)(::Lambda_obj::foldi(y, ::Dynamic(new _hx_Closure_0(y)),0)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Signal_obj,mini,return )


Signal_obj::Signal_obj()
{
}

bool Signal_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sum") ) { outValue = sum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mean") ) { outValue = mean_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maxi") ) { outValue = maxi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mini") ) { outValue = mini_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"smooth") ) { outValue = smooth_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"findPeaks") ) { outValue = findPeaks_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Signal_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Signal_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Signal_obj::__mClass;

static ::String Signal_obj_sStaticFields[] = {
	HX_("smooth",2e,08,6b,07),
	HX_("findPeaks",7b,ae,e4,ae),
	HX_("sum",8b,a9,57,00),
	HX_("mean",45,3a,59,48),
	HX_("max",a4,0a,53,00),
	HX_("maxi",45,45,56,48),
	HX_("min",92,11,53,00),
	HX_("mini",97,4e,5c,48),
	::String(null())
};

void Signal_obj::__register()
{
	Signal_obj _hx_dummy;
	Signal_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.dsp.Signal",c0,72,f5,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Signal_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Signal_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Signal_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Signal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Signal_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
} // end namespace dsp
