// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_funkin_vis_AudioBuffer
#include <funkin/vis/AudioBuffer.h>
#endif
#ifndef INCLUDED_funkin_vis_AudioClip
#include <funkin/vis/AudioClip.h>
#endif
#ifndef INCLUDED_funkin_vis_audioclip_frontends_LimeAudioClip
#include <funkin/vis/audioclip/frontends/LimeAudioClip.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15100117f450bafb_25_new,"funkin.vis.audioclip.frontends.LimeAudioClip","new",0xacb0e4a3,"funkin.vis.audioclip.frontends.LimeAudioClip.new","funkin/vis/audioclip/frontends/LimeAudioClip.hx",25,0xd9b194f1)
HX_LOCAL_STACK_FRAME(_hx_pos_15100117f450bafb_39_get_currentFrame,"funkin.vis.audioclip.frontends.LimeAudioClip","get_currentFrame",0xed91879a,"funkin.vis.audioclip.frontends.LimeAudioClip.get_currentFrame","funkin/vis/audioclip/frontends/LimeAudioClip.hx",39,0xd9b194f1)
namespace funkin{
namespace vis{
namespace audioclip{
namespace frontends{

void LimeAudioClip_obj::__construct( ::lime::media::AudioSource audioSource){
            	HX_GC_STACKFRAME(&_hx_pos_15100117f450bafb_25_new)
HXLINE(  26)		 ::lime::utils::ArrayBufferView data = audioSource->buffer->data;
HXLINE(  31)		int sampleRate = audioSource->buffer->sampleRate;
HXLINE(  34)		this->audioBuffer =  ::funkin::vis::AudioBuffer_obj::__alloc( HX_CTX ,data,( (Float)(sampleRate) ));
HXLINE(  35)		this->source = audioSource->buffer->get_src();
            	}

Dynamic LimeAudioClip_obj::__CreateEmpty() { return new LimeAudioClip_obj; }

void *LimeAudioClip_obj::_hx_vtable = 0;

Dynamic LimeAudioClip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LimeAudioClip_obj > _hx_result = new LimeAudioClip_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LimeAudioClip_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08ffdd07;
}

static ::funkin::vis::AudioClip_obj _hx_funkin_vis_audioclip_frontends_LimeAudioClip__hx_funkin_vis_AudioClip= {
	( int (::hx::Object::*)())&::funkin::vis::audioclip::frontends::LimeAudioClip_obj::get_currentFrame,
};

void *LimeAudioClip_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x5f4f18f7: return &_hx_funkin_vis_audioclip_frontends_LimeAudioClip__hx_funkin_vis_AudioClip;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int LimeAudioClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_15100117f450bafb_39_get_currentFrame)
HXLINE(  40)		int dataLength = 0;
HXLINE(  45)		dataLength = this->audioBuffer->data->length;
HXLINE(  48)		return ::Std_obj::_hx_int(::flixel::math::FlxMath_obj::remapToRange(::flixel::FlxG_obj::sound->music->_time,( (Float)(0) ),::flixel::FlxG_obj::sound->music->_length,( (Float)(0) ),( (Float)(dataLength) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(LimeAudioClip_obj,get_currentFrame,return )


::hx::ObjectPtr< LimeAudioClip_obj > LimeAudioClip_obj::__new( ::lime::media::AudioSource audioSource) {
	::hx::ObjectPtr< LimeAudioClip_obj > __this = new LimeAudioClip_obj();
	__this->__construct(audioSource);
	return __this;
}

::hx::ObjectPtr< LimeAudioClip_obj > LimeAudioClip_obj::__alloc(::hx::Ctx *_hx_ctx, ::lime::media::AudioSource audioSource) {
	LimeAudioClip_obj *__this = (LimeAudioClip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LimeAudioClip_obj), true, "funkin.vis.audioclip.frontends.LimeAudioClip"));
	*(void **)__this = LimeAudioClip_obj::_hx_vtable;
	__this->__construct(audioSource);
	return __this;
}

LimeAudioClip_obj::LimeAudioClip_obj()
{
}

void LimeAudioClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LimeAudioClip);
	HX_MARK_MEMBER_NAME(audioBuffer,"audioBuffer");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_END_CLASS();
}

void LimeAudioClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(audioBuffer,"audioBuffer");
	HX_VISIT_MEMBER_NAME(source,"source");
}

::hx::Val LimeAudioClip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { return ::hx::Val( source ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"audioBuffer") ) { return ::hx::Val( audioBuffer ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentFrame() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return ::hx::Val( get_currentFrame_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LimeAudioClip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"audioBuffer") ) { audioBuffer=inValue.Cast<  ::funkin::vis::AudioBuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LimeAudioClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("audioBuffer",76,ee,44,9f));
	outFields->push(HX_("currentFrame",34,5d,8f,4d));
	outFields->push(HX_("source",db,b0,31,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LimeAudioClip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::funkin::vis::AudioBuffer */ ,(int)offsetof(LimeAudioClip_obj,audioBuffer),HX_("audioBuffer",76,ee,44,9f)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LimeAudioClip_obj,source),HX_("source",db,b0,31,32)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LimeAudioClip_obj_sStaticStorageInfo = 0;
#endif

static ::String LimeAudioClip_obj_sMemberFields[] = {
	HX_("audioBuffer",76,ee,44,9f),
	HX_("source",db,b0,31,32),
	HX_("get_currentFrame",bd,49,2e,52),
	::String(null()) };

::hx::Class LimeAudioClip_obj::__mClass;

void LimeAudioClip_obj::__register()
{
	LimeAudioClip_obj _hx_dummy;
	LimeAudioClip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.vis.audioclip.frontends.LimeAudioClip",31,57,5b,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LimeAudioClip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LimeAudioClip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LimeAudioClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LimeAudioClip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace vis
} // end namespace audioclip
} // end namespace frontends
