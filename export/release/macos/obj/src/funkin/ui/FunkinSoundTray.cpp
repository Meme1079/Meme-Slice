// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_AssetFrontEnd
#include <flixel/system/frontEnds/AssetFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSaveStatus
#include <flixel/util/FlxSaveStatus.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_funkin_ui_FunkinSoundTray
#include <funkin/ui/FunkinSoundTray.h>
#endif
#ifndef INCLUDED_funkin_util_MathUtil
#include <funkin/util/MathUtil.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a057a3e57c2eb2b2_20_new,"funkin.ui.FunkinSoundTray","new",0xe47a8849,"funkin.ui.FunkinSoundTray.new","funkin/ui/FunkinSoundTray.hx",20,0xa75e31e7)
HX_LOCAL_STACK_FRAME(_hx_pos_a057a3e57c2eb2b2_66_update,"funkin.ui.FunkinSoundTray","update",0xceade5c0,"funkin.ui.FunkinSoundTray.update","funkin/ui/FunkinSoundTray.hx",66,0xa75e31e7)
HX_LOCAL_STACK_FRAME(_hx_pos_a057a3e57c2eb2b2_98_showAnim,"funkin.ui.FunkinSoundTray","showAnim",0x72414525,"funkin.ui.FunkinSoundTray.showAnim","funkin/ui/FunkinSoundTray.hx",98,0xa75e31e7)
namespace funkin{
namespace ui{

void FunkinSoundTray_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a057a3e57c2eb2b2_20_new)
HXLINE(  23)		this->alphaTarget = ((Float)0);
HXLINE(  22)		this->lerpYPos = ((Float)0);
HXLINE(  21)		this->graphicScale = ((Float)0.30);
HXLINE(  27)		super::__construct();
HXLINE(  28)		this->removeChildren(null(),null());
HXLINE(  30)		 ::openfl::display::Bitmap bg =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(::backend::Paths_obj::getPath(HX_("images/soundtray/volumebox.png",0b,64,a1,f9),null(),null(),null()),null()),null(),null());
HXLINE(  31)		bg->set_scaleX(this->graphicScale);
HXLINE(  32)		bg->set_scaleY(this->graphicScale);
HXLINE(  33)		bg->smoothing = true;
HXLINE(  34)		this->addChild(bg);
HXLINE(  36)		 ::openfl::display::Bitmap backingBar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(::backend::Paths_obj::getPath(HX_("images/soundtray/bars_10.png",18,b2,99,9e),null(),null(),null()),null()),null(),null());
HXLINE(  37)		backingBar->set_x(( (Float)(9) ));
HXLINE(  38)		backingBar->set_y(( (Float)(5) ));
HXLINE(  39)		backingBar->set_scaleX(this->graphicScale);
HXLINE(  40)		backingBar->set_scaleY(this->graphicScale);
HXLINE(  41)		backingBar->smoothing = true;
HXLINE(  42)		this->addChild(backingBar);
HXLINE(  43)		backingBar->set_alpha(((Float)0.4));
HXLINE(  45)		this->_bars = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		{
HXLINE(  46)			int _g = 1;
HXDLIN(  46)			while((_g < 11)){
HXLINE(  46)				_g = (_g + 1);
HXDLIN(  46)				int i = (_g - 1);
HXLINE(  47)				 ::openfl::display::Bitmap bar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(::backend::Paths_obj::getPath(((HX_("images/soundtray/bars_",fe,eb,15,51) + i) + HX_(".png",3b,2d,bd,1e)),null(),null(),null()),null()),null(),null());
HXLINE(  48)				bar->set_x(( (Float)(9) ));
HXLINE(  49)				bar->set_y(( (Float)(5) ));
HXLINE(  50)				bar->set_scaleX(this->graphicScale);
HXLINE(  51)				bar->set_scaleY(this->graphicScale);
HXLINE(  52)				bar->smoothing = true;
HXLINE(  53)				this->addChild(bar);
HXLINE(  54)				this->_bars->push(bar);
            			}
            		}
HXLINE(  57)		this->screenCenter();
HXLINE(  58)		this->set_y(-(this->get_height()));
HXLINE(  59)		this->set_visible(false);
HXLINE(  61)		this->volumeUpSound = ::backend::Paths_obj::getPath(HX_("sounds/soundtray/Volup.ogg",5a,6c,c3,cb),null(),null(),true);
HXLINE(  62)		this->volumeDownSound = ::backend::Paths_obj::getPath(HX_("sounds/soundtray/Voldown.ogg",61,b1,cb,55),null(),null(),true);
HXLINE(  63)		this->volumeMaxSound = ::backend::Paths_obj::getPath(HX_("sounds/soundtray/VolMAX.ogg",07,70,fe,38),null(),null(),true);
            	}

Dynamic FunkinSoundTray_obj::__CreateEmpty() { return new FunkinSoundTray_obj; }

void *FunkinSoundTray_obj::_hx_vtable = 0;

Dynamic FunkinSoundTray_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinSoundTray_obj > _hx_result = new FunkinSoundTray_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FunkinSoundTray_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x232a5d76) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x232a5d76;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x6ce8feef;
		}
	}
}

void FunkinSoundTray_obj::update(Float ms){
            	HX_STACKFRAME(&_hx_pos_a057a3e57c2eb2b2_66_update)
HXLINE(  67)		Float _hx_tmp = this->get_y();
HXDLIN(  67)		this->set_y(::funkin::util::MathUtil_obj::coolLerp(_hx_tmp,this->lerpYPos,((Float)0.1)));
HXLINE(  68)		Float _hx_tmp1 = this->get_alpha();
HXDLIN(  68)		this->set_alpha(::funkin::util::MathUtil_obj::coolLerp(_hx_tmp1,this->alphaTarget,((Float)0.25)));
HXLINE(  70)		if ((this->_timer > 0)) {
HXLINE(  71)			 ::funkin::ui::FunkinSoundTray _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  71)			_hx_tmp2->_timer = (_hx_tmp2->_timer - (ms / ( (Float)(1000) )));
            		}
            		else {
HXLINE(  72)			Float _hx_tmp3 = this->get_y();
HXDLIN(  72)			if ((_hx_tmp3 >= -(this->get_height()))) {
HXLINE(  73)				this->lerpYPos = (-(this->get_height()) - ( (Float)(10) ));
HXLINE(  74)				this->alphaTarget = ( (Float)(0) );
            			}
            		}
HXLINE(  77)		Float _hx_tmp4 = this->get_y();
HXDLIN(  77)		if ((_hx_tmp4 <= -(this->get_height()))) {
HXLINE(  78)			this->set_visible(false);
HXLINE(  79)			this->active = false;
HXLINE(  82)			 ::flixel::util::FlxSaveStatus _g = ::flixel::FlxG_obj::save->status;
HXDLIN(  82)			bool _hx_tmp5;
HXDLIN(  82)			if ((_g->_hx_getIndex() == 1)) {
HXLINE(  82)				::String _g1 = _g->_hx_getString(0);
HXDLIN(  82)				::String _g2 = _g->_hx_getString(1);
HXDLIN(  82)				_hx_tmp5 = true;
            			}
            			else {
HXLINE(  82)				_hx_tmp5 = false;
            			}
HXDLIN(  82)			if (_hx_tmp5) {
HXLINE(  83)				::flixel::FlxG_obj::save->data->__SetField(HX_("mute",d9,6e,65,48),::flixel::FlxG_obj::sound->muted,::hx::paccDynamic);
HXLINE(  84)				::flixel::FlxG_obj::save->data->__SetField(HX_("volume",da,29,53,5f),::flixel::FlxG_obj::sound->volume,::hx::paccDynamic);
HXLINE(  85)				::flixel::FlxG_obj::save->flush(null());
            			}
            		}
            	}


void FunkinSoundTray_obj::showAnim(Float volume, ::Dynamic sound,::hx::Null< Float >  __o_duration,::String __o_label){
            		Float duration = __o_duration.Default(((Float)1.0));
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("VOLUME",da,d5,d5,11);
            	HX_STACKFRAME(&_hx_pos_a057a3e57c2eb2b2_98_showAnim)
HXLINE(  99)		this->_timer = ( (Float)(1) );
HXLINE( 100)		this->lerpYPos = ( (Float)(10) );
HXLINE( 101)		this->set_visible(true);
HXLINE( 102)		this->active = true;
HXLINE( 103)		this->alphaTarget = ( (Float)(1) );
HXLINE( 105)		int globalVolume = ::Math_obj::round((( (Float)(::flixel::FlxG_obj::sound->applySoundCurve(::flixel::FlxG_obj::sound->volume)) ) * ( (Float)(10) )));
HXLINE( 106)		bool _hx_tmp;
HXDLIN( 106)		if (!(::flixel::FlxG_obj::sound->muted)) {
HXLINE( 106)			_hx_tmp = (::flixel::FlxG_obj::sound->volume == 0);
            		}
            		else {
HXLINE( 106)			_hx_tmp = true;
            		}
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 107)			globalVolume = 0;
            		}
HXLINE( 110)		if (::hx::IsNotNull( sound )) {
HXLINE( 111)			if ((globalVolume == 10)) {
HXLINE( 112)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 112)				 ::flixel::_hx_system::frontEnds::AssetFrontEnd _this = ::flixel::FlxG_obj::assets;
HXDLIN( 112)				::String id = this->volumeMaxSound;
HXDLIN( 112)				 ::flixel::_hx_system::debug::log::LogStyle logStyle = null();
HXDLIN( 112)				::String id1;
HXDLIN( 112)				bool id2;
HXDLIN( 112)				bool id3;
HXDLIN( 112)				if (!(::StringTools_obj::endsWith(id,HX_(".mp3",02,e8,ba,1e)))) {
HXLINE( 112)					id3 = !(::StringTools_obj::endsWith(id,HX_(".ogg",e1,64,bc,1e)));
            				}
            				else {
HXLINE( 112)					id3 = false;
            				}
HXDLIN( 112)				if (id3) {
HXLINE( 112)					id2 = !(::StringTools_obj::endsWith(id,HX_(".wav",be,71,c2,1e)));
            				}
            				else {
HXLINE( 112)					id2 = false;
            				}
HXDLIN( 112)				if (id2) {
HXLINE( 112)					id1 = (id + _this->defaultSoundExtension);
            				}
            				else {
HXLINE( 112)					id1 = id;
            				}
HXDLIN( 112)				_hx_tmp1->play(( ( ::openfl::media::Sound)(_this->getAsset(id1,HX_("sound",cf,8c,cc,80),true,logStyle)) ),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 114)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 114)				 ::flixel::_hx_system::frontEnds::AssetFrontEnd _this1 = ::flixel::FlxG_obj::assets;
HXDLIN( 114)				 ::flixel::_hx_system::debug::log::LogStyle logStyle1 = null();
HXDLIN( 114)				::String id4;
HXDLIN( 114)				bool id5;
HXDLIN( 114)				bool id6;
HXDLIN( 114)				if (!(::StringTools_obj::endsWith(( (::String)(sound) ),HX_(".mp3",02,e8,ba,1e)))) {
HXLINE( 114)					id6 = !(::StringTools_obj::endsWith(( (::String)(sound) ),HX_(".ogg",e1,64,bc,1e)));
            				}
            				else {
HXLINE( 114)					id6 = false;
            				}
HXDLIN( 114)				if (id6) {
HXLINE( 114)					id5 = !(::StringTools_obj::endsWith(( (::String)(sound) ),HX_(".wav",be,71,c2,1e)));
            				}
            				else {
HXLINE( 114)					id5 = false;
            				}
HXDLIN( 114)				if (id5) {
HXLINE( 114)					id4 = (sound + _this1->defaultSoundExtension);
            				}
            				else {
HXLINE( 114)					id4 = ( (::String)(sound) );
            				}
HXDLIN( 114)				_hx_tmp2->play(( ( ::openfl::media::Sound)(_this1->getAsset(id4,HX_("sound",cf,8c,cc,80),true,logStyle1)) ),null(),null(),null(),null(),null());
            			}
            		}
HXLINE( 118)		{
HXLINE( 118)			int _g = 0;
HXDLIN( 118)			int _g1 = this->_bars->length;
HXDLIN( 118)			while((_g < _g1)){
HXLINE( 118)				_g = (_g + 1);
HXDLIN( 118)				int i = (_g - 1);
HXLINE( 119)				if ((i < globalVolume)) {
HXLINE( 120)					this->_bars->__get(i).StaticCast<  ::openfl::display::Bitmap >()->set_visible(true);
            				}
            				else {
HXLINE( 122)					this->_bars->__get(i).StaticCast<  ::openfl::display::Bitmap >()->set_visible(false);
            				}
            			}
            		}
            	}



::hx::ObjectPtr< FunkinSoundTray_obj > FunkinSoundTray_obj::__new() {
	::hx::ObjectPtr< FunkinSoundTray_obj > __this = new FunkinSoundTray_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FunkinSoundTray_obj > FunkinSoundTray_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FunkinSoundTray_obj *__this = (FunkinSoundTray_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinSoundTray_obj), true, "funkin.ui.FunkinSoundTray"));
	*(void **)__this = FunkinSoundTray_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FunkinSoundTray_obj::FunkinSoundTray_obj()
{
}

void FunkinSoundTray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunkinSoundTray);
	HX_MARK_MEMBER_NAME(graphicScale,"graphicScale");
	HX_MARK_MEMBER_NAME(lerpYPos,"lerpYPos");
	HX_MARK_MEMBER_NAME(alphaTarget,"alphaTarget");
	HX_MARK_MEMBER_NAME(volumeMaxSound,"volumeMaxSound");
	 ::flixel::_hx_system::ui::FlxSoundTray_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FunkinSoundTray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(graphicScale,"graphicScale");
	HX_VISIT_MEMBER_NAME(lerpYPos,"lerpYPos");
	HX_VISIT_MEMBER_NAME(alphaTarget,"alphaTarget");
	HX_VISIT_MEMBER_NAME(volumeMaxSound,"volumeMaxSound");
	 ::flixel::_hx_system::ui::FlxSoundTray_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FunkinSoundTray_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lerpYPos") ) { return ::hx::Val( lerpYPos ); }
		if (HX_FIELD_EQ(inName,"showAnim") ) { return ::hx::Val( showAnim_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alphaTarget") ) { return ::hx::Val( alphaTarget ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicScale") ) { return ::hx::Val( graphicScale ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeMaxSound") ) { return ::hx::Val( volumeMaxSound ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FunkinSoundTray_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"lerpYPos") ) { lerpYPos=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alphaTarget") ) { alphaTarget=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"graphicScale") ) { graphicScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeMaxSound") ) { volumeMaxSound=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunkinSoundTray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("graphicScale",c2,42,03,e9));
	outFields->push(HX_("lerpYPos",b2,2c,e1,d5));
	outFields->push(HX_("alphaTarget",4f,e9,f0,f6));
	outFields->push(HX_("volumeMaxSound",85,2f,53,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinSoundTray_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FunkinSoundTray_obj,graphicScale),HX_("graphicScale",c2,42,03,e9)},
	{::hx::fsFloat,(int)offsetof(FunkinSoundTray_obj,lerpYPos),HX_("lerpYPos",b2,2c,e1,d5)},
	{::hx::fsFloat,(int)offsetof(FunkinSoundTray_obj,alphaTarget),HX_("alphaTarget",4f,e9,f0,f6)},
	{::hx::fsString,(int)offsetof(FunkinSoundTray_obj,volumeMaxSound),HX_("volumeMaxSound",85,2f,53,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FunkinSoundTray_obj_sStaticStorageInfo = 0;
#endif

static ::String FunkinSoundTray_obj_sMemberFields[] = {
	HX_("graphicScale",c2,42,03,e9),
	HX_("lerpYPos",b2,2c,e1,d5),
	HX_("alphaTarget",4f,e9,f0,f6),
	HX_("volumeMaxSound",85,2f,53,ba),
	HX_("update",09,86,05,87),
	HX_("showAnim",ae,49,f8,a7),
	::String(null()) };

::hx::Class FunkinSoundTray_obj::__mClass;

void FunkinSoundTray_obj::__register()
{
	FunkinSoundTray_obj _hx_dummy;
	FunkinSoundTray_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.ui.FunkinSoundTray",d7,af,14,c1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinSoundTray_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinSoundTray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinSoundTray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinSoundTray_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkin
} // end namespace ui
