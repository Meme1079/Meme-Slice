// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_system_FlxBasePreloader
#include <flixel/system/FlxBasePreloader.h>
#endif
#ifndef INCLUDED_flixel_system__FlxBasePreloader_DefaultPreloader
#include <flixel/system/_FlxBasePreloader/DefaultPreloader.h>
#endif
#ifndef INCLUDED_funkin_transition_FunkinPreloader
#include <funkin/transition/FunkinPreloader.h>
#endif
#ifndef INCLUDED_funkin_transition_FunkinPreloaderState
#include <funkin/transition/FunkinPreloaderState.h>
#endif
#ifndef INCLUDED_funkin_transition_LogoImage
#include <funkin/transition/LogoImage.h>
#endif
#ifndef INCLUDED_funkin_transition_VFDOverlay
#include <funkin/transition/VFDOverlay.h>
#endif
#ifndef INCLUDED_funkin_util_Constants
#include <funkin/util/Constants.h>
#endif
#ifndef INCLUDED_funkin_util_MathUtil
#include <funkin/util/MathUtil.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_34_new,"funkin.transition.FunkinPreloader","new",0xe0b2f99b,"funkin.transition.FunkinPreloader.new","funkin/transition/FunkinPreloader.hx",34,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_129_create,"funkin.transition.FunkinPreloader","create",0x21cf74a1,"funkin.transition.FunkinPreloader.create","funkin/transition/FunkinPreloader.hx",129,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_116_create,"funkin.transition.FunkinPreloader","create",0x21cf74a1,"funkin.transition.FunkinPreloader.create","funkin/transition/FunkinPreloader.hx",116,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_287_update,"funkin.transition.FunkinPreloader","update",0x2cc593ae,"funkin.transition.FunkinPreloader.update","funkin/transition/FunkinPreloader.hx",287,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_301_updateState,"funkin.transition.FunkinPreloader","updateState",0x88773b83,"funkin.transition.FunkinPreloader.updateState","funkin/transition/FunkinPreloader.hx",301,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_746_updateGraphics,"funkin.transition.FunkinPreloader","updateGraphics",0xe53fa699,"funkin.transition.FunkinPreloader.updateGraphics","funkin/transition/FunkinPreloader.hx",746,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_837_updateProgressLeftText,"funkin.transition.FunkinPreloader","updateProgressLeftText",0x4b53e4ef,"funkin.transition.FunkinPreloader.updateProgressLeftText","funkin/transition/FunkinPreloader.hx",837,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_866_immediatelyStartGame,"funkin.transition.FunkinPreloader","immediatelyStartGame",0xc13ff93b,"funkin.transition.FunkinPreloader.immediatelyStartGame","funkin/transition/FunkinPreloader.hx",866,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_874_renderLogoFadeOut,"funkin.transition.FunkinPreloader","renderLogoFadeOut",0xdaa9ef0c,"funkin.transition.FunkinPreloader.renderLogoFadeOut","funkin/transition/FunkinPreloader.hx",874,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_901_renderLogoFadeIn,"funkin.transition.FunkinPreloader","renderLogoFadeIn",0x15a4e727,"funkin.transition.FunkinPreloader.renderLogoFadeIn","funkin/transition/FunkinPreloader.hx",901,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_943_destroy,"funkin.transition.FunkinPreloader","destroy",0x86d20fb5,"funkin.transition.FunkinPreloader.destroy","funkin/transition/FunkinPreloader.hx",943,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_951_onLoaded,"funkin.transition.FunkinPreloader","onLoaded",0xd836bf69,"funkin.transition.FunkinPreloader.onLoaded","funkin/transition/FunkinPreloader.hx",951,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_35_boot,"funkin.transition.FunkinPreloader","boot",0xb4006e97,"funkin.transition.FunkinPreloader.boot","funkin/transition/FunkinPreloader.hx",35,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_37_boot,"funkin.transition.FunkinPreloader","boot",0xb4006e97,"funkin.transition.FunkinPreloader.boot","funkin/transition/FunkinPreloader.hx",37,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_38_boot,"funkin.transition.FunkinPreloader","boot",0xb4006e97,"funkin.transition.FunkinPreloader.boot","funkin/transition/FunkinPreloader.hx",38,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_40_boot,"funkin.transition.FunkinPreloader","boot",0xb4006e97,"funkin.transition.FunkinPreloader.boot","funkin/transition/FunkinPreloader.hx",40,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_744_boot,"funkin.transition.FunkinPreloader","boot",0xb4006e97,"funkin.transition.FunkinPreloader.boot","funkin/transition/FunkinPreloader.hx",744,0x4960c7d5)
HX_LOCAL_STACK_FRAME(_hx_pos_cfbb4d8a617d4c69_745_boot,"funkin.transition.FunkinPreloader","boot",0xb4006e97,"funkin.transition.FunkinPreloader.boot","funkin/transition/FunkinPreloader.hx",745,0x4960c7d5)
namespace funkin{
namespace transition{

void FunkinPreloader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_34_new)
HXLINE( 286)		this->lastElapsed = ((Float)0.0);
HXLINE(  83)		this->completeTime = ((Float)-1);
HXLINE(  82)		this->cachingCoreAssetsPercent = ((Float)-1);
HXLINE(  81)		this->initializingScriptsPercent = ((Float)-1);
HXLINE(  79)		this->parsingSongsComplete = false;
HXLINE(  78)		this->parsingSongsStartTime = ((Float)-1);
HXLINE(  77)		this->parsingSongsPercent = ((Float)-1);
HXLINE(  75)		this->parsingCharactersComplete = false;
HXLINE(  74)		this->parsingCharactersStartTime = ((Float)-1);
HXLINE(  73)		this->parsingCharactersPercent = ((Float)-1);
HXLINE(  71)		this->parsingStagesComplete = false;
HXLINE(  70)		this->parsingStagesStartTime = ((Float)-1);
HXLINE(  69)		this->parsingStagesPercent = ((Float)-1);
HXLINE(  67)		this->parsingSpritesheetsComplete = false;
HXLINE(  66)		this->parsingSpritesheetsStartTime = ((Float)-1);
HXLINE(  65)		this->parsingSpritesheetsPercent = ((Float)-1);
HXLINE(  63)		this->cachingDataComplete = false;
HXLINE(  62)		this->cachingDataStartTime = ((Float)-1);
HXLINE(  61)		this->cachingDataPercent = ((Float)-1);
HXLINE(  59)		this->cachingAudioComplete = false;
HXLINE(  58)		this->cachingAudioStartTime = ((Float)-1);
HXLINE(  57)		this->cachingAudioPercent = ((Float)-1);
HXLINE(  55)		this->cachingGraphicsComplete = false;
HXLINE(  54)		this->cachingGraphicsStartTime = ((Float)-1);
HXLINE(  53)		this->cachingGraphicsPercent = ((Float)-1);
HXLINE(  51)		this->preloadingPlayAssetsComplete = false;
HXLINE(  50)		this->preloadingPlayAssetsStartTime = ((Float)-1);
HXLINE(  49)		this->preloadingPlayAssetsPercent = ((Float)-1);
HXLINE(  47)		this->downloadingAssetsComplete = false;
HXLINE(  46)		this->downloadingAssetsPercent = ((Float)-1);
HXLINE(  43)		this->currentState = ::funkin::transition::FunkinPreloaderState_obj::NotStarted_dyn();
HXLINE(  41)		this->ratio = ((Float)0);
HXLINE( 107)		super::__construct(::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME,null());
HXLINE( 110)		::haxe::Log_obj::trace(HX_("Initializing custom preloader...",14,fa,65,36),::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),110,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("new",60,d0,53,00)));
HXLINE( 112)		this->siteLockTitleText = ::funkin::util::Constants_obj::SITE_LOCK_TITLE;
HXLINE( 113)		this->siteLockBodyText = ::funkin::util::Constants_obj::SITE_LOCK_DESC;
            	}

Dynamic FunkinPreloader_obj::__CreateEmpty() { return new FunkinPreloader_obj; }

void *FunkinPreloader_obj::_hx_vtable = 0;

Dynamic FunkinPreloader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinPreloader_obj > _hx_result = new FunkinPreloader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FunkinPreloader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f28d986) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2f28d986;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x318ede3c || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x6b353933;
			}
		} else {
			return inClassId==(int)0x7982e79f;
		}
	}
}

void FunkinPreloader_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::funkin::transition::FunkinPreloader,_gthis) HXARGC(1)
            		void _hx_run( ::openfl::display::Bitmap bmp){
            			HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_129_create)
HXLINE( 132)			bmp->set_scaleX(bmp->set_scaleY(_gthis->ratio));
HXLINE( 133)			int _gthis1 = _gthis->_width;
HXDLIN( 133)			bmp->set_x(((( (Float)(_gthis1) ) - bmp->get_width()) / ( (Float)(2) )));
HXLINE( 134)			int _gthis2 = _gthis->_height;
HXDLIN( 134)			bmp->set_y(((( (Float)(_gthis2) ) - bmp->get_height()) / ( (Float)(2) )));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_116_create)
HXDLIN( 116)		 ::funkin::transition::FunkinPreloader _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 117)		this->super::create();
HXLINE( 119)		::openfl::Lib_obj::get_current()->stage->set_color(::funkin::util::Constants_obj::COLOR_PRELOADER_BG);
HXLINE( 122)		this->_width = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXLINE( 123)		this->_height = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXLINE( 126)		this->ratio = ((( (Float)(this->_width) ) / ::funkin::transition::FunkinPreloader_obj::BASE_WIDTH) / ((Float)2.0));
HXLINE( 129)		this->logo = this->createBitmap(::hx::ClassOf< ::funkin::transition::LogoImage >(), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 138)		int amountOfPieces = 16;
HXLINE( 139)		this->progressBarPieces = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 141)		Float maxBarWidth = (( (Float)(this->_width) ) - (::funkin::transition::FunkinPreloader_obj::BAR_PADDING * ( (Float)(2) )));
HXLINE( 142)		Float pieceWidth = (maxBarWidth / ( (Float)(amountOfPieces) ));
HXLINE( 143)		int pieceGap = 8;
HXLINE( 145)		this->progressLines =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 146)		this->progressLines->get_graphics()->lineStyle(2,::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,null(),null(),null(),null(),null(),null());
HXLINE( 147)		 ::openfl::display::Graphics _hx_tmp = this->progressLines->get_graphics();
HXDLIN( 147)		_hx_tmp->drawRect(( (Float)(-2) ),( (Float)(480) ),( (Float)((this->_width + 4)) ),( (Float)(30) ));
HXLINE( 148)		this->addChild(this->progressLines);
HXLINE( 150)		 ::openfl::display::Sprite progressBarPiece =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 151)		progressBarPiece->get_graphics()->beginFill(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,null());
HXLINE( 152)		progressBarPiece->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),(pieceWidth - ( (Float)(pieceGap) )),( (Float)(::funkin::transition::FunkinPreloader_obj::BAR_HEIGHT) ),( (Float)(4) ),4);
HXLINE( 153)		progressBarPiece->get_graphics()->endFill();
HXLINE( 155)		{
HXLINE( 155)			int _g = 0;
HXDLIN( 155)			int _g1 = amountOfPieces;
HXDLIN( 155)			while((_g < _g1)){
HXLINE( 155)				_g = (_g + 1);
HXDLIN( 155)				int i = (_g - 1);
HXLINE( 156)				 ::openfl::display::Sprite piece =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 157)				piece->get_graphics()->beginFill(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,null());
HXLINE( 158)				piece->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),(pieceWidth - ( (Float)(pieceGap) )),( (Float)(::funkin::transition::FunkinPreloader_obj::BAR_HEIGHT) ),( (Float)(4) ),4);
HXLINE( 159)				piece->get_graphics()->endFill();
HXLINE( 161)				piece->set_x((( (Float)(i) ) * (piece->get_width() + pieceGap)));
HXLINE( 162)				piece->set_y((((( (Float)(this->_height) ) - ::funkin::transition::FunkinPreloader_obj::BAR_PADDING) - ( (Float)(::funkin::transition::FunkinPreloader_obj::BAR_HEIGHT) )) - ( (Float)(200) )));
HXLINE( 163)				this->addChild(piece);
HXLINE( 164)				this->progressBarPieces->push(piece);
            			}
            		}
HXLINE( 174)		this->progressLeftText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 175)		this->dspText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 176)		this->fnfText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 177)		this->enhancedText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 178)		this->stereoText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 180)		 ::openfl::text::TextFormat progressLeftTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("DS-Digital",ba,e1,1c,21),32,::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,true,null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 181)		progressLeftTextFormat->align = 3;
HXLINE( 182)		this->progressLeftText->set_defaultTextFormat(progressLeftTextFormat);
HXLINE( 184)		this->progressLeftText->set_selectable(false);
HXLINE( 185)		this->progressLeftText->set_width((( (Float)(this->_width) ) - (::funkin::transition::FunkinPreloader_obj::BAR_PADDING * ( (Float)(2) ))));
HXLINE( 186)		this->progressLeftText->set_text(HX_("Downloading assets...",e5,a1,ee,77));
HXLINE( 187)		this->progressLeftText->set_x(::funkin::transition::FunkinPreloader_obj::BAR_PADDING);
HXLINE( 188)		this->progressLeftText->set_y((((( (Float)(this->_height) ) - ::funkin::transition::FunkinPreloader_obj::BAR_PADDING) - ( (Float)(::funkin::transition::FunkinPreloader_obj::BAR_HEIGHT) )) - ( (Float)(290) )));
HXLINE( 190)		this->addChild(this->progressLeftText);
HXLINE( 193)		this->progressRightText =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 195)		 ::openfl::text::TextFormat progressRightTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("DS-Digital",ba,e1,1c,21),16,::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,true,null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 196)		progressRightTextFormat->align = 4;
HXLINE( 197)		this->progressRightText->set_defaultTextFormat(progressRightTextFormat);
HXLINE( 199)		this->progressRightText->set_selectable(false);
HXLINE( 200)		this->progressRightText->set_width((( (Float)(this->_width) ) - (::funkin::transition::FunkinPreloader_obj::BAR_PADDING * ( (Float)(2) ))));
HXLINE( 201)		this->progressRightText->set_text(HX_("0%",f5,29,00,00));
HXLINE( 202)		this->progressRightText->set_x(::funkin::transition::FunkinPreloader_obj::BAR_PADDING);
HXLINE( 203)		this->progressRightText->set_y(((((( (Float)(this->_height) ) - ::funkin::transition::FunkinPreloader_obj::BAR_PADDING) - ( (Float)(::funkin::transition::FunkinPreloader_obj::BAR_HEIGHT) )) - ( (Float)(16) )) - ( (Float)(4) )));
HXLINE( 204)		this->addChild(this->progressRightText);
HXLINE( 206)		this->box =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 207)		this->box->get_graphics()->beginFill(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,1);
HXLINE( 208)		this->box->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),( (Float)(64) ),( (Float)(20) ),( (Float)(5) ),5);
HXLINE( 209)		this->box->get_graphics()->drawRoundRect(( (Float)(70) ),( (Float)(0) ),( (Float)(58) ),( (Float)(20) ),( (Float)(5) ),5);
HXLINE( 210)		this->box->get_graphics()->endFill();
HXLINE( 211)		this->box->get_graphics()->beginFill(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,((Float)0.1));
HXLINE( 212)		this->box->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),( (Float)(128) ),( (Float)(20) ),( (Float)(5) ),5);
HXLINE( 213)		this->box->get_graphics()->endFill();
HXLINE( 214)		this->box->set_x(( (Float)(880) ));
HXLINE( 215)		this->box->set_y(( (Float)(440) ));
HXLINE( 216)		this->addChild(this->box);
HXLINE( 218)		this->dspText->set_selectable(false);
HXLINE( 219)		this->dspText->set_textColor(0);
HXLINE( 220)		this->dspText->set_width(( (Float)(this->_width) ));
HXLINE( 221)		this->dspText->set_height(( (Float)(30) ));
HXLINE( 222)		this->dspText->set_text(HX_("DSP",e1,e1,33,00));
HXLINE( 223)		this->dspText->set_x(( (Float)(10) ));
HXLINE( 224)		this->dspText->set_y(( (Float)(-7) ));
HXLINE( 225)		this->box->addChild(this->dspText);
HXLINE( 227)		this->fnfText->set_selectable(false);
HXLINE( 228)		this->fnfText->set_textColor(0);
HXLINE( 229)		this->fnfText->set_width(( (Float)(this->_width) ));
HXLINE( 230)		this->fnfText->set_height(( (Float)(30) ));
HXLINE( 231)		this->fnfText->set_x(( (Float)(78) ));
HXLINE( 232)		this->fnfText->set_y(( (Float)(-7) ));
HXLINE( 233)		this->fnfText->set_text(HX_("FNF",fe,61,35,00));
HXLINE( 234)		this->box->addChild(this->fnfText);
HXLINE( 236)		this->enhancedText->set_selectable(false);
HXLINE( 237)		this->enhancedText->set_textColor(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR);
HXLINE( 238)		this->enhancedText->set_width(( (Float)(this->_width) ));
HXLINE( 239)		this->enhancedText->set_height(( (Float)(100) ));
HXLINE( 240)		this->enhancedText->set_text(HX_("ENHANCED",76,58,a2,80));
HXLINE( 241)		this->enhancedText->set_x(( (Float)(-100) ));
HXLINE( 242)		this->enhancedText->set_y(( (Float)(0) ));
HXLINE( 243)		this->box->addChild(this->enhancedText);
HXLINE( 245)		this->stereoText->set_selectable(false);
HXLINE( 246)		this->stereoText->set_textColor(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR);
HXLINE( 247)		this->stereoText->set_width(( (Float)(this->_width) ));
HXLINE( 248)		this->stereoText->set_height(( (Float)(100) ));
HXLINE( 249)		this->stereoText->set_text(HX_("STEREO",38,db,21,bb));
HXLINE( 250)		this->stereoText->set_x(( (Float)(0) ));
HXLINE( 251)		this->stereoText->set_y(( (Float)(-40) ));
HXLINE( 252)		this->box->addChild(this->stereoText);
HXLINE( 263)		this->vfdBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->_width,this->_height,true,-1),null(),null());
HXLINE( 264)		this->addChild(this->vfdBitmap);
HXLINE( 266)		this->vfdShader =  ::funkin::transition::VFDOverlay_obj::__alloc( HX_CTX );
HXLINE( 267)		this->vfdBitmap->set_shader(this->vfdShader);
            	}


void FunkinPreloader_obj::update(Float percent){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_287_update)
HXLINE( 288)		Float elapsed = ::Date_obj::now()->getTime();
HXDLIN( 288)		Float elapsed1 = ((elapsed - this->_startTime) / ((Float)1000.0));
HXLINE( 290)		this->vfdShader->update((elapsed1 * ( (Float)(100) )));
HXLINE( 293)		this->downloadingAssetsPercent = percent;
HXLINE( 294)		Float loadPercent = this->updateState(percent,elapsed1);
HXLINE( 295)		this->updateGraphics(loadPercent,elapsed1);
HXLINE( 297)		this->lastElapsed = elapsed1;
            	}


Float FunkinPreloader_obj::updateState(Float percent,Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_301_updateState)
HXDLIN( 301)		switch((int)(this->currentState->_hx_getIndex())){
            			case (int)0: {
HXLINE( 303)				if ((this->downloadingAssetsPercent > ((Float)0.0))) {
HXLINE( 304)					this->currentState = ::funkin::transition::FunkinPreloaderState_obj::DownloadingAssets_dyn();
            				}
HXLINE( 305)				return percent;
            			}
            			break;
            			case (int)1: {
HXLINE( 309)				bool _hx_tmp;
HXDLIN( 309)				if (!((this->downloadingAssetsPercent >= ((Float)1.0)))) {
HXLINE( 309)					if ((elapsed > ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME)) {
HXLINE( 309)						_hx_tmp = this->downloadingAssetsComplete;
            					}
            					else {
HXLINE( 309)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 309)					_hx_tmp = true;
            				}
HXDLIN( 309)				if (_hx_tmp) {
HXLINE( 310)					this->currentState = ::funkin::transition::FunkinPreloaderState_obj::PreloadingPlayAssets_dyn();
            				}
HXLINE( 311)				return percent;
            			}
            			break;
            			case (int)2: {
HXLINE( 314)				if ((this->preloadingPlayAssetsPercent < ((Float)0.0))) {
HXLINE( 315)					this->preloadingPlayAssetsStartTime = elapsed;
HXLINE( 316)					this->preloadingPlayAssetsPercent = ((Float)0.0);
HXLINE( 333)					this->preloadingPlayAssetsPercent = ((Float)1.0);
HXLINE( 334)					this->preloadingPlayAssetsComplete = true;
HXLINE( 335)					return ((Float)0.0);
            				}
            				else {
HXLINE( 336)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 337)						Float elapsedPreloadingPlayAssets = (elapsed - this->preloadingPlayAssetsStartTime);
HXLINE( 338)						bool _hx_tmp1;
HXDLIN( 338)						if (this->preloadingPlayAssetsComplete) {
HXLINE( 338)							_hx_tmp1 = (elapsedPreloadingPlayAssets >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 338)							_hx_tmp1 = false;
            						}
HXDLIN( 338)						if (_hx_tmp1) {
HXLINE( 339)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::InitializingScripts_dyn();
HXLINE( 340)							return ((Float)0.0);
            						}
            						else {
HXLINE( 343)							if ((this->preloadingPlayAssetsPercent < (elapsedPreloadingPlayAssets / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 344)								return this->preloadingPlayAssetsPercent;
            							}
            							else {
HXLINE( 346)								return (elapsedPreloadingPlayAssets / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 351)						if (this->preloadingPlayAssetsComplete) {
HXLINE( 352)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::InitializingScripts_dyn();
            						}
            					}
            				}
HXLINE( 354)				return this->preloadingPlayAssetsPercent;
            			}
            			break;
            			case (int)3: {
HXLINE( 357)				if ((this->initializingScriptsPercent < ((Float)0.0))) {
HXLINE( 358)					this->initializingScriptsPercent = ((Float)0.0);
HXLINE( 372)					this->initializingScriptsPercent = ((Float)1.0);
HXLINE( 373)					this->currentState = ::funkin::transition::FunkinPreloaderState_obj::CachingGraphics_dyn();
HXLINE( 374)					return ((Float)0.0);
            				}
HXLINE( 376)				return this->initializingScriptsPercent;
            			}
            			break;
            			case (int)4: {
HXLINE( 379)				if ((this->cachingGraphicsPercent < 0)) {
HXLINE( 380)					this->cachingGraphicsPercent = ((Float)0.0);
HXLINE( 381)					this->cachingGraphicsStartTime = elapsed;
HXLINE( 396)					this->cachingGraphicsPercent = ((Float)1.0);
HXLINE( 397)					this->cachingGraphicsComplete = true;
HXLINE( 398)					return ((Float)0.0);
            				}
            				else {
HXLINE( 399)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 400)						Float elapsedCachingGraphics = (elapsed - this->cachingGraphicsStartTime);
HXLINE( 401)						bool _hx_tmp2;
HXDLIN( 401)						if (this->cachingGraphicsComplete) {
HXLINE( 401)							_hx_tmp2 = (elapsedCachingGraphics >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 401)							_hx_tmp2 = false;
            						}
HXDLIN( 401)						if (_hx_tmp2) {
HXLINE( 402)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::CachingAudio_dyn();
HXLINE( 403)							return ((Float)0.0);
            						}
            						else {
HXLINE( 405)							if ((this->cachingGraphicsPercent < (elapsedCachingGraphics / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 406)								return this->cachingGraphicsPercent;
            							}
            							else {
HXLINE( 408)								return (elapsedCachingGraphics / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 412)						if (this->cachingGraphicsComplete) {
HXLINE( 413)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::CachingAudio_dyn();
HXLINE( 414)							return ((Float)0.0);
            						}
            						else {
HXLINE( 416)							return this->cachingGraphicsPercent;
            						}
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 421)				if ((this->cachingAudioPercent < 0)) {
HXLINE( 422)					this->cachingAudioPercent = ((Float)0.0);
HXLINE( 423)					this->cachingAudioStartTime = elapsed;
HXLINE( 438)					this->cachingAudioPercent = ((Float)1.0);
HXLINE( 439)					this->cachingAudioComplete = true;
HXLINE( 440)					return ((Float)0.0);
            				}
            				else {
HXLINE( 441)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 442)						Float elapsedCachingAudio = (elapsed - this->cachingAudioStartTime);
HXLINE( 443)						bool _hx_tmp3;
HXDLIN( 443)						if (this->cachingAudioComplete) {
HXLINE( 443)							_hx_tmp3 = (elapsedCachingAudio >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 443)							_hx_tmp3 = false;
            						}
HXDLIN( 443)						if (_hx_tmp3) {
HXLINE( 444)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::CachingData_dyn();
HXLINE( 445)							return ((Float)0.0);
            						}
            						else {
HXLINE( 448)							if ((this->cachingAudioPercent < (elapsedCachingAudio / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 449)								return this->cachingAudioPercent;
            							}
            							else {
HXLINE( 451)								return (elapsedCachingAudio / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 455)						if (this->cachingAudioComplete) {
HXLINE( 456)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::CachingData_dyn();
HXLINE( 457)							return ((Float)0.0);
            						}
            						else {
HXLINE( 459)							return this->cachingAudioPercent;
            						}
            					}
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 464)				if ((this->cachingDataPercent < 0)) {
HXLINE( 465)					this->cachingDataPercent = ((Float)0.0);
HXLINE( 466)					this->cachingDataStartTime = elapsed;
HXLINE( 492)					this->cachingDataPercent = ((Float)1.0);
HXLINE( 493)					this->cachingDataComplete = true;
HXLINE( 494)					return ((Float)0.0);
            				}
            				else {
HXLINE( 495)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 496)						Float elapsedCachingData = (elapsed - this->cachingDataStartTime);
HXLINE( 497)						bool _hx_tmp4;
HXDLIN( 497)						if (this->cachingDataComplete) {
HXLINE( 497)							_hx_tmp4 = (elapsedCachingData >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 497)							_hx_tmp4 = false;
            						}
HXDLIN( 497)						if (_hx_tmp4) {
HXLINE( 498)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingSpritesheets_dyn();
HXLINE( 499)							return ((Float)0.0);
            						}
            						else {
HXLINE( 502)							if ((this->cachingDataPercent < (elapsedCachingData / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 503)								return this->cachingDataPercent;
            							}
            							else {
HXLINE( 505)								return (elapsedCachingData / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 509)						if (this->cachingDataComplete) {
HXLINE( 510)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingSpritesheets_dyn();
HXLINE( 511)							return ((Float)0.0);
            						}
            					}
            				}
HXLINE( 514)				return this->cachingDataPercent;
            			}
            			break;
            			case (int)7: {
HXLINE( 517)				if ((this->parsingSpritesheetsPercent < 0)) {
HXLINE( 518)					this->parsingSpritesheetsPercent = ((Float)0.0);
HXLINE( 519)					this->parsingSpritesheetsStartTime = elapsed;
HXLINE( 534)					this->parsingSpritesheetsPercent = ((Float)1.0);
HXLINE( 535)					this->parsingSpritesheetsComplete = true;
HXLINE( 536)					return ((Float)0.0);
            				}
            				else {
HXLINE( 537)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 538)						Float elapsedParsingSpritesheets = (elapsed - this->parsingSpritesheetsStartTime);
HXLINE( 539)						bool _hx_tmp5;
HXDLIN( 539)						if (this->parsingSpritesheetsComplete) {
HXLINE( 539)							_hx_tmp5 = (elapsedParsingSpritesheets >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 539)							_hx_tmp5 = false;
            						}
HXDLIN( 539)						if (_hx_tmp5) {
HXLINE( 540)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingStages_dyn();
HXLINE( 541)							return ((Float)0.0);
            						}
            						else {
HXLINE( 544)							if ((this->parsingSpritesheetsPercent < (elapsedParsingSpritesheets / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 545)								return this->parsingSpritesheetsPercent;
            							}
            							else {
HXLINE( 547)								return (elapsedParsingSpritesheets / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 551)						if (this->parsingSpritesheetsComplete) {
HXLINE( 552)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingStages_dyn();
HXLINE( 553)							return ((Float)0.0);
            						}
            					}
            				}
HXLINE( 556)				return this->parsingSpritesheetsPercent;
            			}
            			break;
            			case (int)8: {
HXLINE( 559)				if ((this->parsingStagesPercent < 0)) {
HXLINE( 560)					this->parsingStagesPercent = ((Float)0.0);
HXLINE( 561)					this->parsingStagesStartTime = elapsed;
HXLINE( 575)					this->parsingStagesPercent = ((Float)1.0);
HXLINE( 576)					this->parsingStagesComplete = true;
HXLINE( 577)					return ((Float)0.0);
            				}
            				else {
HXLINE( 578)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 579)						Float elapsedParsingStages = (elapsed - this->parsingStagesStartTime);
HXLINE( 580)						bool _hx_tmp6;
HXDLIN( 580)						if (this->parsingStagesComplete) {
HXLINE( 580)							_hx_tmp6 = (elapsedParsingStages >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 580)							_hx_tmp6 = false;
            						}
HXDLIN( 580)						if (_hx_tmp6) {
HXLINE( 581)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingCharacters_dyn();
HXLINE( 582)							return ((Float)0.0);
            						}
            						else {
HXLINE( 585)							if ((this->parsingStagesPercent < (elapsedParsingStages / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 586)								return this->parsingStagesPercent;
            							}
            							else {
HXLINE( 588)								return (elapsedParsingStages / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 592)						if (this->parsingStagesComplete) {
HXLINE( 593)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingCharacters_dyn();
HXLINE( 594)							return ((Float)0.0);
            						}
            					}
            				}
HXLINE( 597)				return this->parsingStagesPercent;
            			}
            			break;
            			case (int)9: {
HXLINE( 600)				if ((this->parsingCharactersPercent < 0)) {
HXLINE( 601)					this->parsingCharactersPercent = ((Float)0.0);
HXLINE( 602)					this->parsingCharactersStartTime = elapsed;
HXLINE( 616)					this->parsingCharactersPercent = ((Float)1.0);
HXLINE( 617)					this->parsingCharactersComplete = true;
HXLINE( 618)					return ((Float)0.0);
            				}
            				else {
HXLINE( 619)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 620)						Float elapsedParsingCharacters = (elapsed - this->parsingCharactersStartTime);
HXLINE( 621)						bool _hx_tmp7;
HXDLIN( 621)						if (this->parsingCharactersComplete) {
HXLINE( 621)							_hx_tmp7 = (elapsedParsingCharacters >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 621)							_hx_tmp7 = false;
            						}
HXDLIN( 621)						if (_hx_tmp7) {
HXLINE( 622)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingSongs_dyn();
HXLINE( 623)							return ((Float)0.0);
            						}
            						else {
HXLINE( 626)							if ((this->parsingCharactersPercent < (elapsedParsingCharacters / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 627)								return this->parsingCharactersPercent;
            							}
            							else {
HXLINE( 629)								return (elapsedParsingCharacters / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 633)						if (this->parsingStagesComplete) {
HXLINE( 634)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::ParsingSongs_dyn();
HXLINE( 635)							return ((Float)0.0);
            						}
            					}
            				}
HXLINE( 638)				return this->parsingCharactersPercent;
            			}
            			break;
            			case (int)10: {
HXLINE( 641)				if ((this->parsingSongsPercent < 0)) {
HXLINE( 642)					this->parsingSongsPercent = ((Float)0.0);
HXLINE( 643)					this->parsingSongsStartTime = elapsed;
HXLINE( 658)					this->parsingSongsPercent = ((Float)1.0);
HXLINE( 659)					this->parsingSongsComplete = true;
HXLINE( 660)					return ((Float)0.0);
            				}
            				else {
HXLINE( 661)					if ((::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME > 0)) {
HXLINE( 662)						Float elapsedParsingSongs = (elapsed - this->parsingSongsStartTime);
HXLINE( 663)						bool _hx_tmp8;
HXDLIN( 663)						if (this->parsingSongsComplete) {
HXLINE( 663)							_hx_tmp8 = (elapsedParsingSongs >= ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            						}
            						else {
HXLINE( 663)							_hx_tmp8 = false;
            						}
HXDLIN( 663)						if (_hx_tmp8) {
HXLINE( 664)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::Complete_dyn();
HXLINE( 665)							return ((Float)0.0);
            						}
            						else {
HXLINE( 668)							if ((this->parsingSongsPercent < (elapsedParsingSongs / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME))) {
HXLINE( 669)								return this->parsingSongsPercent;
            							}
            							else {
HXLINE( 671)								return (elapsedParsingSongs / ::funkin::util::Constants_obj::PRELOADER_MIN_STAGE_TIME);
            							}
            						}
            					}
            					else {
HXLINE( 675)						if (this->parsingSongsComplete) {
HXLINE( 676)							this->currentState = ::funkin::transition::FunkinPreloaderState_obj::Complete_dyn();
HXLINE( 677)							return ((Float)0.0);
            						}
            						else {
HXLINE( 679)							return this->parsingSongsPercent;
            						}
            					}
            				}
            			}
            			break;
            			case (int)11: {
HXLINE( 684)				if ((this->completeTime < 0)) {
HXLINE( 685)					this->completeTime = elapsed;
            				}
HXLINE( 687)				return ((Float)1.0);
            			}
            			break;
            		}
HXLINE( 301)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinPreloader_obj,updateState,return )

void FunkinPreloader_obj::updateGraphics(Float percent,Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_746_updateGraphics)
HXLINE( 748)		if ((this->completeTime > ((Float)0.0))) {
HXLINE( 749)			Float elapsedFinished = this->renderLogoFadeOut(elapsed);
HXLINE( 751)			if ((elapsedFinished > ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME)) {
HXLINE( 757)				this->immediatelyStartGame();
            			}
            		}
            		else {
HXLINE( 761)			this->renderLogoFadeIn(elapsed);
HXLINE( 764)			Float maxWidth = (( (Float)(this->_width) ) - (::funkin::transition::FunkinPreloader_obj::BAR_PADDING * ( (Float)(2) )));
HXLINE( 765)			Float barWidth = (maxWidth * percent);
HXLINE( 766)			int piecesToRender = ::Std_obj::_hx_int((percent * ( (Float)(this->progressBarPieces->length) )));
HXLINE( 768)			{
HXLINE( 768)				int _g_current = 0;
HXDLIN( 768)				::Array< ::Dynamic> _g_array = this->progressBarPieces;
HXDLIN( 768)				while((_g_current < _g_array->length)){
HXLINE( 768)					 ::openfl::display::Sprite _g_value = _g_array->__get(_g_current).StaticCast<  ::openfl::display::Sprite >();
HXDLIN( 768)					_g_current = (_g_current + 1);
HXDLIN( 768)					int _g_key = (_g_current - 1);
HXDLIN( 768)					int i = _g_key;
HXDLIN( 768)					 ::openfl::display::Sprite piece = _g_value;
HXLINE( 769)					Float _hx_tmp;
HXDLIN( 769)					if ((i <= piecesToRender)) {
HXLINE( 769)						_hx_tmp = ((Float)0.9);
            					}
            					else {
HXLINE( 769)						_hx_tmp = ((Float)0.1);
            					}
HXDLIN( 769)					piece->set_alpha(_hx_tmp);
            				}
            			}
            		}
HXLINE( 776)		int ellipsisCount = (::hx::Mod(::Std_obj::_hx_int((elapsed / ::funkin::transition::FunkinPreloader_obj::ELLIPSIS_TIME)),3) + 1);
HXLINE( 777)		::String ellipsis = HX_("",00,00,00,00);
HXLINE( 778)		{
HXLINE( 778)			int _g = 0;
HXDLIN( 778)			int _g1 = ellipsisCount;
HXDLIN( 778)			while((_g < _g1)){
HXLINE( 778)				_g = (_g + 1);
HXDLIN( 778)				int i1 = (_g - 1);
HXLINE( 779)				ellipsis = (ellipsis + HX_(".",2e,00,00,00));
            			}
            		}
HXLINE( 781)		int percentage = ::Math_obj::floor((percent * ( (Float)(100) )));
HXLINE( 784)		switch((int)(this->currentState->_hx_getIndex())){
            			case (int)1: {
HXLINE( 786)				this->updateProgressLeftText((((HX_("Downloading assets \n1/",71,bb,82,6f) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 787)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 787)				::String _hx_tmp2 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 787)				_hx_tmp1(_hx_tmp2,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),787,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)2: {
HXLINE( 789)				this->updateProgressLeftText((((HX_("Preloading assets \n2/",11,a4,88,19) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 790)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 790)				::String _hx_tmp4 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 790)				_hx_tmp3(_hx_tmp4,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),790,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)3: {
HXLINE( 792)				this->updateProgressLeftText((((HX_("Initializing scripts \n3/",1b,95,52,96) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 793)				 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 793)				::String _hx_tmp6 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 793)				_hx_tmp5(_hx_tmp6,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),793,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)4: {
HXLINE( 795)				this->updateProgressLeftText((((HX_("Caching graphics \n4/",11,83,f4,f1) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 796)				 ::Dynamic _hx_tmp7 = ::haxe::Log_obj::trace;
HXDLIN( 796)				::String _hx_tmp8 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 796)				_hx_tmp7(_hx_tmp8,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),796,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)5: {
HXLINE( 798)				this->updateProgressLeftText((((HX_("Caching audio \n5/",19,1d,d4,7b) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 799)				 ::Dynamic _hx_tmp9 = ::haxe::Log_obj::trace;
HXDLIN( 799)				::String _hx_tmp10 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 799)				_hx_tmp9(_hx_tmp10,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),799,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)6: {
HXLINE( 801)				this->updateProgressLeftText((((HX_("Caching data \n6/",2e,39,2f,b1) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 802)				 ::Dynamic _hx_tmp11 = ::haxe::Log_obj::trace;
HXDLIN( 802)				::String _hx_tmp12 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 802)				_hx_tmp11(_hx_tmp12,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),802,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)7: {
HXLINE( 804)				this->updateProgressLeftText((((HX_("Parsing spritesheets \n7/",cb,5b,1d,63) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 805)				 ::Dynamic _hx_tmp13 = ::haxe::Log_obj::trace;
HXDLIN( 805)				::String _hx_tmp14 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 805)				_hx_tmp13(_hx_tmp14,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),805,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)8: {
HXLINE( 807)				this->updateProgressLeftText((((HX_("Parsing stages \n8/",e6,23,1e,6c) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 808)				 ::Dynamic _hx_tmp15 = ::haxe::Log_obj::trace;
HXDLIN( 808)				::String _hx_tmp16 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 808)				_hx_tmp15(_hx_tmp16,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),808,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)9: {
HXLINE( 810)				this->updateProgressLeftText((((HX_("Parsing characters \n9/",fa,c7,d7,2a) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 811)				 ::Dynamic _hx_tmp17 = ::haxe::Log_obj::trace;
HXDLIN( 811)				::String _hx_tmp18 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 811)				_hx_tmp17(_hx_tmp18,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),811,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)10: {
HXLINE( 813)				this->updateProgressLeftText((((HX_("Parsing songs \n10/",18,a9,46,f5) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 814)				 ::Dynamic _hx_tmp19 = ::haxe::Log_obj::trace;
HXDLIN( 814)				::String _hx_tmp20 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 814)				_hx_tmp19(_hx_tmp20,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),814,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            			break;
            			case (int)11: {
HXLINE( 816)				this->updateProgressLeftText((((((HX_("Finishing up \n",76,7e,83,43) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_("/",2f,00,00,00)) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
            			}
            			break;
            			default:{
HXLINE( 826)				this->updateProgressLeftText((((HX_("Loading \n0/",c5,e8,82,54) + ::funkin::transition::FunkinPreloader_obj::TOTAL_STEPS) + HX_(" ",20,00,00,00)) + ellipsis));
HXLINE( 827)				 ::Dynamic _hx_tmp21 = ::haxe::Log_obj::trace;
HXDLIN( 827)				::String _hx_tmp22 = ((((((HX_("Preloader state: ",2d,5d,7c,30) + ::Std_obj::string(this->currentState)) + HX_(" (",08,1c,00,00)) + percentage) + HX_("%, ",d9,39,1c,00)) + elapsed) + HX_("s)",56,64,00,00));
HXDLIN( 827)				_hx_tmp21(_hx_tmp22,::hx::SourceInfo(HX_("source/funkin/transition/FunkinPreloader.hx",c9,b0,06,74),827,HX_("funkin.transition.FunkinPreloader",29,90,81,9e),HX_("updateGraphics",f4,eb,91,47)));
            			}
            		}
HXLINE( 831)		this->progressRightText->set_text(((HX_("",00,00,00,00) + percentage) + HX_("%",25,00,00,00)));
HXLINE( 833)		this->super::update(percent);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinPreloader_obj,updateGraphics,(void))

void FunkinPreloader_obj::updateProgressLeftText(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_837_updateProgressLeftText)
HXDLIN( 837)		if (::hx::IsNotNull( this->progressLeftText )) {
HXLINE( 838)			if (::hx::IsNull( text )) {
HXLINE( 839)				this->progressLeftText->set_alpha(((Float)0.0));
            			}
            			else {
HXLINE( 840)				if ((this->progressLeftText->get_text() != text)) {
HXLINE( 842)					 ::openfl::text::TextFormat progressLeftTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("DS-Digital",ba,e1,1c,21),32,::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,true,null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 843)					progressLeftTextFormat->align = 3;
HXLINE( 844)					this->progressLeftText->set_defaultTextFormat(progressLeftTextFormat);
HXLINE( 845)					this->progressLeftText->set_text(text);
HXLINE( 847)					 ::openfl::text::TextField _hx_tmp = this->dspText;
HXDLIN( 847)					_hx_tmp->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Quantico",d2,f4,f3,85),20,0,false,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 848)					this->dspText->set_text(HX_("DSP",e1,e1,33,00));
HXLINE( 849)					this->dspText->set_textColor(0);
HXLINE( 851)					 ::openfl::text::TextField _hx_tmp1 = this->fnfText;
HXDLIN( 851)					_hx_tmp1->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Quantico",d2,f4,f3,85),20,0,false,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 852)					this->fnfText->set_text(HX_("FNF",fe,61,35,00));
HXLINE( 853)					this->fnfText->set_textColor(0);
HXLINE( 855)					 ::openfl::text::TextField _hx_tmp2 = this->enhancedText;
HXDLIN( 855)					_hx_tmp2->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Inconsolata Black",9a,0a,bf,23),16,::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,false,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 856)					this->enhancedText->set_text(HX_("ENHANCED",76,58,a2,80));
HXLINE( 857)					this->enhancedText->set_textColor(::funkin::util::Constants_obj::COLOR_PRELOADER_BAR);
HXLINE( 859)					 ::openfl::text::TextField _hx_tmp3 = this->stereoText;
HXDLIN( 859)					_hx_tmp3->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Inconsolata Bold",0a,e1,e1,bf),36,::funkin::util::Constants_obj::COLOR_PRELOADER_BAR,false,null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 860)					this->stereoText->set_text(HX_("NATURAL STEREO",af,7c,49,73));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinPreloader_obj,updateProgressLeftText,(void))

void FunkinPreloader_obj::immediatelyStartGame(){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_866_immediatelyStartGame)
HXDLIN( 866)		this->_loaded = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinPreloader_obj,immediatelyStartGame,(void))

Float FunkinPreloader_obj::renderLogoFadeOut(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_874_renderLogoFadeOut)
HXLINE( 876)		Float elapsedFinished = (elapsed - this->completeTime);
HXLINE( 878)		 ::openfl::display::Bitmap _hx_tmp = this->logo;
HXDLIN( 878)		_hx_tmp->set_alpha((((Float)1.0) - ::funkin::util::MathUtil_obj::easeInOutCirc((elapsedFinished / ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME))));
HXLINE( 879)		 ::openfl::display::Bitmap _hx_tmp1 = this->logo;
HXDLIN( 879)		Float _hx_tmp2 = (((Float)1.0) - ::funkin::util::MathUtil_obj::easeInBack((elapsedFinished / ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME),null()));
HXDLIN( 879)		_hx_tmp1->set_scaleX((_hx_tmp2 * this->ratio));
HXLINE( 880)		 ::openfl::display::Bitmap _hx_tmp3 = this->logo;
HXDLIN( 880)		Float _hx_tmp4 = (((Float)1.0) - ::funkin::util::MathUtil_obj::easeInBack((elapsedFinished / ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME),null()));
HXDLIN( 880)		_hx_tmp3->set_scaleY((_hx_tmp4 * this->ratio));
HXLINE( 881)		 ::openfl::display::Bitmap _hx_tmp5 = this->logo;
HXDLIN( 881)		int _hx_tmp6 = this->_width;
HXDLIN( 881)		_hx_tmp5->set_x(((( (Float)(_hx_tmp6) ) - this->logo->get_width()) / ( (Float)(2) )));
HXLINE( 882)		 ::openfl::display::Bitmap _hx_tmp7 = this->logo;
HXDLIN( 882)		int _hx_tmp8 = this->_height;
HXDLIN( 882)		_hx_tmp7->set_y(((( (Float)(_hx_tmp8) ) - this->logo->get_height()) / ( (Float)(2) )));
HXLINE( 886)		 ::openfl::text::TextField _hx_tmp9 = this->progressLeftText;
HXDLIN( 886)		_hx_tmp9->set_alpha(this->logo->get_alpha());
HXLINE( 887)		 ::openfl::text::TextField _hx_tmp10 = this->progressRightText;
HXDLIN( 887)		_hx_tmp10->set_alpha(this->logo->get_alpha());
HXLINE( 888)		 ::openfl::display::Sprite _hx_tmp11 = this->box;
HXDLIN( 888)		_hx_tmp11->set_alpha(this->logo->get_alpha());
HXLINE( 889)		 ::openfl::text::TextField _hx_tmp12 = this->dspText;
HXDLIN( 889)		_hx_tmp12->set_alpha(this->logo->get_alpha());
HXLINE( 890)		 ::openfl::text::TextField _hx_tmp13 = this->fnfText;
HXDLIN( 890)		_hx_tmp13->set_alpha(this->logo->get_alpha());
HXLINE( 891)		 ::openfl::text::TextField _hx_tmp14 = this->enhancedText;
HXDLIN( 891)		_hx_tmp14->set_alpha(this->logo->get_alpha());
HXLINE( 892)		 ::openfl::text::TextField _hx_tmp15 = this->stereoText;
HXDLIN( 892)		_hx_tmp15->set_alpha(this->logo->get_alpha());
HXLINE( 893)		 ::openfl::display::Sprite _hx_tmp16 = this->progressLines;
HXDLIN( 893)		_hx_tmp16->set_alpha(this->logo->get_alpha());
HXLINE( 895)		{
HXLINE( 895)			int _g = 0;
HXDLIN( 895)			::Array< ::Dynamic> _g1 = this->progressBarPieces;
HXDLIN( 895)			while((_g < _g1->length)){
HXLINE( 895)				 ::openfl::display::Sprite piece = _g1->__get(_g).StaticCast<  ::openfl::display::Sprite >();
HXDLIN( 895)				_g = (_g + 1);
HXLINE( 896)				piece->set_alpha(this->logo->get_alpha());
            			}
            		}
HXLINE( 898)		return elapsedFinished;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinPreloader_obj,renderLogoFadeOut,return )

void FunkinPreloader_obj::renderLogoFadeIn(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_901_renderLogoFadeIn)
HXLINE( 903)		 ::openfl::display::Bitmap _hx_tmp = this->logo;
HXDLIN( 903)		_hx_tmp->set_alpha(::funkin::util::MathUtil_obj::easeInOutCirc((elapsed / ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME)));
HXLINE( 904)		 ::openfl::display::Bitmap _hx_tmp1 = this->logo;
HXDLIN( 904)		Float _hx_tmp2 = ::funkin::util::MathUtil_obj::easeOutBack((elapsed / ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME),null());
HXDLIN( 904)		_hx_tmp1->set_scaleX((_hx_tmp2 * this->ratio));
HXLINE( 905)		 ::openfl::display::Bitmap _hx_tmp3 = this->logo;
HXDLIN( 905)		Float _hx_tmp4 = ::funkin::util::MathUtil_obj::easeOutBack((elapsed / ::funkin::transition::FunkinPreloader_obj::LOGO_FADE_TIME),null());
HXDLIN( 905)		_hx_tmp3->set_scaleY((_hx_tmp4 * this->ratio));
HXLINE( 906)		 ::openfl::display::Bitmap _hx_tmp5 = this->logo;
HXDLIN( 906)		int _hx_tmp6 = this->_width;
HXDLIN( 906)		_hx_tmp5->set_x(((( (Float)(_hx_tmp6) ) - this->logo->get_width()) / ( (Float)(2) )));
HXLINE( 907)		 ::openfl::display::Bitmap _hx_tmp7 = this->logo;
HXDLIN( 907)		int _hx_tmp8 = this->_height;
HXDLIN( 907)		_hx_tmp7->set_y(((( (Float)(_hx_tmp8) ) - this->logo->get_height()) / ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinPreloader_obj,renderLogoFadeIn,(void))

void FunkinPreloader_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_943_destroy)
HXLINE( 945)		this->removeChild(this->logo);
HXLINE( 947)		this->logo = null();
HXLINE( 948)		this->super::destroy();
            	}


void FunkinPreloader_obj::onLoaded(){
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_951_onLoaded)
HXLINE( 952)		this->super::onLoaded();
HXLINE( 956)		this->_loaded = false;
HXLINE( 957)		this->downloadingAssetsComplete = true;
            	}


Float FunkinPreloader_obj::BASE_WIDTH;

Float FunkinPreloader_obj::BAR_PADDING;

int FunkinPreloader_obj::BAR_HEIGHT;

Float FunkinPreloader_obj::LOGO_FADE_TIME;

int FunkinPreloader_obj::TOTAL_STEPS;

Float FunkinPreloader_obj::ELLIPSIS_TIME;


::hx::ObjectPtr< FunkinPreloader_obj > FunkinPreloader_obj::__new() {
	::hx::ObjectPtr< FunkinPreloader_obj > __this = new FunkinPreloader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FunkinPreloader_obj > FunkinPreloader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FunkinPreloader_obj *__this = (FunkinPreloader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinPreloader_obj), true, "funkin.transition.FunkinPreloader"));
	*(void **)__this = FunkinPreloader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FunkinPreloader_obj::FunkinPreloader_obj()
{
}

void FunkinPreloader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunkinPreloader);
	HX_MARK_MEMBER_NAME(ratio,"ratio");
	HX_MARK_MEMBER_NAME(currentState,"currentState");
	HX_MARK_MEMBER_NAME(downloadingAssetsPercent,"downloadingAssetsPercent");
	HX_MARK_MEMBER_NAME(downloadingAssetsComplete,"downloadingAssetsComplete");
	HX_MARK_MEMBER_NAME(preloadingPlayAssetsPercent,"preloadingPlayAssetsPercent");
	HX_MARK_MEMBER_NAME(preloadingPlayAssetsStartTime,"preloadingPlayAssetsStartTime");
	HX_MARK_MEMBER_NAME(preloadingPlayAssetsComplete,"preloadingPlayAssetsComplete");
	HX_MARK_MEMBER_NAME(cachingGraphicsPercent,"cachingGraphicsPercent");
	HX_MARK_MEMBER_NAME(cachingGraphicsStartTime,"cachingGraphicsStartTime");
	HX_MARK_MEMBER_NAME(cachingGraphicsComplete,"cachingGraphicsComplete");
	HX_MARK_MEMBER_NAME(cachingAudioPercent,"cachingAudioPercent");
	HX_MARK_MEMBER_NAME(cachingAudioStartTime,"cachingAudioStartTime");
	HX_MARK_MEMBER_NAME(cachingAudioComplete,"cachingAudioComplete");
	HX_MARK_MEMBER_NAME(cachingDataPercent,"cachingDataPercent");
	HX_MARK_MEMBER_NAME(cachingDataStartTime,"cachingDataStartTime");
	HX_MARK_MEMBER_NAME(cachingDataComplete,"cachingDataComplete");
	HX_MARK_MEMBER_NAME(parsingSpritesheetsPercent,"parsingSpritesheetsPercent");
	HX_MARK_MEMBER_NAME(parsingSpritesheetsStartTime,"parsingSpritesheetsStartTime");
	HX_MARK_MEMBER_NAME(parsingSpritesheetsComplete,"parsingSpritesheetsComplete");
	HX_MARK_MEMBER_NAME(parsingStagesPercent,"parsingStagesPercent");
	HX_MARK_MEMBER_NAME(parsingStagesStartTime,"parsingStagesStartTime");
	HX_MARK_MEMBER_NAME(parsingStagesComplete,"parsingStagesComplete");
	HX_MARK_MEMBER_NAME(parsingCharactersPercent,"parsingCharactersPercent");
	HX_MARK_MEMBER_NAME(parsingCharactersStartTime,"parsingCharactersStartTime");
	HX_MARK_MEMBER_NAME(parsingCharactersComplete,"parsingCharactersComplete");
	HX_MARK_MEMBER_NAME(parsingSongsPercent,"parsingSongsPercent");
	HX_MARK_MEMBER_NAME(parsingSongsStartTime,"parsingSongsStartTime");
	HX_MARK_MEMBER_NAME(parsingSongsComplete,"parsingSongsComplete");
	HX_MARK_MEMBER_NAME(initializingScriptsPercent,"initializingScriptsPercent");
	HX_MARK_MEMBER_NAME(cachingCoreAssetsPercent,"cachingCoreAssetsPercent");
	HX_MARK_MEMBER_NAME(completeTime,"completeTime");
	HX_MARK_MEMBER_NAME(logo,"logo");
	HX_MARK_MEMBER_NAME(progressBarPieces,"progressBarPieces");
	HX_MARK_MEMBER_NAME(progressBar,"progressBar");
	HX_MARK_MEMBER_NAME(progressLeftText,"progressLeftText");
	HX_MARK_MEMBER_NAME(progressRightText,"progressRightText");
	HX_MARK_MEMBER_NAME(dspText,"dspText");
	HX_MARK_MEMBER_NAME(fnfText,"fnfText");
	HX_MARK_MEMBER_NAME(enhancedText,"enhancedText");
	HX_MARK_MEMBER_NAME(stereoText,"stereoText");
	HX_MARK_MEMBER_NAME(vfdShader,"vfdShader");
	HX_MARK_MEMBER_NAME(vfdBitmap,"vfdBitmap");
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(progressLines,"progressLines");
	HX_MARK_MEMBER_NAME(lastElapsed,"lastElapsed");
	 ::flixel::_hx_system::FlxBasePreloader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FunkinPreloader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ratio,"ratio");
	HX_VISIT_MEMBER_NAME(currentState,"currentState");
	HX_VISIT_MEMBER_NAME(downloadingAssetsPercent,"downloadingAssetsPercent");
	HX_VISIT_MEMBER_NAME(downloadingAssetsComplete,"downloadingAssetsComplete");
	HX_VISIT_MEMBER_NAME(preloadingPlayAssetsPercent,"preloadingPlayAssetsPercent");
	HX_VISIT_MEMBER_NAME(preloadingPlayAssetsStartTime,"preloadingPlayAssetsStartTime");
	HX_VISIT_MEMBER_NAME(preloadingPlayAssetsComplete,"preloadingPlayAssetsComplete");
	HX_VISIT_MEMBER_NAME(cachingGraphicsPercent,"cachingGraphicsPercent");
	HX_VISIT_MEMBER_NAME(cachingGraphicsStartTime,"cachingGraphicsStartTime");
	HX_VISIT_MEMBER_NAME(cachingGraphicsComplete,"cachingGraphicsComplete");
	HX_VISIT_MEMBER_NAME(cachingAudioPercent,"cachingAudioPercent");
	HX_VISIT_MEMBER_NAME(cachingAudioStartTime,"cachingAudioStartTime");
	HX_VISIT_MEMBER_NAME(cachingAudioComplete,"cachingAudioComplete");
	HX_VISIT_MEMBER_NAME(cachingDataPercent,"cachingDataPercent");
	HX_VISIT_MEMBER_NAME(cachingDataStartTime,"cachingDataStartTime");
	HX_VISIT_MEMBER_NAME(cachingDataComplete,"cachingDataComplete");
	HX_VISIT_MEMBER_NAME(parsingSpritesheetsPercent,"parsingSpritesheetsPercent");
	HX_VISIT_MEMBER_NAME(parsingSpritesheetsStartTime,"parsingSpritesheetsStartTime");
	HX_VISIT_MEMBER_NAME(parsingSpritesheetsComplete,"parsingSpritesheetsComplete");
	HX_VISIT_MEMBER_NAME(parsingStagesPercent,"parsingStagesPercent");
	HX_VISIT_MEMBER_NAME(parsingStagesStartTime,"parsingStagesStartTime");
	HX_VISIT_MEMBER_NAME(parsingStagesComplete,"parsingStagesComplete");
	HX_VISIT_MEMBER_NAME(parsingCharactersPercent,"parsingCharactersPercent");
	HX_VISIT_MEMBER_NAME(parsingCharactersStartTime,"parsingCharactersStartTime");
	HX_VISIT_MEMBER_NAME(parsingCharactersComplete,"parsingCharactersComplete");
	HX_VISIT_MEMBER_NAME(parsingSongsPercent,"parsingSongsPercent");
	HX_VISIT_MEMBER_NAME(parsingSongsStartTime,"parsingSongsStartTime");
	HX_VISIT_MEMBER_NAME(parsingSongsComplete,"parsingSongsComplete");
	HX_VISIT_MEMBER_NAME(initializingScriptsPercent,"initializingScriptsPercent");
	HX_VISIT_MEMBER_NAME(cachingCoreAssetsPercent,"cachingCoreAssetsPercent");
	HX_VISIT_MEMBER_NAME(completeTime,"completeTime");
	HX_VISIT_MEMBER_NAME(logo,"logo");
	HX_VISIT_MEMBER_NAME(progressBarPieces,"progressBarPieces");
	HX_VISIT_MEMBER_NAME(progressBar,"progressBar");
	HX_VISIT_MEMBER_NAME(progressLeftText,"progressLeftText");
	HX_VISIT_MEMBER_NAME(progressRightText,"progressRightText");
	HX_VISIT_MEMBER_NAME(dspText,"dspText");
	HX_VISIT_MEMBER_NAME(fnfText,"fnfText");
	HX_VISIT_MEMBER_NAME(enhancedText,"enhancedText");
	HX_VISIT_MEMBER_NAME(stereoText,"stereoText");
	HX_VISIT_MEMBER_NAME(vfdShader,"vfdShader");
	HX_VISIT_MEMBER_NAME(vfdBitmap,"vfdBitmap");
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(progressLines,"progressLines");
	HX_VISIT_MEMBER_NAME(lastElapsed,"lastElapsed");
	 ::flixel::_hx_system::FlxBasePreloader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FunkinPreloader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { return ::hx::Val( logo ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ratio") ) { return ::hx::Val( ratio ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dspText") ) { return ::hx::Val( dspText ); }
		if (HX_FIELD_EQ(inName,"fnfText") ) { return ::hx::Val( fnfText ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onLoaded") ) { return ::hx::Val( onLoaded_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"vfdShader") ) { return ::hx::Val( vfdShader ); }
		if (HX_FIELD_EQ(inName,"vfdBitmap") ) { return ::hx::Val( vfdBitmap ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stereoText") ) { return ::hx::Val( stereoText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { return ::hx::Val( progressBar ); }
		if (HX_FIELD_EQ(inName,"lastElapsed") ) { return ::hx::Val( lastElapsed ); }
		if (HX_FIELD_EQ(inName,"updateState") ) { return ::hx::Val( updateState_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { return ::hx::Val( currentState ); }
		if (HX_FIELD_EQ(inName,"completeTime") ) { return ::hx::Val( completeTime ); }
		if (HX_FIELD_EQ(inName,"enhancedText") ) { return ::hx::Val( enhancedText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"progressLines") ) { return ::hx::Val( progressLines ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateGraphics") ) { return ::hx::Val( updateGraphics_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"progressLeftText") ) { return ::hx::Val( progressLeftText ); }
		if (HX_FIELD_EQ(inName,"renderLogoFadeIn") ) { return ::hx::Val( renderLogoFadeIn_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"progressBarPieces") ) { return ::hx::Val( progressBarPieces ); }
		if (HX_FIELD_EQ(inName,"progressRightText") ) { return ::hx::Val( progressRightText ); }
		if (HX_FIELD_EQ(inName,"renderLogoFadeOut") ) { return ::hx::Val( renderLogoFadeOut_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cachingDataPercent") ) { return ::hx::Val( cachingDataPercent ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cachingAudioPercent") ) { return ::hx::Val( cachingAudioPercent ); }
		if (HX_FIELD_EQ(inName,"cachingDataComplete") ) { return ::hx::Val( cachingDataComplete ); }
		if (HX_FIELD_EQ(inName,"parsingSongsPercent") ) { return ::hx::Val( parsingSongsPercent ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cachingAudioComplete") ) { return ::hx::Val( cachingAudioComplete ); }
		if (HX_FIELD_EQ(inName,"cachingDataStartTime") ) { return ::hx::Val( cachingDataStartTime ); }
		if (HX_FIELD_EQ(inName,"parsingStagesPercent") ) { return ::hx::Val( parsingStagesPercent ); }
		if (HX_FIELD_EQ(inName,"parsingSongsComplete") ) { return ::hx::Val( parsingSongsComplete ); }
		if (HX_FIELD_EQ(inName,"immediatelyStartGame") ) { return ::hx::Val( immediatelyStartGame_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"cachingAudioStartTime") ) { return ::hx::Val( cachingAudioStartTime ); }
		if (HX_FIELD_EQ(inName,"parsingStagesComplete") ) { return ::hx::Val( parsingStagesComplete ); }
		if (HX_FIELD_EQ(inName,"parsingSongsStartTime") ) { return ::hx::Val( parsingSongsStartTime ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"cachingGraphicsPercent") ) { return ::hx::Val( cachingGraphicsPercent ); }
		if (HX_FIELD_EQ(inName,"parsingStagesStartTime") ) { return ::hx::Val( parsingStagesStartTime ); }
		if (HX_FIELD_EQ(inName,"updateProgressLeftText") ) { return ::hx::Val( updateProgressLeftText_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"cachingGraphicsComplete") ) { return ::hx::Val( cachingGraphicsComplete ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"downloadingAssetsPercent") ) { return ::hx::Val( downloadingAssetsPercent ); }
		if (HX_FIELD_EQ(inName,"cachingGraphicsStartTime") ) { return ::hx::Val( cachingGraphicsStartTime ); }
		if (HX_FIELD_EQ(inName,"parsingCharactersPercent") ) { return ::hx::Val( parsingCharactersPercent ); }
		if (HX_FIELD_EQ(inName,"cachingCoreAssetsPercent") ) { return ::hx::Val( cachingCoreAssetsPercent ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"downloadingAssetsComplete") ) { return ::hx::Val( downloadingAssetsComplete ); }
		if (HX_FIELD_EQ(inName,"parsingCharactersComplete") ) { return ::hx::Val( parsingCharactersComplete ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"parsingSpritesheetsPercent") ) { return ::hx::Val( parsingSpritesheetsPercent ); }
		if (HX_FIELD_EQ(inName,"parsingCharactersStartTime") ) { return ::hx::Val( parsingCharactersStartTime ); }
		if (HX_FIELD_EQ(inName,"initializingScriptsPercent") ) { return ::hx::Val( initializingScriptsPercent ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"preloadingPlayAssetsPercent") ) { return ::hx::Val( preloadingPlayAssetsPercent ); }
		if (HX_FIELD_EQ(inName,"parsingSpritesheetsComplete") ) { return ::hx::Val( parsingSpritesheetsComplete ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"preloadingPlayAssetsComplete") ) { return ::hx::Val( preloadingPlayAssetsComplete ); }
		if (HX_FIELD_EQ(inName,"parsingSpritesheetsStartTime") ) { return ::hx::Val( parsingSpritesheetsStartTime ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"preloadingPlayAssetsStartTime") ) { return ::hx::Val( preloadingPlayAssetsStartTime ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunkinPreloader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"BASE_WIDTH") ) { outValue = ( BASE_WIDTH ); return true; }
		if (HX_FIELD_EQ(inName,"BAR_HEIGHT") ) { outValue = ( BAR_HEIGHT ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BAR_PADDING") ) { outValue = ( BAR_PADDING ); return true; }
		if (HX_FIELD_EQ(inName,"TOTAL_STEPS") ) { outValue = ( TOTAL_STEPS ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ELLIPSIS_TIME") ) { outValue = ( ELLIPSIS_TIME ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"LOGO_FADE_TIME") ) { outValue = ( LOGO_FADE_TIME ); return true; }
	}
	return false;
}

::hx::Val FunkinPreloader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { logo=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ratio") ) { ratio=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dspText") ) { dspText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fnfText") ) { fnfText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"vfdShader") ) { vfdShader=inValue.Cast<  ::funkin::transition::VFDOverlay >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vfdBitmap") ) { vfdBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stereoText") ) { stereoText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { progressBar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastElapsed") ) { lastElapsed=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { currentState=inValue.Cast<  ::funkin::transition::FunkinPreloaderState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"completeTime") ) { completeTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enhancedText") ) { enhancedText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"progressLines") ) { progressLines=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"progressLeftText") ) { progressLeftText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"progressBarPieces") ) { progressBarPieces=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progressRightText") ) { progressRightText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cachingDataPercent") ) { cachingDataPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cachingAudioPercent") ) { cachingAudioPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachingDataComplete") ) { cachingDataComplete=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingSongsPercent") ) { parsingSongsPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cachingAudioComplete") ) { cachingAudioComplete=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachingDataStartTime") ) { cachingDataStartTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingStagesPercent") ) { parsingStagesPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingSongsComplete") ) { parsingSongsComplete=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"cachingAudioStartTime") ) { cachingAudioStartTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingStagesComplete") ) { parsingStagesComplete=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingSongsStartTime") ) { parsingSongsStartTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"cachingGraphicsPercent") ) { cachingGraphicsPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingStagesStartTime") ) { parsingStagesStartTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"cachingGraphicsComplete") ) { cachingGraphicsComplete=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"downloadingAssetsPercent") ) { downloadingAssetsPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachingGraphicsStartTime") ) { cachingGraphicsStartTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingCharactersPercent") ) { parsingCharactersPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachingCoreAssetsPercent") ) { cachingCoreAssetsPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"downloadingAssetsComplete") ) { downloadingAssetsComplete=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingCharactersComplete") ) { parsingCharactersComplete=inValue.Cast< bool >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"parsingSpritesheetsPercent") ) { parsingSpritesheetsPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingCharactersStartTime") ) { parsingCharactersStartTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"initializingScriptsPercent") ) { initializingScriptsPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"preloadingPlayAssetsPercent") ) { preloadingPlayAssetsPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingSpritesheetsComplete") ) { parsingSpritesheetsComplete=inValue.Cast< bool >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"preloadingPlayAssetsComplete") ) { preloadingPlayAssetsComplete=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parsingSpritesheetsStartTime") ) { parsingSpritesheetsStartTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"preloadingPlayAssetsStartTime") ) { preloadingPlayAssetsStartTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FunkinPreloader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"BASE_WIDTH") ) { BASE_WIDTH=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"BAR_HEIGHT") ) { BAR_HEIGHT=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BAR_PADDING") ) { BAR_PADDING=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TOTAL_STEPS") ) { TOTAL_STEPS=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ELLIPSIS_TIME") ) { ELLIPSIS_TIME=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"LOGO_FADE_TIME") ) { LOGO_FADE_TIME=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void FunkinPreloader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ratio",0b,35,24,e4));
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("downloadingAssetsPercent",c8,49,12,10));
	outFields->push(HX_("downloadingAssetsComplete",56,84,3b,39));
	outFields->push(HX_("preloadingPlayAssetsPercent",f5,c0,08,9c));
	outFields->push(HX_("preloadingPlayAssetsStartTime",bf,47,74,e1));
	outFields->push(HX_("preloadingPlayAssetsComplete",89,54,ed,24));
	outFields->push(HX_("cachingGraphicsPercent",fb,9f,55,cf));
	outFields->push(HX_("cachingGraphicsStartTime",45,74,fb,28));
	outFields->push(HX_("cachingGraphicsComplete",c3,9a,e3,d4));
	outFields->push(HX_("cachingAudioPercent",2e,27,50,9a));
	outFields->push(HX_("cachingAudioStartTime",38,6e,0c,8d));
	outFields->push(HX_("cachingAudioComplete",30,60,1f,a5));
	outFields->push(HX_("cachingDataPercent",fc,87,ab,2d));
	outFields->push(HX_("cachingDataStartTime",86,1e,9c,36));
	outFields->push(HX_("cachingDataComplete",a2,b3,b8,01));
	outFields->push(HX_("parsingSpritesheetsPercent",bc,9e,9e,65));
	outFields->push(HX_("parsingSpritesheetsStartTime",46,65,92,a2));
	outFields->push(HX_("parsingSpritesheetsComplete",e2,84,79,be));
	outFields->push(HX_("parsingStagesPercent",00,35,17,90));
	outFields->push(HX_("parsingStagesStartTime",8a,14,10,cd));
	outFields->push(HX_("parsingStagesComplete",1e,6a,84,bd));
	outFields->push(HX_("parsingCharactersPercent",eb,a0,35,94));
	outFields->push(HX_("parsingCharactersStartTime",35,91,91,e6));
	outFields->push(HX_("parsingCharactersComplete",d3,6b,04,54));
	outFields->push(HX_("parsingSongsPercent",b7,17,64,73));
	outFields->push(HX_("parsingSongsStartTime",01,53,64,c7));
	outFields->push(HX_("parsingSongsComplete",87,e7,7d,bd));
	outFields->push(HX_("initializingScriptsPercent",0a,87,c5,65));
	outFields->push(HX_("cachingCoreAssetsPercent",a4,8c,4f,af));
	outFields->push(HX_("completeTime",66,49,bf,c0));
	outFields->push(HX_("logo",6b,9f,b7,47));
	outFields->push(HX_("progressBarPieces",8b,27,28,78));
	outFields->push(HX_("progressBar",26,bc,55,e6));
	outFields->push(HX_("progressLeftText",21,b9,44,67));
	outFields->push(HX_("progressRightText",3c,2d,24,8a));
	outFields->push(HX_("dspText",4e,d3,20,ee));
	outFields->push(HX_("fnfText",eb,25,81,7f));
	outFields->push(HX_("enhancedText",43,34,3c,32));
	outFields->push(HX_("stereoText",05,24,a6,8f));
	outFields->push(HX_("vfdShader",79,75,77,95));
	outFields->push(HX_("vfdBitmap",43,c6,62,69));
	outFields->push(HX_("box",0b,be,4a,00));
	outFields->push(HX_("progressLines",12,63,a2,3b));
	outFields->push(HX_("lastElapsed",86,4c,6c,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinPreloader_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,ratio),HX_("ratio",0b,35,24,e4)},
	{::hx::fsObject /*  ::funkin::transition::FunkinPreloaderState */ ,(int)offsetof(FunkinPreloader_obj,currentState),HX_("currentState",18,5b,17,cb)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,downloadingAssetsPercent),HX_("downloadingAssetsPercent",c8,49,12,10)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,downloadingAssetsComplete),HX_("downloadingAssetsComplete",56,84,3b,39)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,preloadingPlayAssetsPercent),HX_("preloadingPlayAssetsPercent",f5,c0,08,9c)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,preloadingPlayAssetsStartTime),HX_("preloadingPlayAssetsStartTime",bf,47,74,e1)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,preloadingPlayAssetsComplete),HX_("preloadingPlayAssetsComplete",89,54,ed,24)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingGraphicsPercent),HX_("cachingGraphicsPercent",fb,9f,55,cf)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingGraphicsStartTime),HX_("cachingGraphicsStartTime",45,74,fb,28)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,cachingGraphicsComplete),HX_("cachingGraphicsComplete",c3,9a,e3,d4)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingAudioPercent),HX_("cachingAudioPercent",2e,27,50,9a)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingAudioStartTime),HX_("cachingAudioStartTime",38,6e,0c,8d)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,cachingAudioComplete),HX_("cachingAudioComplete",30,60,1f,a5)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingDataPercent),HX_("cachingDataPercent",fc,87,ab,2d)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingDataStartTime),HX_("cachingDataStartTime",86,1e,9c,36)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,cachingDataComplete),HX_("cachingDataComplete",a2,b3,b8,01)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingSpritesheetsPercent),HX_("parsingSpritesheetsPercent",bc,9e,9e,65)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingSpritesheetsStartTime),HX_("parsingSpritesheetsStartTime",46,65,92,a2)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,parsingSpritesheetsComplete),HX_("parsingSpritesheetsComplete",e2,84,79,be)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingStagesPercent),HX_("parsingStagesPercent",00,35,17,90)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingStagesStartTime),HX_("parsingStagesStartTime",8a,14,10,cd)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,parsingStagesComplete),HX_("parsingStagesComplete",1e,6a,84,bd)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingCharactersPercent),HX_("parsingCharactersPercent",eb,a0,35,94)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingCharactersStartTime),HX_("parsingCharactersStartTime",35,91,91,e6)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,parsingCharactersComplete),HX_("parsingCharactersComplete",d3,6b,04,54)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingSongsPercent),HX_("parsingSongsPercent",b7,17,64,73)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,parsingSongsStartTime),HX_("parsingSongsStartTime",01,53,64,c7)},
	{::hx::fsBool,(int)offsetof(FunkinPreloader_obj,parsingSongsComplete),HX_("parsingSongsComplete",87,e7,7d,bd)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,initializingScriptsPercent),HX_("initializingScriptsPercent",0a,87,c5,65)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,cachingCoreAssetsPercent),HX_("cachingCoreAssetsPercent",a4,8c,4f,af)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,completeTime),HX_("completeTime",66,49,bf,c0)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FunkinPreloader_obj,logo),HX_("logo",6b,9f,b7,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FunkinPreloader_obj,progressBarPieces),HX_("progressBarPieces",8b,27,28,78)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FunkinPreloader_obj,progressBar),HX_("progressBar",26,bc,55,e6)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FunkinPreloader_obj,progressLeftText),HX_("progressLeftText",21,b9,44,67)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FunkinPreloader_obj,progressRightText),HX_("progressRightText",3c,2d,24,8a)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FunkinPreloader_obj,dspText),HX_("dspText",4e,d3,20,ee)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FunkinPreloader_obj,fnfText),HX_("fnfText",eb,25,81,7f)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FunkinPreloader_obj,enhancedText),HX_("enhancedText",43,34,3c,32)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(FunkinPreloader_obj,stereoText),HX_("stereoText",05,24,a6,8f)},
	{::hx::fsObject /*  ::funkin::transition::VFDOverlay */ ,(int)offsetof(FunkinPreloader_obj,vfdShader),HX_("vfdShader",79,75,77,95)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FunkinPreloader_obj,vfdBitmap),HX_("vfdBitmap",43,c6,62,69)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FunkinPreloader_obj,box),HX_("box",0b,be,4a,00)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FunkinPreloader_obj,progressLines),HX_("progressLines",12,63,a2,3b)},
	{::hx::fsFloat,(int)offsetof(FunkinPreloader_obj,lastElapsed),HX_("lastElapsed",86,4c,6c,6f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FunkinPreloader_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &FunkinPreloader_obj::BASE_WIDTH,HX_("BASE_WIDTH",f8,c7,5a,27)},
	{::hx::fsFloat,(void *) &FunkinPreloader_obj::BAR_PADDING,HX_("BAR_PADDING",e5,3f,9d,27)},
	{::hx::fsInt,(void *) &FunkinPreloader_obj::BAR_HEIGHT,HX_("BAR_HEIGHT",33,e4,ec,97)},
	{::hx::fsFloat,(void *) &FunkinPreloader_obj::LOGO_FADE_TIME,HX_("LOGO_FADE_TIME",dc,47,2c,6f)},
	{::hx::fsInt,(void *) &FunkinPreloader_obj::TOTAL_STEPS,HX_("TOTAL_STEPS",6c,d9,3e,b3)},
	{::hx::fsFloat,(void *) &FunkinPreloader_obj::ELLIPSIS_TIME,HX_("ELLIPSIS_TIME",fb,b4,d2,d5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FunkinPreloader_obj_sMemberFields[] = {
	HX_("ratio",0b,35,24,e4),
	HX_("currentState",18,5b,17,cb),
	HX_("downloadingAssetsPercent",c8,49,12,10),
	HX_("downloadingAssetsComplete",56,84,3b,39),
	HX_("preloadingPlayAssetsPercent",f5,c0,08,9c),
	HX_("preloadingPlayAssetsStartTime",bf,47,74,e1),
	HX_("preloadingPlayAssetsComplete",89,54,ed,24),
	HX_("cachingGraphicsPercent",fb,9f,55,cf),
	HX_("cachingGraphicsStartTime",45,74,fb,28),
	HX_("cachingGraphicsComplete",c3,9a,e3,d4),
	HX_("cachingAudioPercent",2e,27,50,9a),
	HX_("cachingAudioStartTime",38,6e,0c,8d),
	HX_("cachingAudioComplete",30,60,1f,a5),
	HX_("cachingDataPercent",fc,87,ab,2d),
	HX_("cachingDataStartTime",86,1e,9c,36),
	HX_("cachingDataComplete",a2,b3,b8,01),
	HX_("parsingSpritesheetsPercent",bc,9e,9e,65),
	HX_("parsingSpritesheetsStartTime",46,65,92,a2),
	HX_("parsingSpritesheetsComplete",e2,84,79,be),
	HX_("parsingStagesPercent",00,35,17,90),
	HX_("parsingStagesStartTime",8a,14,10,cd),
	HX_("parsingStagesComplete",1e,6a,84,bd),
	HX_("parsingCharactersPercent",eb,a0,35,94),
	HX_("parsingCharactersStartTime",35,91,91,e6),
	HX_("parsingCharactersComplete",d3,6b,04,54),
	HX_("parsingSongsPercent",b7,17,64,73),
	HX_("parsingSongsStartTime",01,53,64,c7),
	HX_("parsingSongsComplete",87,e7,7d,bd),
	HX_("initializingScriptsPercent",0a,87,c5,65),
	HX_("cachingCoreAssetsPercent",a4,8c,4f,af),
	HX_("completeTime",66,49,bf,c0),
	HX_("logo",6b,9f,b7,47),
	HX_("progressBarPieces",8b,27,28,78),
	HX_("progressBar",26,bc,55,e6),
	HX_("progressLeftText",21,b9,44,67),
	HX_("progressRightText",3c,2d,24,8a),
	HX_("dspText",4e,d3,20,ee),
	HX_("fnfText",eb,25,81,7f),
	HX_("enhancedText",43,34,3c,32),
	HX_("stereoText",05,24,a6,8f),
	HX_("vfdShader",79,75,77,95),
	HX_("vfdBitmap",43,c6,62,69),
	HX_("box",0b,be,4a,00),
	HX_("progressLines",12,63,a2,3b),
	HX_("create",fc,66,0f,7c),
	HX_("lastElapsed",86,4c,6c,6f),
	HX_("update",09,86,05,87),
	HX_("updateState",48,df,a3,69),
	HX_("updateGraphics",f4,eb,91,47),
	HX_("updateProgressLeftText",4a,7d,c3,5c),
	HX_("immediatelyStartGame",d6,34,35,be),
	HX_("renderLogoFadeOut",91,34,77,0f),
	HX_("renderLogoFadeIn",42,79,17,65),
	HX_("destroy",fa,2c,86,24),
	HX_("onLoaded",84,3e,1c,38),
	::String(null()) };

static void FunkinPreloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunkinPreloader_obj::BASE_WIDTH,"BASE_WIDTH");
	HX_MARK_MEMBER_NAME(FunkinPreloader_obj::BAR_PADDING,"BAR_PADDING");
	HX_MARK_MEMBER_NAME(FunkinPreloader_obj::BAR_HEIGHT,"BAR_HEIGHT");
	HX_MARK_MEMBER_NAME(FunkinPreloader_obj::LOGO_FADE_TIME,"LOGO_FADE_TIME");
	HX_MARK_MEMBER_NAME(FunkinPreloader_obj::TOTAL_STEPS,"TOTAL_STEPS");
	HX_MARK_MEMBER_NAME(FunkinPreloader_obj::ELLIPSIS_TIME,"ELLIPSIS_TIME");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunkinPreloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunkinPreloader_obj::BASE_WIDTH,"BASE_WIDTH");
	HX_VISIT_MEMBER_NAME(FunkinPreloader_obj::BAR_PADDING,"BAR_PADDING");
	HX_VISIT_MEMBER_NAME(FunkinPreloader_obj::BAR_HEIGHT,"BAR_HEIGHT");
	HX_VISIT_MEMBER_NAME(FunkinPreloader_obj::LOGO_FADE_TIME,"LOGO_FADE_TIME");
	HX_VISIT_MEMBER_NAME(FunkinPreloader_obj::TOTAL_STEPS,"TOTAL_STEPS");
	HX_VISIT_MEMBER_NAME(FunkinPreloader_obj::ELLIPSIS_TIME,"ELLIPSIS_TIME");
};

#endif

::hx::Class FunkinPreloader_obj::__mClass;

static ::String FunkinPreloader_obj_sStaticFields[] = {
	HX_("BASE_WIDTH",f8,c7,5a,27),
	HX_("BAR_PADDING",e5,3f,9d,27),
	HX_("BAR_HEIGHT",33,e4,ec,97),
	HX_("LOGO_FADE_TIME",dc,47,2c,6f),
	HX_("TOTAL_STEPS",6c,d9,3e,b3),
	HX_("ELLIPSIS_TIME",fb,b4,d2,d5),
	::String(null())
};

void FunkinPreloader_obj::__register()
{
	FunkinPreloader_obj _hx_dummy;
	FunkinPreloader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.transition.FunkinPreloader",29,90,81,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunkinPreloader_obj::__GetStatic;
	__mClass->mSetStaticField = &FunkinPreloader_obj::__SetStatic;
	__mClass->mMarkFunc = FunkinPreloader_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FunkinPreloader_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinPreloader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinPreloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunkinPreloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinPreloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinPreloader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FunkinPreloader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_35_boot)
HXDLIN(  35)		BASE_WIDTH = ((Float)1280);
            	}
{
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_37_boot)
HXDLIN(  37)		BAR_PADDING = ((Float)20);
            	}
{
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_38_boot)
HXDLIN(  38)		BAR_HEIGHT = 12;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_40_boot)
HXDLIN(  40)		LOGO_FADE_TIME = ((Float)2.5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_744_boot)
HXDLIN( 744)		TOTAL_STEPS = 11;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cfbb4d8a617d4c69_745_boot)
HXDLIN( 745)		ELLIPSIS_TIME = ((Float)0.5);
            	}
}

} // end namespace funkin
} // end namespace transition
