// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_funkin_util_MathUtil
#include <funkin/util/MathUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_23_coolLerp,"funkin.util.MathUtil","coolLerp",0x4bcf4bf5,"funkin.util.MathUtil.coolLerp","funkin/util/MathUtil.hx",23,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_33_cameraLerp,"funkin.util.MathUtil","cameraLerp",0x03526511,"funkin.util.MathUtil.cameraLerp","funkin/util/MathUtil.hx",33,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_43_logBase,"funkin.util.MathUtil","logBase",0xe46cda40,"funkin.util.MathUtil.logBase","funkin/util/MathUtil.hx",43,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_46_easeInOutCirc,"funkin.util.MathUtil","easeInOutCirc",0xc5299e1d,"funkin.util.MathUtil.easeInOutCirc","funkin/util/MathUtil.hx",46,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_53_easeInOutBack,"funkin.util.MathUtil","easeInOutBack",0xc47a486d,"funkin.util.MathUtil.easeInOutBack","funkin/util/MathUtil.hx",53,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_60_easeInBack,"funkin.util.MathUtil","easeInBack",0xec0a888f,"funkin.util.MathUtil.easeInBack","funkin/util/MathUtil.hx",60,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_66_easeOutBack,"funkin.util.MathUtil","easeOutBack",0x18b71c92,"funkin.util.MathUtil.easeOutBack","funkin/util/MathUtil.hx",66,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_78_exp2,"funkin.util.MathUtil","exp2",0xd939c88a,"funkin.util.MathUtil.exp2","funkin/util/MathUtil.hx",78,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_90_lerp,"funkin.util.MathUtil","lerp",0xddcbde0c,"funkin.util.MathUtil.lerp","funkin/util/MathUtil.hx",90,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_103_smoothLerp,"funkin.util.MathUtil","smoothLerp",0xd20b1f1a,"funkin.util.MathUtil.smoothLerp","funkin/util/MathUtil.hx",103,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_11_boot,"funkin.util.MathUtil","boot",0xd7374fc7,"funkin.util.MathUtil.boot","funkin/util/MathUtil.hx",11,0xb4e3e705)
HX_LOCAL_STACK_FRAME(_hx_pos_faaf82c3141f1cf5_12_boot,"funkin.util.MathUtil","boot",0xd7374fc7,"funkin.util.MathUtil.boot","funkin/util/MathUtil.hx",12,0xb4e3e705)
namespace funkin{
namespace util{

void MathUtil_obj::__construct() { }

Dynamic MathUtil_obj::__CreateEmpty() { return new MathUtil_obj; }

void *MathUtil_obj::_hx_vtable = 0;

Dynamic MathUtil_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MathUtil_obj > _hx_result = new MathUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MathUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ff8d0fd;
}

Float MathUtil_obj::E;

int MathUtil_obj::bitches;

Float MathUtil_obj::coolLerp(Float base,Float target,Float ratio){
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_23_coolLerp)
HXDLIN(  23)		return (base + (::funkin::util::MathUtil_obj::cameraLerp(ratio) * (target - base)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathUtil_obj,coolLerp,return )

Float MathUtil_obj::cameraLerp(Float lerp){
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_33_cameraLerp)
HXDLIN(  33)		return (lerp * (::flixel::FlxG_obj::elapsed / ((Float)0.0166666666666666664)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathUtil_obj,cameraLerp,return )

Float MathUtil_obj::logBase(Float base,Float value){
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_43_logBase)
HXDLIN(  43)		return (::Math_obj::log(value) / ::Math_obj::log(base));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtil_obj,logBase,return )

Float MathUtil_obj::easeInOutCirc(Float x){
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_46_easeInOutCirc)
HXLINE(  47)		if ((x <= ((Float)0.0))) {
HXLINE(  47)			return ((Float)0.0);
            		}
HXLINE(  48)		if ((x >= ((Float)1.0))) {
HXLINE(  48)			return ((Float)1.0);
            		}
HXLINE(  49)		Float result;
HXDLIN(  49)		if ((x < ((Float)0.5))) {
HXLINE(  49)			result = ((( (Float)(1) ) - ::Math_obj::sqrt((( (Float)(1) ) - ((( (Float)(4) ) * x) * x)))) / ( (Float)(2) ));
            		}
            		else {
HXLINE(  49)			result = ((::Math_obj::sqrt((( (Float)(1) ) - ((( (Float)(4) ) * (( (Float)(1) ) - x)) * (( (Float)(1) ) - x)))) + 1) / ( (Float)(2) ));
            		}
HXLINE(  50)		if ((result == ::Math_obj::NaN)) {
HXLINE(  50)			return ((Float)1.0);
            		}
            		else {
HXLINE(  50)			return result;
            		}
HXDLIN(  50)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathUtil_obj,easeInOutCirc,return )

Float MathUtil_obj::easeInOutBack(Float x, ::Dynamic __o_c){
            		 ::Dynamic c = __o_c;
            		if (::hx::IsNull(__o_c)) c = ((Float)1.70158);
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_53_easeInOutBack)
HXLINE(  54)		if ((x <= ((Float)0.0))) {
HXLINE(  54)			return ((Float)0.0);
            		}
HXLINE(  55)		if ((x >= ((Float)1.0))) {
HXLINE(  55)			return ((Float)1.0);
            		}
HXLINE(  56)		Float result;
HXDLIN(  56)		if ((x < ((Float)0.5))) {
HXLINE(  56)			result = ((((( (Float)(2) ) * x) * x) * ((((c + 1) * ( (Float)(2) )) * x) - ( (Float)(c) ))) / ( (Float)(2) ));
            		}
            		else {
HXLINE(  56)			result = ((( (Float)(1) ) - (((( (Float)(2) ) * (( (Float)(1) ) - x)) * (( (Float)(1) ) - x)) * ((((c + 1) * ( (Float)(2) )) * (( (Float)(1) ) - x)) - ( (Float)(c) )))) / ( (Float)(2) ));
            		}
HXLINE(  57)		if ((result == ::Math_obj::NaN)) {
HXLINE(  57)			return ((Float)1.0);
            		}
            		else {
HXLINE(  57)			return result;
            		}
HXDLIN(  57)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtil_obj,easeInOutBack,return )

Float MathUtil_obj::easeInBack(Float x, ::Dynamic __o_c){
            		 ::Dynamic c = __o_c;
            		if (::hx::IsNull(__o_c)) c = ((Float)1.70158);
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_60_easeInBack)
HXLINE(  61)		if ((x <= ((Float)0.0))) {
HXLINE(  61)			return ((Float)0.0);
            		}
HXLINE(  62)		if ((x >= ((Float)1.0))) {
HXLINE(  62)			return ((Float)1.0);
            		}
HXLINE(  63)		return (((((1 + c) * x) * x) * x) - ((( (Float)(c) ) * x) * x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtil_obj,easeInBack,return )

Float MathUtil_obj::easeOutBack(Float x, ::Dynamic __o_c){
            		 ::Dynamic c = __o_c;
            		if (::hx::IsNull(__o_c)) c = ((Float)1.70158);
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_66_easeOutBack)
HXLINE(  67)		if ((x <= ((Float)0.0))) {
HXLINE(  67)			return ((Float)0.0);
            		}
HXLINE(  68)		if ((x >= ((Float)1.0))) {
HXLINE(  68)			return ((Float)1.0);
            		}
HXLINE(  69)		return ((1 + ((c + 1) * ::Math_obj::pow((x - ( (Float)(1) )),( (Float)(3) )))) + (( (Float)(c) ) * ::Math_obj::pow((x - ( (Float)(1) )),( (Float)(2) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtil_obj,easeOutBack,return )

Float MathUtil_obj::exp2(Float x){
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_78_exp2)
HXDLIN(  78)		return ::Math_obj::pow(( (Float)(2) ),x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MathUtil_obj,exp2,return )

Float MathUtil_obj::lerp(Float base,Float target,Float progress){
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_90_lerp)
HXDLIN(  90)		return (base + (progress * (target - base)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MathUtil_obj,lerp,return )

Float MathUtil_obj::smoothLerp(Float current,Float target,Float elapsed,Float duration,::hx::Null< Float >  __o_precision){
            		Float precision = __o_precision.Default(((Float)0.01));
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_103_smoothLerp)
HXLINE( 107)		if ((current == target)) {
HXLINE( 107)			return target;
            		}
HXLINE( 109)		Float result = ::funkin::util::MathUtil_obj::lerp(current,target,(( (Float)(1) ) - ::Math_obj::pow(precision,(elapsed / duration))));
HXLINE( 113)		if ((::Math_obj::abs((result - target)) < (precision * target))) {
HXLINE( 113)			result = target;
            		}
HXLINE( 114)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(MathUtil_obj,smoothLerp,return )


MathUtil_obj::MathUtil_obj()
{
}

bool MathUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"E") ) { outValue = ( E ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"exp2") ) { outValue = exp2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bitches") ) { outValue = ( bitches ); return true; }
		if (HX_FIELD_EQ(inName,"logBase") ) { outValue = logBase_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"coolLerp") ) { outValue = coolLerp_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cameraLerp") ) { outValue = cameraLerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"easeInBack") ) { outValue = easeInBack_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"smoothLerp") ) { outValue = smoothLerp_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"easeOutBack") ) { outValue = easeOutBack_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"easeInOutCirc") ) { outValue = easeInOutCirc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"easeInOutBack") ) { outValue = easeInOutBack_dyn(); return true; }
	}
	return false;
}

bool MathUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"E") ) { E=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bitches") ) { bitches=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MathUtil_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo MathUtil_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &MathUtil_obj::E,HX_("E",45,00,00,00)},
	{::hx::fsInt,(void *) &MathUtil_obj::bitches,HX_("bitches",a0,05,eb,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void MathUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathUtil_obj::E,"E");
	HX_MARK_MEMBER_NAME(MathUtil_obj::bitches,"bitches");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathUtil_obj::E,"E");
	HX_VISIT_MEMBER_NAME(MathUtil_obj::bitches,"bitches");
};

#endif

::hx::Class MathUtil_obj::__mClass;

static ::String MathUtil_obj_sStaticFields[] = {
	HX_("E",45,00,00,00),
	HX_("bitches",a0,05,eb,f2),
	HX_("coolLerp",e0,91,bd,e9),
	HX_("cameraLerp",bc,3b,ce,ad),
	HX_("logBase",b5,fa,da,66),
	HX_("easeInOutCirc",52,04,3f,7e),
	HX_("easeInOutBack",a2,ae,8f,7d),
	HX_("easeInBack",3a,5f,86,96),
	HX_("easeOutBack",87,1b,97,9a),
	HX_("exp2",f5,fc,1d,43),
	HX_("lerp",77,12,b0,47),
	HX_("smoothLerp",c5,f5,86,7c),
	::String(null())
};

void MathUtil_obj::__register()
{
	MathUtil_obj _hx_dummy;
	MathUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkin.util.MathUtil",f9,3c,16,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &MathUtil_obj::__SetStatic;
	__mClass->mMarkFunc = MathUtil_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MathUtil_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MathUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathUtil_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MathUtil_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_11_boot)
HXDLIN(  11)		E = ((Float)2.71828182845904523536);
            	}
{
            	HX_STACKFRAME(&_hx_pos_faaf82c3141f1cf5_12_boot)
HXDLIN(  12)		bitches = 0;
            	}
}

} // end namespace funkin
} // end namespace util
