// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_880c0549bfe0a230_41_new,"flixel.addons.display.FlxRuntimeShader","new",0x1cb50fd2,"flixel.addons.display.FlxRuntimeShader.new","flixel/addons/display/FlxRuntimeShader.hx",41,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_62_setFloat,"flixel.addons.display.FlxRuntimeShader","setFloat",0x8534b1e8,"flixel.addons.display.FlxRuntimeShader.setFloat","flixel/addons/display/FlxRuntimeShader.hx",62,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_80_getFloat,"flixel.addons.display.FlxRuntimeShader","getFloat",0xd6d75874,"flixel.addons.display.FlxRuntimeShader.getFloat","flixel/addons/display/FlxRuntimeShader.hx",80,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_99_setFloatArray,"flixel.addons.display.FlxRuntimeShader","setFloatArray",0xc4b24291,"flixel.addons.display.FlxRuntimeShader.setFloatArray","flixel/addons/display/FlxRuntimeShader.hx",99,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_117_getFloatArray,"flixel.addons.display.FlxRuntimeShader","getFloatArray",0x7fac6085,"flixel.addons.display.FlxRuntimeShader.getFloatArray","flixel/addons/display/FlxRuntimeShader.hx",117,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_136_setInt,"flixel.addons.display.FlxRuntimeShader","setInt",0x75720e3b,"flixel.addons.display.FlxRuntimeShader.setInt","flixel/addons/display/FlxRuntimeShader.hx",136,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_154_getInt,"flixel.addons.display.FlxRuntimeShader","getInt",0xa929b9c7,"flixel.addons.display.FlxRuntimeShader.getInt","flixel/addons/display/FlxRuntimeShader.hx",154,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_173_setIntArray,"flixel.addons.display.FlxRuntimeShader","setIntArray",0xdc26595e,"flixel.addons.display.FlxRuntimeShader.setIntArray","flixel/addons/display/FlxRuntimeShader.hx",173,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_191_getIntArray,"flixel.addons.display.FlxRuntimeShader","getIntArray",0xd1b95252,"flixel.addons.display.FlxRuntimeShader.getIntArray","flixel/addons/display/FlxRuntimeShader.hx",191,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_210_setBool,"flixel.addons.display.FlxRuntimeShader","setBool",0x49baa55e,"flixel.addons.display.FlxRuntimeShader.setBool","flixel/addons/display/FlxRuntimeShader.hx",210,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_228_getBool,"flixel.addons.display.FlxRuntimeShader","getBool",0x56b91452,"flixel.addons.display.FlxRuntimeShader.getBool","flixel/addons/display/FlxRuntimeShader.hx",228,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_247_setBoolArray,"flixel.addons.display.FlxRuntimeShader","setBoolArray",0x64d8035b,"flixel.addons.display.FlxRuntimeShader.setBoolArray","flixel/addons/display/FlxRuntimeShader.hx",247,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_265_getBoolArray,"flixel.addons.display.FlxRuntimeShader","getBoolArray",0x4fdedfe7,"flixel.addons.display.FlxRuntimeShader.getBoolArray","flixel/addons/display/FlxRuntimeShader.hx",265,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_284_setSampler2D,"flixel.addons.display.FlxRuntimeShader","setSampler2D",0x46034526,"flixel.addons.display.FlxRuntimeShader.setSampler2D","flixel/addons/display/FlxRuntimeShader.hx",284,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_303_getSampler2D,"flixel.addons.display.FlxRuntimeShader","getSampler2D",0x310a21b2,"flixel.addons.display.FlxRuntimeShader.getSampler2D","flixel/addons/display/FlxRuntimeShader.hx",303,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_320_toString,"flixel.addons.display.FlxRuntimeShader","toString",0xacd853fa,"flixel.addons.display.FlxRuntimeShader.toString","flixel/addons/display/FlxRuntimeShader.hx",320,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_325___processGLData,"flixel.addons.display.FlxRuntimeShader","__processGLData",0x94f3b1f0,"flixel.addons.display.FlxRuntimeShader.__processGLData","flixel/addons/display/FlxRuntimeShader.hx",325,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_511_set_glFragmentSource,"flixel.addons.display.FlxRuntimeShader","set_glFragmentSource",0x91b5229b,"flixel.addons.display.FlxRuntimeShader.set_glFragmentSource","flixel/addons/display/FlxRuntimeShader.hx",511,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_523_set_glVertexSource,"flixel.addons.display.FlxRuntimeShader","set_glVertexSource",0x59e3712f,"flixel.addons.display.FlxRuntimeShader.set_glVertexSource","flixel/addons/display/FlxRuntimeShader.hx",523,0x1150365d)
namespace flixel{
namespace addons{
namespace display{

void FlxRuntimeShader_obj::__construct(::String fragmentSource,::String vertexSource){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_41_new)
HXLINE( 183)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 185)			this->_hx___glFragmentSource = HX_("varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;  // TODO: Is this still needed? Apparently, yes!\n\t\tuniform bool hasColorTransform;\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!(hasTransform || openfl_HasColorTransform))\n\t\t\t\treturn color;\n\t\t\t\n\t\t\tif (color.a == 0.0)\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t\tif (openfl_HasColorTransform || hasColorTransform)\n\t\t\t{\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tvec4 mult = vec4 (openfl_ColorMultiplierv.rgb, 1.0);\n\t\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * mult), 0.0, 1.0);\n\t\t\t\t\n\t\t\t\tif (color.a == 0.0)\n\t\t\t\t\treturn vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t\treturn vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\t\n\t\t\treturn color * openfl_Alphav;\n\t\t}\n\t\n\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\n\n\n\t\t}",38,d0,b4,e9);
            		}
HXLINE( 175)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 177)			this->_hx___glVertexSource = HX_("attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\n\t\tif (hasColorTransform)\n\t\t{\n\t\t\tif (openfl_HasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = (openfl_ColorOffsetv * colorMultiplier) + (colorOffset / 255.0);\n\t\t\t\topenfl_ColorMultiplierv *= colorMultiplier;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}\n\t\n\n\n\t\t}",09,23,04,f1);
            		}
HXLINE(  42)		bool _hx_tmp;
HXDLIN(  42)		if (::hx::IsNotNull( fragmentSource )) {
HXLINE(  42)			_hx_tmp = (fragmentSource.length > 0);
            		}
            		else {
HXLINE(  42)			_hx_tmp = false;
            		}
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  43)			this->set_glFragmentSource(fragmentSource);
            		}
            		else {
HXLINE(  45)			this->set_glFragmentSource(HX_("#pragma header\n\n\t\tvoid main(void) {\n\n\t\t\t#pragma body\n\n\t\t}",f0,2b,b5,32));
            		}
HXLINE(  47)		bool _hx_tmp1;
HXDLIN(  47)		if (::hx::IsNotNull( vertexSource )) {
HXLINE(  47)			_hx_tmp1 = (vertexSource.length > 0);
            		}
            		else {
HXLINE(  47)			_hx_tmp1 = false;
            		}
HXDLIN(  47)		if (_hx_tmp1) {
HXLINE(  48)			this->set_glVertexSource(vertexSource);
            		}
            		else {
HXLINE(  50)			this->set_glVertexSource(HX_("#pragma header\n\n\t\tvoid main(void) {\n\n\t\t\t#pragma body\n\n\t\t}",f0,2b,b5,32));
            		}
HXLINE(  52)		super::__construct();
HXLINE(  31)		this->_hx___isGenerated = true;
HXDLIN(  31)		this->_hx___initGL();
            	}

Dynamic FlxRuntimeShader_obj::__CreateEmpty() { return new FlxRuntimeShader_obj; }

void *FlxRuntimeShader_obj::_hx_vtable = 0;

Dynamic FlxRuntimeShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxRuntimeShader_obj > _hx_result = new FlxRuntimeShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxRuntimeShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1efca5b6) {
		if (inClassId<=(int)0x04f93fcd) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
		} else {
			return inClassId==(int)0x1efca5b6;
		}
	} else {
		return inClassId==(int)0x7517ccbe || inClassId==(int)0x78d8d737;
	}
}

void FlxRuntimeShader_obj::setFloat(::String name,Float value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_62_setFloat)
HXLINE(  63)		 ::openfl::display::ShaderParameter_Float shaderParameter = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE(  65)		if (::hx::IsNull( shaderParameter )) {
HXLINE(  67)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float parameter \"",cc,85,ce,89) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),67,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setFloat",9a,2e,cb,10)));
HXLINE(  68)			return;
            		}
HXLINE(  71)		shaderParameter->value = ::Array_obj< Float >::__new(1)->init(0,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setFloat,(void))

 ::Dynamic FlxRuntimeShader_obj::getFloat(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_80_getFloat)
HXLINE(  81)		 ::openfl::display::ShaderParameter_Float shaderParameter = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE(  83)		if (::hx::IsNull( shaderParameter )) {
HXLINE(  85)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float parameter \"",cc,85,ce,89) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),85,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getFloat",26,d5,6d,62)));
HXLINE(  86)			return null();
            		}
HXLINE(  89)		return shaderParameter->value->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getFloat,return )

void FlxRuntimeShader_obj::setFloatArray(::String name,::Array< Float > value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_99_setFloatArray)
HXLINE( 100)		 ::openfl::display::ShaderParameter_Float shaderParameter = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 102)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 104)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float[] parameter \"",ae,82,a2,e7) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),104,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setFloatArray",9f,80,a0,e5)));
HXLINE( 105)			return;
            		}
HXLINE( 108)		shaderParameter->value = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setFloatArray,(void))

::Array< Float > FlxRuntimeShader_obj::getFloatArray(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_117_getFloatArray)
HXLINE( 118)		 ::openfl::display::ShaderParameter_Float shaderParameter = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 120)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 122)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float[] parameter \"",ae,82,a2,e7) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),122,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getFloatArray",93,9e,9a,a0)));
HXLINE( 123)			return null();
            		}
HXLINE( 126)		return shaderParameter->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getFloatArray,return )

void FlxRuntimeShader_obj::setInt(::String name,int value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_136_setInt)
HXLINE( 137)		 ::openfl::display::ShaderParameter_Int shaderParameter = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 139)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 141)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int parameter \"",5f,aa,84,22) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),141,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setInt",6d,9a,67,6f)));
HXLINE( 142)			return;
            		}
HXLINE( 145)		shaderParameter->value = ::Array_obj< int >::__new(1)->init(0,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setInt,(void))

 ::Dynamic FlxRuntimeShader_obj::getInt(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_154_getInt)
HXLINE( 155)		 ::openfl::display::ShaderParameter_Int shaderParameter = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 157)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 159)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int parameter \"",5f,aa,84,22) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),159,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getInt",f9,45,1f,a3)));
HXLINE( 160)			return null();
            		}
HXLINE( 163)		return shaderParameter->value->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getInt,return )

void FlxRuntimeShader_obj::setIntArray(::String name,::Array< int > value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_173_setIntArray)
HXLINE( 174)		 ::openfl::display::ShaderParameter_Int shaderParameter = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 176)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 178)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int[] parameter \"",01,32,99,b5) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),178,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setIntArray",ec,57,6d,9e)));
HXLINE( 179)			return;
            		}
HXLINE( 182)		shaderParameter->value = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setIntArray,(void))

::Array< int > FlxRuntimeShader_obj::getIntArray(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_191_getIntArray)
HXLINE( 192)		 ::openfl::display::ShaderParameter_Int shaderParameter = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 194)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 196)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int[] parameter \"",01,32,99,b5) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),196,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getIntArray",e0,50,00,94)));
HXLINE( 197)			return null();
            		}
HXLINE( 200)		return shaderParameter->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getIntArray,return )

void FlxRuntimeShader_obj::setBool(::String name,bool value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_210_setBool)
HXLINE( 211)		 ::openfl::display::ShaderParameter_Bool shaderParameter = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 213)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 215)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool parameter \"",30,ac,e6,93) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),215,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setBool",ec,c4,9f,06)));
HXLINE( 216)			return;
            		}
HXLINE( 219)		shaderParameter->value = ::Array_obj< bool >::__new(1)->init(0,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setBool,(void))

 ::Dynamic FlxRuntimeShader_obj::getBool(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_228_getBool)
HXLINE( 229)		 ::openfl::display::ShaderParameter_Bool shaderParameter = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 231)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 233)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool parameter \"",30,ac,e6,93) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),233,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getBool",e0,33,9e,13)));
HXLINE( 234)			return null();
            		}
HXLINE( 237)		return shaderParameter->value->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getBool,return )

void FlxRuntimeShader_obj::setBoolArray(::String name,::Array< bool > value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_247_setBoolArray)
HXLINE( 248)		 ::openfl::display::ShaderParameter_Bool shaderParameter = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 250)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 252)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool[] parameter \"",12,0a,dc,c4) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),252,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setBoolArray",0d,c1,af,a0)));
HXLINE( 253)			return;
            		}
HXLINE( 256)		shaderParameter->value = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setBoolArray,(void))

::Array< bool > FlxRuntimeShader_obj::getBoolArray(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_265_getBoolArray)
HXLINE( 266)		 ::openfl::display::ShaderParameter_Bool shaderParameter = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 268)		if (::hx::IsNull( shaderParameter )) {
HXLINE( 270)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool[] parameter \"",12,0a,dc,c4) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),270,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getBoolArray",99,9d,b6,8b)));
HXLINE( 271)			return null();
            		}
HXLINE( 274)		return shaderParameter->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getBoolArray,return )

void FlxRuntimeShader_obj::setSampler2D(::String name, ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_284_setSampler2D)
HXLINE( 285)		 ::openfl::display::ShaderInput_openfl_display_BitmapData shaderInput = ( ( ::openfl::display::ShaderInput_openfl_display_BitmapData)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 287)		if (::hx::IsNull( shaderInput )) {
HXLINE( 289)			::flixel::FlxG_obj::log->advanced(((HX_("Shader sampler2D input \"",ab,ab,9f,60) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),289,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("setSampler2D",d8,02,db,81)));
HXLINE( 290)			return;
            		}
HXLINE( 293)		shaderInput->input = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setSampler2D,(void))

 ::openfl::display::BitmapData FlxRuntimeShader_obj::getSampler2D(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_303_getSampler2D)
HXLINE( 304)		 ::openfl::display::ShaderInput_openfl_display_BitmapData shaderInput = ( ( ::openfl::display::ShaderInput_openfl_display_BitmapData)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 306)		if (::hx::IsNull( shaderInput )) {
HXLINE( 308)			::flixel::FlxG_obj::log->advanced(((HX_("Shader sampler2D input \"",ab,ab,9f,60) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/addons/display/FlxRuntimeShader.hx",5d,36,50,11),308,HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77),HX_("getSampler2D",64,df,e1,6c)));
HXLINE( 309)			return null();
            		}
HXLINE( 312)		return shaderInput->input;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getSampler2D,return )

::String FlxRuntimeShader_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_320_toString)
HXDLIN( 320)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 320)		{
HXDLIN( 320)			int _g1 = 0;
HXDLIN( 320)			::Array< ::String > _g2 = ::Reflect_obj::fields(this->get_data());
HXDLIN( 320)			while((_g1 < _g2->length)){
HXDLIN( 320)				::String field = _g2->__get(_g1);
HXDLIN( 320)				_g1 = (_g1 + 1);
HXDLIN( 320)				 ::Dynamic value = ::Reflect_obj::field(this->get_data(),field);
HXDLIN( 320)				 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 320)				_this->label = field;
HXDLIN( 320)				_this->value = value;
HXDLIN( 320)				_g->push(_this);
            			}
            		}
HXDLIN( 320)		return ::flixel::util::FlxStringUtil_obj::getDebugString(_g);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxRuntimeShader_obj,toString,return )

void FlxRuntimeShader_obj::_hx___processGLData(::String source,::String storageType){
            	HX_GC_STACKFRAME(&_hx_pos_880c0549bfe0a230_325___processGLData)
HXLINE( 326)		int lastMatch = 0;
HXDLIN( 326)		 ::Dynamic position;
HXDLIN( 326)		 ::EReg regex;
HXDLIN( 326)		::String name;
HXDLIN( 326)		::String type;
HXLINE( 328)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 330)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",e3,a8,c0,f8),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 334)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",fb,2e,25,cc),HX_("",00,00,00,00));
            		}
HXLINE( 338)		while(regex->matchSub(source,lastMatch,null())){
HXLINE( 340)			type = regex->matched(1);
HXLINE( 341)			name = regex->matched(2);
HXLINE( 343)			if (::StringTools_obj::startsWith(name,HX_("gl_",9a,86,4e,00))) {
HXLINE( 344)				continue;
            			}
HXLINE( 346)			bool isUniform = (storageType == HX_("uniform",34,41,64,b5));
HXLINE( 348)			if (::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83))) {
HXLINE( 350)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input =  ::openfl::display::ShaderInput_openfl_display_BitmapData_obj::__alloc( HX_CTX );
HXLINE( 351)				input->name = name;
HXLINE( 352)				input->_hx___isUniform = isUniform;
HXLINE( 353)				this->_hx___inputBitmapData->push(input);
HXLINE( 355)				::String _hx_switch_0 = name;
            				if (  (_hx_switch_0==HX_("bitmap",ef,0f,0c,f1)) ){
HXLINE( 360)					this->_hx___bitmap = input;
HXDLIN( 360)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_0==HX_("openfl_Texture",cc,bd,e4,7e)) ){
HXLINE( 358)					this->_hx___texture = input;
HXDLIN( 358)					goto _hx_goto_18;
            				}
            				/* default */{
            				}
            				_hx_goto_18:;
HXLINE( 364)				::Reflect_obj::setField(this->_hx___data,name,input);
HXLINE( 366)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 368)					if (this->_hx___isGenerated) {
HXLINE( 369)						::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,input);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 371)						{
HXLINE( 371)							null();
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			else {
HXLINE( 373)				bool _hx_tmp;
HXDLIN( 373)				if (::Reflect_obj::hasField(this->_hx___data,name)) {
HXLINE( 373)					_hx_tmp = ::hx::IsNull( ::Reflect_obj::field(this->_hx___data,name) );
            				}
            				else {
HXLINE( 373)					_hx_tmp = true;
            				}
HXDLIN( 373)				if (_hx_tmp) {
HXLINE( 375)					 ::Dynamic parameterType;
HXDLIN( 375)					::String _hx_switch_1 = type;
            					if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ){
HXLINE( 375)						parameterType = 0;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 375)						parameterType = 1;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 375)						parameterType = 2;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 375)						parameterType = 3;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_1==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 375)						parameterType = 5;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_1==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 375)						parameterType = 6;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_1==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 375)						parameterType = 7;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("double",11,2b,cb,32)) ||  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE( 375)						parameterType = 4;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat2",92,41,56,48)) ||  (_hx_switch_1==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 375)						parameterType = 12;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 375)						parameterType = 13;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 375)						parameterType = 14;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 375)						parameterType = 15;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat3",93,41,56,48)) ||  (_hx_switch_1==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 375)						parameterType = 16;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 375)						parameterType = 17;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 375)						parameterType = 18;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 375)						parameterType = 19;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("mat4",94,41,56,48)) ||  (_hx_switch_1==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 375)						parameterType = 20;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ||  (_hx_switch_1==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 375)						parameterType = 8;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 375)						parameterType = 9;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 375)						parameterType = 10;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 375)						parameterType = 11;
HXDLIN( 375)						goto _hx_goto_19;
            					}
            					/* default */{
HXLINE( 375)						parameterType = null();
            					}
            					_hx_goto_19:;
HXLINE( 401)					int length;
HXDLIN( 401)					 ::Dynamic _hx_switch_2 = parameterType;
            					if (  (_hx_switch_2==1) ||  (_hx_switch_2==5) ||  (_hx_switch_2==9) ){
HXLINE( 401)						length = 2;
HXDLIN( 401)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==2) ||  (_hx_switch_2==6) ||  (_hx_switch_2==10) ){
HXLINE( 401)						length = 3;
HXDLIN( 401)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==3) ||  (_hx_switch_2==7) ||  (_hx_switch_2==11) ||  (_hx_switch_2==12) ){
HXLINE( 401)						length = 4;
HXDLIN( 401)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==16) ){
HXLINE( 401)						length = 9;
HXDLIN( 401)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==20) ){
HXLINE( 401)						length = 16;
HXDLIN( 401)						goto _hx_goto_20;
            					}
            					/* default */{
HXLINE( 401)						length = 1;
            					}
            					_hx_goto_20:;
HXLINE( 411)					int arrayLength;
HXDLIN( 411)					 ::Dynamic _hx_switch_3 = parameterType;
            					if (  (_hx_switch_3==12) ){
HXLINE( 411)						arrayLength = 2;
HXDLIN( 411)						goto _hx_goto_21;
            					}
            					if (  (_hx_switch_3==16) ){
HXLINE( 411)						arrayLength = 3;
HXDLIN( 411)						goto _hx_goto_21;
            					}
            					if (  (_hx_switch_3==20) ){
HXLINE( 411)						arrayLength = 4;
HXDLIN( 411)						goto _hx_goto_21;
            					}
            					/* default */{
HXLINE( 411)						arrayLength = 1;
            					}
            					_hx_goto_21:;
HXLINE( 419)					 ::Dynamic _hx_switch_4 = parameterType;
            					if (  (_hx_switch_4==0) ||  (_hx_switch_4==1) ||  (_hx_switch_4==2) ||  (_hx_switch_4==3) ){
HXLINE( 422)						 ::openfl::display::ShaderParameter_Bool parameter =  ::openfl::display::ShaderParameter_Bool_obj::__alloc( HX_CTX );
HXLINE( 423)						parameter->set_name(name);
HXLINE( 424)						parameter->type = parameterType;
HXLINE( 425)						parameter->_hx___arrayLength = arrayLength;
HXLINE( 426)						parameter->_hx___isBool = true;
HXLINE( 427)						parameter->_hx___isUniform = isUniform;
HXLINE( 428)						parameter->__length = length;
HXLINE( 429)						this->_hx___paramBool->push(parameter);
HXLINE( 431)						if ((name == HX_("openfl_HasColorTransform",b4,00,4b,62))) {
HXLINE( 433)							this->_hx___hasColorTransform = parameter;
            						}
HXLINE( 436)						::Reflect_obj::setField(this->_hx___data,name,parameter);
HXLINE( 438)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 440)							if (this->_hx___isGenerated) {
HXLINE( 441)								::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,parameter);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g1 = _hx_e;
HXLINE( 443)								{
HXLINE( 443)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 421)						goto _hx_goto_23;
            					}
            					if (  (_hx_switch_4==8) ||  (_hx_switch_4==9) ||  (_hx_switch_4==10) ||  (_hx_switch_4==11) ){
HXLINE( 446)						 ::openfl::display::ShaderParameter_Int parameter1 =  ::openfl::display::ShaderParameter_Int_obj::__alloc( HX_CTX );
HXLINE( 447)						parameter1->set_name(name);
HXLINE( 448)						parameter1->type = parameterType;
HXLINE( 449)						parameter1->_hx___arrayLength = arrayLength;
HXLINE( 450)						parameter1->_hx___isInt = true;
HXLINE( 451)						parameter1->_hx___isUniform = isUniform;
HXLINE( 452)						parameter1->__length = length;
HXLINE( 453)						this->_hx___paramInt->push(parameter1);
HXLINE( 455)						::Reflect_obj::setField(this->_hx___data,name,parameter1);
HXLINE( 457)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 459)							if (this->_hx___isGenerated) {
HXLINE( 460)								::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,parameter1);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g2 = _hx_e;
HXLINE( 462)								{
HXLINE( 462)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 445)						goto _hx_goto_23;
            					}
            					/* default */{
HXLINE( 465)						 ::openfl::display::ShaderParameter_Float parameter2 =  ::openfl::display::ShaderParameter_Float_obj::__alloc( HX_CTX );
HXLINE( 466)						parameter2->set_name(name);
HXLINE( 467)						parameter2->type = parameterType;
HXLINE( 468)						parameter2->_hx___arrayLength = arrayLength;
HXLINE( 470)						if ((arrayLength > 0)) {
HXLINE( 471)							 ::Dynamic elements = (arrayLength * arrayLength);
HXDLIN( 471)							 ::haxe::io::Bytes buffer = null();
HXDLIN( 471)							::cpp::VirtualArray array = null();
HXDLIN( 471)							 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 471)							 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 471)							 ::Dynamic len = null();
HXDLIN( 471)							 ::lime::utils::ArrayBufferView this1;
HXDLIN( 471)							if (::hx::IsNotNull( elements )) {
HXLINE( 471)								this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            							}
            							else {
HXLINE( 471)								if (::hx::IsNotNull( array )) {
HXLINE( 471)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 471)									_this->byteOffset = 0;
HXDLIN( 471)									_this->length = array->get_length();
HXDLIN( 471)									_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 471)									_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 471)									_this->copyFromArray(array,null());
HXDLIN( 471)									this1 = _this;
            								}
            								else {
HXLINE( 471)									if (::hx::IsNotNull( vector )) {
HXLINE( 471)										 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 471)										::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 471)										_this1->byteOffset = 0;
HXDLIN( 471)										_this1->length = array1->get_length();
HXDLIN( 471)										_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 471)										_this1->buffer = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 471)										_this1->copyFromArray(array1,null());
HXDLIN( 471)										this1 = _this1;
            									}
            									else {
HXLINE( 471)										if (::hx::IsNotNull( view )) {
HXLINE( 471)											 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 471)											 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 471)											int srcLength = view->length;
HXDLIN( 471)											int srcByteOffset = view->byteOffset;
HXDLIN( 471)											int srcElementSize = view->bytesPerElement;
HXDLIN( 471)											int elementSize = _this2->bytesPerElement;
HXDLIN( 471)											if ((view->type == _this2->type)) {
HXLINE( 471)												int srcLength1 = srcData->length;
HXDLIN( 471)												int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 471)												_this2->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 471)												_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            											}
            											else {
HXLINE( 471)												HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            											}
HXDLIN( 471)											_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 471)											_this2->byteOffset = 0;
HXDLIN( 471)											_this2->length = srcLength;
HXDLIN( 471)											this1 = _this2;
            										}
            										else {
HXLINE( 471)											if (::hx::IsNotNull( buffer )) {
HXLINE( 471)												 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 471)												int in_byteOffset = 0;
HXDLIN( 471)												if ((in_byteOffset < 0)) {
HXLINE( 471)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
HXDLIN( 471)												if ((::hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 471)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
HXDLIN( 471)												int bufferByteLength = buffer->length;
HXDLIN( 471)												int elementSize1 = _this3->bytesPerElement;
HXDLIN( 471)												int newByteLength = bufferByteLength;
HXDLIN( 471)												if (::hx::IsNull( len )) {
HXLINE( 471)													newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 471)													if ((::hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 471)														HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            													}
HXDLIN( 471)													if ((newByteLength < 0)) {
HXLINE( 471)														HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            													}
            												}
            												else {
HXLINE( 471)													newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN( 471)													int newRange = (in_byteOffset + newByteLength);
HXDLIN( 471)													if ((newRange > bufferByteLength)) {
HXLINE( 471)														HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            													}
            												}
HXDLIN( 471)												_this3->buffer = buffer;
HXDLIN( 471)												_this3->byteOffset = in_byteOffset;
HXDLIN( 471)												_this3->byteLength = newByteLength;
HXDLIN( 471)												_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 471)												this1 = _this3;
            											}
            											else {
HXLINE( 471)												HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            											}
            										}
            									}
            								}
            							}
HXDLIN( 471)							parameter2->_hx___uniformMatrix = this1;
            						}
HXLINE( 473)						parameter2->_hx___isFloat = true;
HXLINE( 474)						parameter2->_hx___isUniform = isUniform;
HXLINE( 475)						parameter2->__length = length;
HXLINE( 476)						this->_hx___paramFloat->push(parameter2);
HXLINE( 478)						if (::StringTools_obj::startsWith(name,HX_("openfl_",cf,ba,42,40))) {
HXLINE( 480)							::String _hx_switch_5 = name;
            							if (  (_hx_switch_5==HX_("openfl_Alpha",0f,ce,3e,6a)) ){
HXLINE( 482)								this->_hx___alpha = parameter2;
HXDLIN( 482)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_5==HX_("openfl_ColorMultiplier",b5,e4,dc,18)) ){
HXLINE( 483)								this->_hx___colorMultiplier = parameter2;
HXDLIN( 483)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_5==HX_("openfl_ColorOffset",c7,ea,07,41)) ){
HXLINE( 484)								this->_hx___colorOffset = parameter2;
HXDLIN( 484)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_5==HX_("openfl_Matrix",70,ea,41,06)) ){
HXLINE( 485)								this->_hx___matrix = parameter2;
HXDLIN( 485)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_5==HX_("openfl_Position",98,fe,6c,ee)) ){
HXLINE( 486)								this->_hx___position = parameter2;
HXDLIN( 486)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_5==HX_("openfl_TextureCoord",49,e9,27,e8)) ){
HXLINE( 487)								this->_hx___textureCoord = parameter2;
HXDLIN( 487)								goto _hx_goto_22;
            							}
            							if (  (_hx_switch_5==HX_("openfl_TextureSize",ad,60,72,29)) ){
HXLINE( 488)								this->_hx___textureSize = parameter2;
HXDLIN( 488)								goto _hx_goto_22;
            							}
            							/* default */{
            							}
            							_hx_goto_22:;
            						}
HXLINE( 493)						::Reflect_obj::setField(this->_hx___data,name,parameter2);
HXLINE( 495)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 497)							if (this->_hx___isGenerated) {
HXLINE( 498)								::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,parameter2);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g3 = _hx_e;
HXLINE( 500)								{
HXLINE( 500)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					_hx_goto_23:;
            				}
            			}
HXLINE( 504)			position = regex->matchedPos();
HXLINE( 505)			lastMatch = ( (int)((position->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + position->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) );
            		}
            	}


::String FlxRuntimeShader_obj::set_glFragmentSource(::String value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_511_set_glFragmentSource)
HXLINE( 512)		if (::hx::IsNotNull( value )) {
HXLINE( 513)			value = ::StringTools_obj::replace(::StringTools_obj::replace(value,HX_("#pragma header",6e,d2,fa,47),HX_("varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;  // TODO: Is this still needed? Apparently, yes!\n\t\tuniform bool hasColorTransform;\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!(hasTransform || openfl_HasColorTransform))\n\t\t\t\treturn color;\n\t\t\t\n\t\t\tif (color.a == 0.0)\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t\tif (openfl_HasColorTransform || hasColorTransform)\n\t\t\t{\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tvec4 mult = vec4 (openfl_ColorMultiplierv.rgb, 1.0);\n\t\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * mult), 0.0, 1.0);\n\t\t\t\t\n\t\t\t\tif (color.a == 0.0)\n\t\t\t\t\treturn vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t\treturn vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\t\n\t\t\treturn color * openfl_Alphav;\n\t\t}\n\t",8f,0c,6b,2d)),HX_("#pragma body",43,99,98,1b),HX_("vec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t",fc,f1,57,8a));
            		}
HXLINE( 515)		if ((value != this->_hx___glFragmentSource)) {
HXLINE( 516)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 518)		return (this->_hx___glFragmentSource = value);
            	}


::String FlxRuntimeShader_obj::set_glVertexSource(::String value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_523_set_glVertexSource)
HXLINE( 524)		if (::hx::IsNotNull( value )) {
HXLINE( 525)			value = ::StringTools_obj::replace(::StringTools_obj::replace(value,HX_("#pragma header",6e,d2,fa,47),HX_("attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t",e3,e3,8c,47)),HX_("#pragma body",43,99,98,1b),HX_("openfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\n\t\tif (hasColorTransform)\n\t\t{\n\t\t\tif (openfl_HasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = (openfl_ColorOffsetv * colorMultiplier) + (colorOffset / 255.0);\n\t\t\t\topenfl_ColorMultiplierv *= colorMultiplier;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}\n\t",f9,41,6b,82));
            		}
HXLINE( 527)		if ((value != this->_hx___glVertexSource)) {
HXLINE( 528)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 530)		return (this->_hx___glVertexSource = value);
            	}



::hx::ObjectPtr< FlxRuntimeShader_obj > FlxRuntimeShader_obj::__new(::String fragmentSource,::String vertexSource) {
	::hx::ObjectPtr< FlxRuntimeShader_obj > __this = new FlxRuntimeShader_obj();
	__this->__construct(fragmentSource,vertexSource);
	return __this;
}

::hx::ObjectPtr< FlxRuntimeShader_obj > FlxRuntimeShader_obj::__alloc(::hx::Ctx *_hx_ctx,::String fragmentSource,::String vertexSource) {
	FlxRuntimeShader_obj *__this = (FlxRuntimeShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxRuntimeShader_obj), true, "flixel.addons.display.FlxRuntimeShader"));
	*(void **)__this = FlxRuntimeShader_obj::_hx_vtable;
	__this->__construct(fragmentSource,vertexSource);
	return __this;
}

FlxRuntimeShader_obj::FlxRuntimeShader_obj()
{
}

::hx::Val FlxRuntimeShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"setInt") ) { return ::hx::Val( setInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInt") ) { return ::hx::Val( getInt_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setBool") ) { return ::hx::Val( setBool_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBool") ) { return ::hx::Val( getBool_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setFloat") ) { return ::hx::Val( setFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloat") ) { return ::hx::Val( getFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIntArray") ) { return ::hx::Val( setIntArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIntArray") ) { return ::hx::Val( getIntArray_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setBoolArray") ) { return ::hx::Val( setBoolArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoolArray") ) { return ::hx::Val( getBoolArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSampler2D") ) { return ::hx::Val( setSampler2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSampler2D") ) { return ::hx::Val( getSampler2D_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setFloatArray") ) { return ::hx::Val( setFloatArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloatArray") ) { return ::hx::Val( getFloatArray_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__processGLData") ) { return ::hx::Val( _hx___processGLData_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_glVertexSource") ) { return ::hx::Val( set_glVertexSource_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_glFragmentSource") ) { return ::hx::Val( set_glFragmentSource_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxRuntimeShader_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxRuntimeShader_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxRuntimeShader_obj_sMemberFields[] = {
	HX_("setFloat",9a,2e,cb,10),
	HX_("getFloat",26,d5,6d,62),
	HX_("setFloatArray",9f,80,a0,e5),
	HX_("getFloatArray",93,9e,9a,a0),
	HX_("setInt",6d,9a,67,6f),
	HX_("getInt",f9,45,1f,a3),
	HX_("setIntArray",ec,57,6d,9e),
	HX_("getIntArray",e0,50,00,94),
	HX_("setBool",ec,c4,9f,06),
	HX_("getBool",e0,33,9e,13),
	HX_("setBoolArray",0d,c1,af,a0),
	HX_("getBoolArray",99,9d,b6,8b),
	HX_("setSampler2D",d8,02,db,81),
	HX_("getSampler2D",64,df,e1,6c),
	HX_("toString",ac,d0,6e,38),
	HX_("__processGLData",7e,0f,78,7c),
	HX_("set_glFragmentSource",4d,e2,ec,e2),
	HX_("set_glVertexSource",61,80,93,d3),
	::String(null()) };

::hx::Class FlxRuntimeShader_obj::__mClass;

void FlxRuntimeShader_obj::__register()
{
	FlxRuntimeShader_obj _hx_dummy;
	FlxRuntimeShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxRuntimeShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxRuntimeShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxRuntimeShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxRuntimeShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
