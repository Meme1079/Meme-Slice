// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxStrip
#include <flixel/FlxStrip.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxTiledSprite
#include <flixel/addons/display/FlxTiledSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_19_new,"flixel.addons.display.FlxTiledSprite","new",0xa67e7010,"flixel.addons.display.FlxTiledSprite.new","flixel/addons/display/FlxTiledSprite.hx",19,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_92_destroy,"flixel.addons.display.FlxTiledSprite","destroy",0x347264aa,"flixel.addons.display.FlxTiledSprite.destroy","flixel/addons/display/FlxTiledSprite.hx",92,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_98_loadGraphic,"flixel.addons.display.FlxTiledSprite","loadGraphic",0x1afee8d2,"flixel.addons.display.FlxTiledSprite.loadGraphic","flixel/addons/display/FlxTiledSprite.hx",98,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_104_loadFrame,"flixel.addons.display.FlxTiledSprite","loadFrame",0x2ee847d7,"flixel.addons.display.FlxTiledSprite.loadFrame","flixel/addons/display/FlxTiledSprite.hx",104,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_110_set_clipRect,"flixel.addons.display.FlxTiledSprite","set_clipRect",0xdab951e1,"flixel.addons.display.FlxTiledSprite.set_clipRect","flixel/addons/display/FlxTiledSprite.hx",110,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_117_set_graphic,"flixel.addons.display.FlxTiledSprite","set_graphic",0xdac8917b,"flixel.addons.display.FlxTiledSprite.set_graphic","flixel/addons/display/FlxTiledSprite.hx",117,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_125_regenGraphic,"flixel.addons.display.FlxTiledSprite","regenGraphic",0x43753fbb,"flixel.addons.display.FlxTiledSprite.regenGraphic","flixel/addons/display/FlxTiledSprite.hx",125,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_142_draw,"flixel.addons.display.FlxTiledSprite","draw",0x01914654,"flixel.addons.display.FlxTiledSprite.draw","flixel/addons/display/FlxTiledSprite.hx",142,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_192_updateRenderSprite,"flixel.addons.display.FlxTiledSprite","updateRenderSprite",0x5eb5a1f4,"flixel.addons.display.FlxTiledSprite.updateRenderSprite","flixel/addons/display/FlxTiledSprite.hx",192,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_242_updateVerticesData,"flixel.addons.display.FlxTiledSprite","updateVerticesData",0xd92df4bc,"flixel.addons.display.FlxTiledSprite.updateVerticesData","flixel/addons/display/FlxTiledSprite.hx",242,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_288_getDrawRect,"flixel.addons.display.FlxTiledSprite","getDrawRect",0x5c5e89ae,"flixel.addons.display.FlxTiledSprite.getDrawRect","flixel/addons/display/FlxTiledSprite.hx",288,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_328_set_width,"flixel.addons.display.FlxTiledSprite","set_width",0xfe8a8219,"flixel.addons.display.FlxTiledSprite.set_width","flixel/addons/display/FlxTiledSprite.hx",328,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_339_set_height,"flixel.addons.display.FlxTiledSprite","set_height",0x70f6cc74,"flixel.addons.display.FlxTiledSprite.set_height","flixel/addons/display/FlxTiledSprite.hx",339,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_350_set_scrollX,"flixel.addons.display.FlxTiledSprite","set_scrollX",0x97996a7e,"flixel.addons.display.FlxTiledSprite.set_scrollX","flixel/addons/display/FlxTiledSprite.hx",350,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_358_set_scrollY,"flixel.addons.display.FlxTiledSprite","set_scrollY",0x97996a7f,"flixel.addons.display.FlxTiledSprite.set_scrollY","flixel/addons/display/FlxTiledSprite.hx",358,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_366_set_repeatX,"flixel.addons.display.FlxTiledSprite","set_repeatX",0x0d490f70,"flixel.addons.display.FlxTiledSprite.set_repeatX","flixel/addons/display/FlxTiledSprite.hx",366,0xeabb3a1f)
HX_LOCAL_STACK_FRAME(_hx_pos_9c4135b7a1fcedcd_374_set_repeatY,"flixel.addons.display.FlxTiledSprite","set_repeatY",0x0d490f71,"flixel.addons.display.FlxTiledSprite.set_repeatY","flixel/addons/display/FlxTiledSprite.hx",374,0xeabb3a1f)
namespace flixel{
namespace addons{
namespace display{

void FlxTiledSprite_obj::__construct( ::Dynamic graphic,Float width,Float height,::hx::Null< bool >  __o_repeatX,::hx::Null< bool >  __o_repeatY){
            		bool repeatX = __o_repeatX.Default(true);
            		bool repeatY = __o_repeatY.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_19_new)
HXLINE(  48)		this->graphicVisible = true;
HXLINE(  46)		this->regen = true;
HXLINE(  39)		this->repeatY = true;
HXLINE(  34)		this->repeatX = true;
HXLINE(  29)		this->scrollY = ((Float)0);
HXLINE(  24)		this->scrollX = ((Float)0);
HXLINE(  52)		super::__construct(null(),null(),null());
HXLINE(  54)		this->repeat = true;
HXLINE(  56)		this->indices->set(0,0);
HXLINE(  57)		this->indices->set(1,1);
HXLINE(  58)		this->indices->set(2,2);
HXLINE(  59)		this->indices->set(3,2);
HXLINE(  60)		this->indices->set(4,3);
HXLINE(  61)		this->indices->set(5,0);
HXLINE(  63)		this->uvtData->set(0,( (Float)(0) ));
HXLINE(  64)		this->uvtData->set(1,( (Float)(0) ));
HXLINE(  65)		this->uvtData->set(2,( (Float)(1) ));
HXLINE(  66)		this->uvtData->set(3,( (Float)(0) ));
HXLINE(  67)		this->uvtData->set(4,( (Float)(1) ));
HXLINE(  68)		this->uvtData->set(5,( (Float)(1) ));
HXLINE(  69)		this->uvtData->set(6,( (Float)(0) ));
HXLINE(  70)		this->uvtData->set(7,( (Float)(1) ));
HXLINE(  72)		this->vertices->set(0,( (Float)(0) ));
HXLINE(  73)		this->vertices->set(1,( (Float)(0) ));
HXLINE(  74)		this->vertices->set(2,width);
HXLINE(  75)		this->vertices->set(3,( (Float)(0) ));
HXLINE(  76)		this->vertices->set(4,width);
HXLINE(  77)		this->vertices->set(5,height);
HXLINE(  78)		this->vertices->set(6,( (Float)(0) ));
HXLINE(  79)		this->vertices->set(7,height);
HXLINE(  81)		this->set_width(width);
HXLINE(  82)		this->set_height(height);
HXLINE(  84)		this->set_repeatX(repeatX);
HXLINE(  85)		this->set_repeatY(repeatY);
HXLINE(  87)		if (::hx::IsNotNull( graphic )) {
HXLINE(  88)			this->loadGraphic(graphic,null(),null(),null(),null(),null());
            		}
            	}

Dynamic FlxTiledSprite_obj::__CreateEmpty() { return new FlxTiledSprite_obj; }

void *FlxTiledSprite_obj::_hx_vtable = 0;

Dynamic FlxTiledSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTiledSprite_obj > _hx_result = new FlxTiledSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxTiledSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c863966) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x16cfa598) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x16cfa598;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x7c863966;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxTiledSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_92_destroy)
HXLINE(  93)		this->renderSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->renderSprite)) );
HXLINE(  94)		this->super::destroy();
            	}


 ::flixel::FlxSprite FlxTiledSprite_obj::loadGraphic( ::Dynamic graphic,::hx::Null< bool >  __o_animated,::hx::Null< int >  __o_width,::hx::Null< int >  __o_height,::hx::Null< bool >  __o_unique,::String key){
            		bool animated = __o_animated.Default(false);
            		int width = __o_width.Default(0);
            		int height = __o_height.Default(0);
            		bool unique = __o_unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_98_loadGraphic)
HXLINE(  99)		this->set_graphic(::flixel::FlxG_obj::bitmap->add(graphic,null(),null()));
HXLINE( 100)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::addons::display::FlxTiledSprite FlxTiledSprite_obj::loadFrame( ::flixel::graphics::frames::FlxFrame frame){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_104_loadFrame)
HXLINE( 105)		this->set_graphic(::flixel::graphics::FlxGraphic_obj::fromFrame(frame,null(),null(),null()));
HXLINE( 106)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTiledSprite_obj,loadFrame,return )

 ::flixel::math::FlxRect FlxTiledSprite_obj::set_clipRect( ::flixel::math::FlxRect value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_110_set_clipRect)
HXLINE( 111)		this->regen = true;
HXLINE( 113)		return this->super::set_clipRect(value);
            	}


 ::flixel::graphics::FlxGraphic FlxTiledSprite_obj::set_graphic( ::flixel::graphics::FlxGraphic value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_117_set_graphic)
HXLINE( 118)		if (::hx::IsInstanceNotEq( this->graphic,value )) {
HXLINE( 119)			this->regen = true;
            		}
HXLINE( 121)		return this->super::set_graphic(value);
            	}


void FlxTiledSprite_obj::regenGraphic(){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_125_regenGraphic)
HXLINE( 126)		bool _hx_tmp;
HXDLIN( 126)		if (this->regen) {
HXLINE( 126)			_hx_tmp = ::hx::IsNull( this->graphic );
            		}
            		else {
HXLINE( 126)			_hx_tmp = true;
            		}
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 127)			return;
            		}
HXLINE( 129)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 131)			this->updateRenderSprite();
            		}
            		else {
HXLINE( 135)			this->updateVerticesData();
            		}
HXLINE( 138)		this->regen = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTiledSprite_obj,regenGraphic,(void))

void FlxTiledSprite_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_142_draw)
HXLINE( 143)		if (this->regen) {
HXLINE( 144)			this->regenGraphic();
            		}
HXLINE( 146)		if (this->graphicVisible) {
HXLINE( 148)			if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 150)				this->renderSprite->set_x(this->x);
HXLINE( 151)				this->renderSprite->set_y(this->y);
HXLINE( 152)				{
HXLINE( 152)					 ::flixel::math::FlxBasePoint this1 = this->renderSprite->scrollFactor;
HXDLIN( 152)					Float y = this->scrollFactor->y;
HXDLIN( 152)					this1->set_x(this->scrollFactor->x);
HXDLIN( 152)					this1->set_y(y);
            				}
HXLINE( 153)				this->renderSprite->_cameras = this->_cameras;
HXLINE( 154)				this->renderSprite->draw();
            			}
            			else {
HXLINE( 158)				this->super::draw();
            			}
            		}
            	}


void FlxTiledSprite_obj::updateRenderSprite(){
            	HX_GC_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_192_updateRenderSprite)
HXLINE( 193)		this->graphicVisible = true;
HXLINE( 195)		if (::hx::IsNull( this->renderSprite )) {
HXLINE( 196)			this->renderSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 198)		 ::flixel::math::FlxRect drawRect = this->getDrawRect(null());
HXLINE( 199)		drawRect->x = ( (Float)(::Std_obj::_hx_int(drawRect->x)) );
HXLINE( 200)		drawRect->y = ( (Float)(::Std_obj::_hx_int(drawRect->y)) );
HXLINE( 201)		drawRect->width = ( (Float)(::Std_obj::_hx_int(drawRect->width)) );
HXLINE( 202)		drawRect->height = ( (Float)(::Std_obj::_hx_int(drawRect->height)) );
HXLINE( 205)		if (((drawRect->width * drawRect->height) == 0)) {
HXLINE( 207)			this->graphicVisible = false;
HXLINE( 208)			if (!(drawRect->_inPool)) {
HXLINE( 208)				drawRect->_inPool = true;
HXDLIN( 208)				drawRect->_weak = false;
HXDLIN( 208)				::flixel::math::FlxRect_obj::_pool->putUnsafe(drawRect);
            			}
HXLINE( 209)			return;
            		}
HXLINE( 212)		bool _hx_tmp;
HXDLIN( 212)		Float _hx_tmp1 = this->renderSprite->get_width();
HXDLIN( 212)		if ((_hx_tmp1 == drawRect->width)) {
HXLINE( 212)			Float _hx_tmp2 = this->renderSprite->get_height();
HXDLIN( 212)			_hx_tmp = (_hx_tmp2 != drawRect->height);
            		}
            		else {
HXLINE( 212)			_hx_tmp = true;
            		}
HXDLIN( 212)		if (_hx_tmp) {
HXLINE( 214)			 ::flixel::FlxSprite _hx_tmp3 = this->renderSprite;
HXDLIN( 214)			int _hx_tmp4 = ::Std_obj::_hx_int(drawRect->width);
HXDLIN( 214)			_hx_tmp3->makeGraphic(_hx_tmp4,::Std_obj::_hx_int(drawRect->height),0,true,null());
            		}
            		else {
HXLINE( 218)			 ::openfl::display::BitmapData _hx_tmp5 = this->renderSprite->get_pixels();
HXDLIN( 218)			_hx_tmp5->fillRect(this->renderSprite->get_pixels()->rect,0);
            		}
HXLINE( 221)		::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 223)		bool _hx_tmp6;
HXDLIN( 223)		if ((this->scrollX == 0)) {
HXLINE( 223)			_hx_tmp6 = (this->scrollY != 0);
            		}
            		else {
HXLINE( 223)			_hx_tmp6 = true;
            		}
HXDLIN( 223)		if (_hx_tmp6) {
HXLINE( 225)			this->_matrix->identity();
HXLINE( 226)			this->_matrix->tx = ( (Float)(::Math_obj::round(this->scrollX)) );
HXLINE( 227)			this->_matrix->ty = ( (Float)(::Math_obj::round(this->scrollY)) );
HXLINE( 228)			::flixel::util::FlxSpriteUtil_obj::flashGfx->beginBitmapFill(this->graphic->bitmap,this->_matrix,null(),null());
            		}
            		else {
HXLINE( 232)			::flixel::util::FlxSpriteUtil_obj::flashGfx->beginBitmapFill(this->graphic->bitmap,null(),null(),null());
            		}
HXLINE( 235)		::flixel::util::FlxSpriteUtil_obj::flashGfx->drawRect(drawRect->x,drawRect->y,drawRect->width,drawRect->height);
HXLINE( 236)		this->renderSprite->get_pixels()->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),this->colorTransform,null(),null(),null());
HXLINE( 237)		::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 238)		this->renderSprite->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTiledSprite_obj,updateRenderSprite,(void))

void FlxTiledSprite_obj::updateVerticesData(){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_242_updateVerticesData)
HXLINE( 243)		if (::hx::IsNull( this->graphic )) {
HXLINE( 244)			return;
            		}
HXLINE( 246)		 ::flixel::graphics::frames::FlxFrame frame = this->graphic->get_imageFrame()->get_frame();
HXLINE( 247)		this->graphicVisible = true;
HXLINE( 249)		 ::flixel::math::FlxRect drawRect = this->getDrawRect(null());
HXLINE( 251)		if (((drawRect->width * drawRect->height) == 0)) {
HXLINE( 253)			this->graphicVisible = false;
HXLINE( 254)			if (!(drawRect->_inPool)) {
HXLINE( 254)				drawRect->_inPool = true;
HXDLIN( 254)				drawRect->_weak = false;
HXDLIN( 254)				::flixel::math::FlxRect_obj::_pool->putUnsafe(drawRect);
            			}
HXLINE( 255)			return;
            		}
HXLINE( 259)		Float rectUX = ((drawRect->x - this->scrollX) / frame->sourceSize->x);
HXLINE( 260)		Float rectVX = (rectUX + ((drawRect->width - drawRect->x) / frame->sourceSize->x));
HXLINE( 261)		Float rectUY = ((drawRect->y - this->scrollY) / frame->sourceSize->y);
HXLINE( 262)		Float rectVY = (rectUY + ((drawRect->height - drawRect->y) / frame->sourceSize->y));
HXLINE( 264)		this->vertices->set(0,drawRect->x);
HXLINE( 265)		this->vertices->set(2,drawRect->width);
HXLINE( 266)		this->vertices->set(4,drawRect->width);
HXLINE( 267)		this->vertices->set(6,drawRect->x);
HXLINE( 269)		this->uvtData->set(0,rectUX);
HXLINE( 270)		this->uvtData->set(2,rectVX);
HXLINE( 271)		this->uvtData->set(4,rectVX);
HXLINE( 272)		this->uvtData->set(6,rectUX);
HXLINE( 274)		this->vertices->set(1,drawRect->y);
HXLINE( 275)		this->vertices->set(3,drawRect->y);
HXLINE( 276)		this->vertices->set(5,drawRect->height);
HXLINE( 277)		this->vertices->set(7,drawRect->height);
HXLINE( 279)		this->uvtData->set(1,rectUY);
HXLINE( 280)		this->uvtData->set(3,rectUY);
HXLINE( 281)		this->uvtData->set(5,rectVY);
HXLINE( 282)		this->uvtData->set(7,rectVY);
HXLINE( 284)		if (!(drawRect->_inPool)) {
HXLINE( 284)			drawRect->_inPool = true;
HXDLIN( 284)			drawRect->_weak = false;
HXDLIN( 284)			::flixel::math::FlxRect_obj::_pool->putUnsafe(drawRect);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTiledSprite_obj,updateVerticesData,(void))

 ::flixel::math::FlxRect FlxTiledSprite_obj::getDrawRect( ::flixel::math::FlxRect result){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_288_getDrawRect)
HXLINE( 289)		if (::hx::IsNull( result )) {
HXLINE( 290)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 290)			_this->x = ( (Float)(0) );
HXDLIN( 290)			_this->y = ( (Float)(0) );
HXDLIN( 290)			_this->width = ( (Float)(0) );
HXDLIN( 290)			_this->height = ( (Float)(0) );
HXDLIN( 290)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 290)			rect->_inPool = false;
HXDLIN( 290)			result = rect;
            		}
HXLINE( 292)		 ::flixel::graphics::frames::FlxFrame frame = this->graphic->get_imageFrame()->get_frame();
HXLINE( 293)		Float sourceSizeX;
HXDLIN( 293)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 293)			sourceSizeX = ( (Float)(this->graphic->bitmap->width) );
            		}
            		else {
HXLINE( 293)			sourceSizeX = frame->sourceSize->x;
            		}
HXLINE( 294)		Float sourceSizeY;
HXDLIN( 294)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 294)			sourceSizeY = ( (Float)(this->graphic->bitmap->height) );
            		}
            		else {
HXLINE( 294)			sourceSizeY = frame->sourceSize->y;
            		}
HXLINE( 296)		Float _hx_tmp;
HXDLIN( 296)		if (this->repeatX) {
HXLINE( 296)			_hx_tmp = ( (Float)(0) );
            		}
            		else {
HXLINE( 296)			_hx_tmp = this->scrollX;
            		}
HXDLIN( 296)		result->x = _hx_tmp;
HXLINE( 297)		if (::hx::IsNotNull( this->clipRect )) {
HXLINE( 299)			 ::flixel::math::FlxRect result1 = result;
HXDLIN( 299)			result1->x = (result1->x + this->clipRect->x);
            		}
HXLINE( 301)		Float Value = result->x;
HXDLIN( 301)		 ::Dynamic Max = this->get_width();
HXDLIN( 301)		Float lowerBound;
HXDLIN( 301)		if ((Value < 0)) {
HXLINE( 301)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 301)			lowerBound = Value;
            		}
HXDLIN( 301)		Float _hx_tmp1;
HXDLIN( 301)		bool _hx_tmp2;
HXDLIN( 301)		if (::hx::IsNotNull( Max )) {
HXLINE( 301)			_hx_tmp2 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 301)			_hx_tmp2 = false;
            		}
HXDLIN( 301)		if (_hx_tmp2) {
HXLINE( 301)			_hx_tmp1 = ( (Float)(Max) );
            		}
            		else {
HXLINE( 301)			_hx_tmp1 = lowerBound;
            		}
HXDLIN( 301)		result->x = _hx_tmp1;
HXLINE( 303)		Float _hx_tmp3;
HXDLIN( 303)		if (this->repeatX) {
HXLINE( 303)			Float result2 = result->x;
HXDLIN( 303)			_hx_tmp3 = (result2 + this->get_width());
            		}
            		else {
HXLINE( 303)			_hx_tmp3 = (this->scrollX + sourceSizeX);
            		}
HXDLIN( 303)		result->width = _hx_tmp3;
HXLINE( 304)		if (::hx::IsNotNull( this->clipRect )) {
HXLINE( 306)			Float Value1 = result->width;
HXDLIN( 306)			 ::Dynamic Min = this->clipRect->x;
HXDLIN( 306)			 ::flixel::math::FlxRect _this1 = this->clipRect;
HXDLIN( 306)			 ::Dynamic Max1 = (_this1->x + _this1->width);
HXDLIN( 306)			Float lowerBound1;
HXDLIN( 306)			bool lowerBound2;
HXDLIN( 306)			if (::hx::IsNotNull( Min )) {
HXLINE( 306)				lowerBound2 = ::hx::IsLess( Value1,Min );
            			}
            			else {
HXLINE( 306)				lowerBound2 = false;
            			}
HXDLIN( 306)			if (lowerBound2) {
HXLINE( 306)				lowerBound1 = ( (Float)(Min) );
            			}
            			else {
HXLINE( 306)				lowerBound1 = Value1;
            			}
HXDLIN( 306)			Float _hx_tmp4;
HXDLIN( 306)			bool _hx_tmp5;
HXDLIN( 306)			if (::hx::IsNotNull( Max1 )) {
HXLINE( 306)				_hx_tmp5 = ::hx::IsGreater( lowerBound1,Max1 );
            			}
            			else {
HXLINE( 306)				_hx_tmp5 = false;
            			}
HXDLIN( 306)			if (_hx_tmp5) {
HXLINE( 306)				_hx_tmp4 = ( (Float)(Max1) );
            			}
            			else {
HXLINE( 306)				_hx_tmp4 = lowerBound1;
            			}
HXDLIN( 306)			result->width = _hx_tmp4;
            		}
HXLINE( 308)		Float Value2 = result->width;
HXDLIN( 308)		 ::Dynamic Max2 = this->get_width();
HXDLIN( 308)		Float lowerBound3;
HXDLIN( 308)		if ((Value2 < 0)) {
HXLINE( 308)			lowerBound3 = ( (Float)(0) );
            		}
            		else {
HXLINE( 308)			lowerBound3 = Value2;
            		}
HXDLIN( 308)		Float _hx_tmp6;
HXDLIN( 308)		bool _hx_tmp7;
HXDLIN( 308)		if (::hx::IsNotNull( Max2 )) {
HXLINE( 308)			_hx_tmp7 = ::hx::IsGreater( lowerBound3,Max2 );
            		}
            		else {
HXLINE( 308)			_hx_tmp7 = false;
            		}
HXDLIN( 308)		if (_hx_tmp7) {
HXLINE( 308)			_hx_tmp6 = ( (Float)(Max2) );
            		}
            		else {
HXLINE( 308)			_hx_tmp6 = lowerBound3;
            		}
HXDLIN( 308)		result->width = _hx_tmp6;
HXLINE( 310)		Float _hx_tmp8;
HXDLIN( 310)		if (this->repeatY) {
HXLINE( 310)			_hx_tmp8 = ( (Float)(0) );
            		}
            		else {
HXLINE( 310)			_hx_tmp8 = this->scrollY;
            		}
HXDLIN( 310)		result->y = _hx_tmp8;
HXLINE( 311)		if (::hx::IsNotNull( this->clipRect )) {
HXLINE( 313)			 ::flixel::math::FlxRect result3 = result;
HXDLIN( 313)			result3->y = (result3->y + this->clipRect->y);
            		}
HXLINE( 315)		Float Value3 = result->y;
HXDLIN( 315)		 ::Dynamic Max3 = this->get_height();
HXDLIN( 315)		Float lowerBound4;
HXDLIN( 315)		if ((Value3 < 0)) {
HXLINE( 315)			lowerBound4 = ( (Float)(0) );
            		}
            		else {
HXLINE( 315)			lowerBound4 = Value3;
            		}
HXDLIN( 315)		Float _hx_tmp9;
HXDLIN( 315)		bool _hx_tmp10;
HXDLIN( 315)		if (::hx::IsNotNull( Max3 )) {
HXLINE( 315)			_hx_tmp10 = ::hx::IsGreater( lowerBound4,Max3 );
            		}
            		else {
HXLINE( 315)			_hx_tmp10 = false;
            		}
HXDLIN( 315)		if (_hx_tmp10) {
HXLINE( 315)			_hx_tmp9 = ( (Float)(Max3) );
            		}
            		else {
HXLINE( 315)			_hx_tmp9 = lowerBound4;
            		}
HXDLIN( 315)		result->y = _hx_tmp9;
HXLINE( 317)		Float _hx_tmp11;
HXDLIN( 317)		if (this->repeatY) {
HXLINE( 317)			Float result4 = result->y;
HXDLIN( 317)			_hx_tmp11 = (result4 + this->get_height());
            		}
            		else {
HXLINE( 317)			_hx_tmp11 = (this->scrollY + sourceSizeY);
            		}
HXDLIN( 317)		result->height = _hx_tmp11;
HXLINE( 318)		if (::hx::IsNotNull( this->clipRect )) {
HXLINE( 320)			Float Value4 = result->height;
HXDLIN( 320)			 ::Dynamic Min1 = this->clipRect->y;
HXDLIN( 320)			 ::flixel::math::FlxRect _this2 = this->clipRect;
HXDLIN( 320)			 ::Dynamic Max4 = (_this2->y + _this2->height);
HXDLIN( 320)			Float lowerBound5;
HXDLIN( 320)			bool lowerBound6;
HXDLIN( 320)			if (::hx::IsNotNull( Min1 )) {
HXLINE( 320)				lowerBound6 = ::hx::IsLess( Value4,Min1 );
            			}
            			else {
HXLINE( 320)				lowerBound6 = false;
            			}
HXDLIN( 320)			if (lowerBound6) {
HXLINE( 320)				lowerBound5 = ( (Float)(Min1) );
            			}
            			else {
HXLINE( 320)				lowerBound5 = Value4;
            			}
HXDLIN( 320)			Float _hx_tmp12;
HXDLIN( 320)			bool _hx_tmp13;
HXDLIN( 320)			if (::hx::IsNotNull( Max4 )) {
HXLINE( 320)				_hx_tmp13 = ::hx::IsGreater( lowerBound5,Max4 );
            			}
            			else {
HXLINE( 320)				_hx_tmp13 = false;
            			}
HXDLIN( 320)			if (_hx_tmp13) {
HXLINE( 320)				_hx_tmp12 = ( (Float)(Max4) );
            			}
            			else {
HXLINE( 320)				_hx_tmp12 = lowerBound5;
            			}
HXDLIN( 320)			result->height = _hx_tmp12;
            		}
HXLINE( 322)		Float Value5 = result->height;
HXDLIN( 322)		 ::Dynamic Max5 = this->get_height();
HXDLIN( 322)		Float lowerBound7;
HXDLIN( 322)		if ((Value5 < 0)) {
HXLINE( 322)			lowerBound7 = ( (Float)(0) );
            		}
            		else {
HXLINE( 322)			lowerBound7 = Value5;
            		}
HXDLIN( 322)		Float _hx_tmp14;
HXDLIN( 322)		bool _hx_tmp15;
HXDLIN( 322)		if (::hx::IsNotNull( Max5 )) {
HXLINE( 322)			_hx_tmp15 = ::hx::IsGreater( lowerBound7,Max5 );
            		}
            		else {
HXLINE( 322)			_hx_tmp15 = false;
            		}
HXDLIN( 322)		if (_hx_tmp15) {
HXLINE( 322)			_hx_tmp14 = ( (Float)(Max5) );
            		}
            		else {
HXLINE( 322)			_hx_tmp14 = lowerBound7;
            		}
HXDLIN( 322)		result->height = _hx_tmp14;
HXLINE( 324)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTiledSprite_obj,getDrawRect,return )

Float FlxTiledSprite_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_328_set_width)
HXLINE( 329)		if ((value <= 0)) {
HXLINE( 330)			return value;
            		}
HXLINE( 332)		if ((value != this->get_width())) {
HXLINE( 333)			this->regen = true;
            		}
HXLINE( 335)		return this->super::set_width(value);
            	}


Float FlxTiledSprite_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_339_set_height)
HXLINE( 340)		if ((value <= 0)) {
HXLINE( 341)			return value;
            		}
HXLINE( 343)		if ((value != this->get_height())) {
HXLINE( 344)			this->regen = true;
            		}
HXLINE( 346)		return this->super::set_height(value);
            	}


Float FlxTiledSprite_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_350_set_scrollX)
HXLINE( 351)		if ((value != this->scrollX)) {
HXLINE( 352)			this->regen = true;
            		}
HXLINE( 354)		return (this->scrollX = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTiledSprite_obj,set_scrollX,return )

Float FlxTiledSprite_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_358_set_scrollY)
HXLINE( 359)		if ((value != this->scrollY)) {
HXLINE( 360)			this->regen = true;
            		}
HXLINE( 362)		return (this->scrollY = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTiledSprite_obj,set_scrollY,return )

bool FlxTiledSprite_obj::set_repeatX(bool value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_366_set_repeatX)
HXLINE( 367)		if ((value != this->repeatX)) {
HXLINE( 368)			this->regen = true;
            		}
HXLINE( 370)		return (this->repeatX = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTiledSprite_obj,set_repeatX,return )

bool FlxTiledSprite_obj::set_repeatY(bool value){
            	HX_STACKFRAME(&_hx_pos_9c4135b7a1fcedcd_374_set_repeatY)
HXLINE( 375)		if ((value != this->repeatY)) {
HXLINE( 376)			this->regen = true;
            		}
HXLINE( 378)		return (this->repeatY = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTiledSprite_obj,set_repeatY,return )


::hx::ObjectPtr< FlxTiledSprite_obj > FlxTiledSprite_obj::__new( ::Dynamic graphic,Float width,Float height,::hx::Null< bool >  __o_repeatX,::hx::Null< bool >  __o_repeatY) {
	::hx::ObjectPtr< FlxTiledSprite_obj > __this = new FlxTiledSprite_obj();
	__this->__construct(graphic,width,height,__o_repeatX,__o_repeatY);
	return __this;
}

::hx::ObjectPtr< FlxTiledSprite_obj > FlxTiledSprite_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic graphic,Float width,Float height,::hx::Null< bool >  __o_repeatX,::hx::Null< bool >  __o_repeatY) {
	FlxTiledSprite_obj *__this = (FlxTiledSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTiledSprite_obj), true, "flixel.addons.display.FlxTiledSprite"));
	*(void **)__this = FlxTiledSprite_obj::_hx_vtable;
	__this->__construct(graphic,width,height,__o_repeatX,__o_repeatY);
	return __this;
}

FlxTiledSprite_obj::FlxTiledSprite_obj()
{
}

void FlxTiledSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTiledSprite);
	HX_MARK_MEMBER_NAME(scrollX,"scrollX");
	HX_MARK_MEMBER_NAME(scrollY,"scrollY");
	HX_MARK_MEMBER_NAME(repeatX,"repeatX");
	HX_MARK_MEMBER_NAME(repeatY,"repeatY");
	HX_MARK_MEMBER_NAME(renderSprite,"renderSprite");
	HX_MARK_MEMBER_NAME(regen,"regen");
	HX_MARK_MEMBER_NAME(graphicVisible,"graphicVisible");
	 ::flixel::FlxStrip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTiledSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(scrollX,"scrollX");
	HX_VISIT_MEMBER_NAME(scrollY,"scrollY");
	HX_VISIT_MEMBER_NAME(repeatX,"repeatX");
	HX_VISIT_MEMBER_NAME(repeatY,"repeatY");
	HX_VISIT_MEMBER_NAME(renderSprite,"renderSprite");
	HX_VISIT_MEMBER_NAME(regen,"regen");
	HX_VISIT_MEMBER_NAME(graphicVisible,"graphicVisible");
	 ::flixel::FlxStrip_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxTiledSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"regen") ) { return ::hx::Val( regen ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { return ::hx::Val( scrollX ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { return ::hx::Val( scrollY ); }
		if (HX_FIELD_EQ(inName,"repeatX") ) { return ::hx::Val( repeatX ); }
		if (HX_FIELD_EQ(inName,"repeatY") ) { return ::hx::Val( repeatY ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadFrame") ) { return ::hx::Val( loadFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return ::hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_height") ) { return ::hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadGraphic") ) { return ::hx::Val( loadGraphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return ::hx::Val( set_graphic_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDrawRect") ) { return ::hx::Val( getDrawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_repeatX") ) { return ::hx::Val( set_repeatX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_repeatY") ) { return ::hx::Val( set_repeatY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderSprite") ) { return ::hx::Val( renderSprite ); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return ::hx::Val( set_clipRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"regenGraphic") ) { return ::hx::Val( regenGraphic_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicVisible") ) { return ::hx::Val( graphicVisible ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateRenderSprite") ) { return ::hx::Val( updateRenderSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateVerticesData") ) { return ::hx::Val( updateVerticesData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxTiledSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"regen") ) { regen=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) );scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) );scrollY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"repeatX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_repeatX(inValue.Cast< bool >()) );repeatX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"repeatY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_repeatY(inValue.Cast< bool >()) );repeatY=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderSprite") ) { renderSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicVisible") ) { graphicVisible=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTiledSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("repeatX",9d,d8,87,a6));
	outFields->push(HX_("repeatY",9e,d8,87,a6));
	outFields->push(HX_("renderSprite",fb,df,eb,32));
	outFields->push(HX_("regen",bd,2e,bf,e6));
	outFields->push(HX_("graphicVisible",aa,6a,88,e0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTiledSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxTiledSprite_obj,scrollX),HX_("scrollX",ab,33,d8,30)},
	{::hx::fsFloat,(int)offsetof(FlxTiledSprite_obj,scrollY),HX_("scrollY",ac,33,d8,30)},
	{::hx::fsBool,(int)offsetof(FlxTiledSprite_obj,repeatX),HX_("repeatX",9d,d8,87,a6)},
	{::hx::fsBool,(int)offsetof(FlxTiledSprite_obj,repeatY),HX_("repeatY",9e,d8,87,a6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlxTiledSprite_obj,renderSprite),HX_("renderSprite",fb,df,eb,32)},
	{::hx::fsBool,(int)offsetof(FlxTiledSprite_obj,regen),HX_("regen",bd,2e,bf,e6)},
	{::hx::fsBool,(int)offsetof(FlxTiledSprite_obj,graphicVisible),HX_("graphicVisible",aa,6a,88,e0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxTiledSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTiledSprite_obj_sMemberFields[] = {
	HX_("scrollX",ab,33,d8,30),
	HX_("scrollY",ac,33,d8,30),
	HX_("repeatX",9d,d8,87,a6),
	HX_("repeatY",9e,d8,87,a6),
	HX_("renderSprite",fb,df,eb,32),
	HX_("regen",bd,2e,bf,e6),
	HX_("graphicVisible",aa,6a,88,e0),
	HX_("destroy",fa,2c,86,24),
	HX_("loadGraphic",22,19,a5,44),
	HX_("loadFrame",27,c4,ba,21),
	HX_("set_clipRect",91,67,7d,22),
	HX_("set_graphic",cb,c1,6e,04),
	HX_("regenGraphic",6b,55,39,8b),
	HX_("draw",04,2c,70,42),
	HX_("updateRenderSprite",a4,1b,f9,aa),
	HX_("updateVerticesData",6c,6e,71,25),
	HX_("getDrawRect",fe,b9,04,86),
	HX_("set_width",69,fe,5c,f1),
	HX_("set_height",24,16,51,f6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("set_repeatX",c0,3f,ef,36),
	HX_("set_repeatY",c1,3f,ef,36),
	::String(null()) };

::hx::Class FlxTiledSprite_obj::__mClass;

void FlxTiledSprite_obj::__register()
{
	FlxTiledSprite_obj _hx_dummy;
	FlxTiledSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.display.FlxTiledSprite",1e,68,e9,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTiledSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTiledSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTiledSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTiledSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
