// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxPieDialShape
#include <flixel/addons/display/FlxPieDialShape.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxPieDialUtils
#include <flixel/addons/display/FlxPieDialUtils.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math__FlxPoint_FlxPoint_Impl_
#include <flixel/math/_FlxPoint/FlxPoint_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxBitmapDataPool
#include <flixel/util/FlxBitmapDataPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_84_getPieDialGraphic,"flixel.addons.display.FlxPieDialUtils","getPieDialGraphic",0xcf56bac6,"flixel.addons.display.FlxPieDialUtils.getPieDialGraphic","flixel/addons/display/FlxPieDial.hx",84,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_97_getRadialGaugeGraphic,"flixel.addons.display.FlxPieDialUtils","getRadialGaugeGraphic",0x27899108,"flixel.addons.display.FlxPieDialUtils.getRadialGaugeGraphic","flixel/addons/display/FlxPieDial.hx",97,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_120_renderRadialGauge,"flixel.addons.display.FlxPieDialUtils","renderRadialGauge",0x0efd9c88,"flixel.addons.display.FlxPieDialUtils.renderRadialGauge","flixel/addons/display/FlxPieDial.hx",120,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_135_renderPieDial,"flixel.addons.display.FlxPieDialUtils","renderPieDial",0x9ad7830a,"flixel.addons.display.FlxPieDialUtils.renderPieDial","flixel/addons/display/FlxPieDial.hx",135,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_188_drawShape,"flixel.addons.display.FlxPieDialUtils","drawShape",0x35e99421,"flixel.addons.display.FlxPieDialUtils.drawShape","flixel/addons/display/FlxPieDial.hx",188,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_239_drawSweep,"flixel.addons.display.FlxPieDialUtils","drawSweep",0x3fd6c6ec,"flixel.addons.display.FlxPieDialUtils.drawSweep","flixel/addons/display/FlxPieDial.hx",239,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_321_drawCircle,"flixel.addons.display.FlxPieDialUtils","drawCircle",0x2f5ba110,"flixel.addons.display.FlxPieDialUtils.drawCircle","flixel/addons/display/FlxPieDial.hx",321,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_346_drawPolygon,"flixel.addons.display.FlxPieDialUtils","drawPolygon",0x5dabf37a,"flixel.addons.display.FlxPieDialUtils.drawPolygon","flixel/addons/display/FlxPieDial.hx",346,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_360_beginDraw,"flixel.addons.display.FlxPieDialUtils","beginDraw",0x7d0b8671,"flixel.addons.display.FlxPieDialUtils.beginDraw","flixel/addons/display/FlxPieDial.hx",360,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_369_endDraw,"flixel.addons.display.FlxPieDialUtils","endDraw",0xcda37023,"flixel.addons.display.FlxPieDialUtils.endDraw","flixel/addons/display/FlxPieDial.hx",369,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_78_boot,"flixel.addons.display.FlxPieDialUtils","boot",0x8293ab0e,"flixel.addons.display.FlxPieDialUtils.boot","flixel/addons/display/FlxPieDial.hx",78,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_79_boot,"flixel.addons.display.FlxPieDialUtils","boot",0x8293ab0e,"flixel.addons.display.FlxPieDialUtils.boot","flixel/addons/display/FlxPieDial.hx",79,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_80_boot,"flixel.addons.display.FlxPieDialUtils","boot",0x8293ab0e,"flixel.addons.display.FlxPieDialUtils.boot","flixel/addons/display/FlxPieDial.hx",80,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_81_boot,"flixel.addons.display.FlxPieDialUtils","boot",0x8293ab0e,"flixel.addons.display.FlxPieDialUtils.boot","flixel/addons/display/FlxPieDial.hx",81,0x0d52cabe)
HX_LOCAL_STACK_FRAME(_hx_pos_2fb76e3d76f2074f_230_boot,"flixel.addons.display.FlxPieDialUtils","boot",0x8293ab0e,"flixel.addons.display.FlxPieDialUtils.boot","flixel/addons/display/FlxPieDial.hx",230,0x0d52cabe)
namespace flixel{
namespace addons{
namespace display{

void FlxPieDialUtils_obj::__construct() { }

Dynamic FlxPieDialUtils_obj::__CreateEmpty() { return new FlxPieDialUtils_obj; }

void *FlxPieDialUtils_obj::_hx_vtable = 0;

Dynamic FlxPieDialUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxPieDialUtils_obj > _hx_result = new FlxPieDialUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxPieDialUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36733ef4;
}

 ::openfl::geom::Rectangle FlxPieDialUtils_obj::_rect;

 ::openfl::geom::Point FlxPieDialUtils_obj::_zero;

 ::openfl::geom::Point FlxPieDialUtils_obj::_point;

 ::openfl::display::Graphics FlxPieDialUtils_obj::flashGfx;

 ::flixel::graphics::FlxGraphic FlxPieDialUtils_obj::getPieDialGraphic(int radius,int color,int frames, ::flixel::addons::display::FlxPieDialShape shape,bool clockwise,int innerRadius){
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_84_getPieDialGraphic)
HXLINE(  85)		::String key = HX_("0x",48,2a,00,00);
HXDLIN(  85)		::String key1 = ::StringTools_obj::hex(((color >> 24) & 255),2);
HXDLIN(  85)		::String key2 = ((key + key1) + ::StringTools_obj::hex(((color >> 16) & 255),2));
HXDLIN(  85)		::String key3 = (key2 + ::StringTools_obj::hex(((color >> 8) & 255),2));
HXDLIN(  85)		::String key4 = ((((((HX_("pie_dial_",3c,43,f1,fc) + (key3 + ::StringTools_obj::hex((color & 255),2))) + HX_("_",5f,00,00,00)) + radius) + HX_("_",5f,00,00,00)) + frames) + HX_("_",5f,00,00,00));
HXDLIN(  85)		::String key5 = ((key4 + ::Std_obj::string(shape)) + HX_("_",5f,00,00,00));
HXDLIN(  85)		::String key6 = (((key5 + ::Std_obj::string(clockwise)) + HX_("_",5f,00,00,00)) + innerRadius);
HXLINE(  87)		if (::hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key6)) ) )) {
HXLINE(  89)			 ::openfl::display::BitmapData bmp = ::flixel::addons::display::FlxPieDialUtils_obj::renderPieDial(shape,radius,innerRadius,frames,clockwise,color);
HXLINE(  90)			::flixel::FlxG_obj::bitmap->add(bmp,true,key6);
            		}
HXLINE(  93)		return ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key6)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxPieDialUtils_obj,getPieDialGraphic,return )

 ::flixel::graphics::FlxGraphic FlxPieDialUtils_obj::getRadialGaugeGraphic( ::flixel::addons::display::FlxPieDialShape shape,int radius,::hx::Null< int >  __o_innerRadius,::hx::Null< int >  __o_color){
            		int innerRadius = __o_innerRadius.Default(0);
            		int color = __o_color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_97_getRadialGaugeGraphic)
HXLINE(  98)		::String key = ((HX_("radial_gauge_",e6,62,2a,02) + ::Std_obj::string(shape)) + HX_("_",5f,00,00,00));
HXDLIN(  98)		::String key1 = HX_("0x",48,2a,00,00);
HXDLIN(  98)		::String key2 = ::StringTools_obj::hex(((color >> 24) & 255),2);
HXDLIN(  98)		::String key3 = ((key1 + key2) + ::StringTools_obj::hex(((color >> 16) & 255),2));
HXDLIN(  98)		::String key4 = (key3 + ::StringTools_obj::hex(((color >> 8) & 255),2));
HXDLIN(  98)		::String key5 = (((((key + (key4 + ::StringTools_obj::hex((color & 255),2))) + HX_("_",5f,00,00,00)) + radius) + HX_("_",5f,00,00,00)) + innerRadius);
HXLINE( 100)		if (::hx::IsNull( ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key5)) ) )) {
HXLINE( 102)			 ::openfl::display::BitmapData bmp = ::flixel::addons::display::FlxPieDialUtils_obj::renderRadialGauge(shape,radius,innerRadius,color);
HXLINE( 103)			::flixel::FlxG_obj::bitmap->add(bmp,true,key5);
            		}
HXLINE( 106)		return ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key5)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxPieDialUtils_obj,getRadialGaugeGraphic,return )

 ::openfl::display::BitmapData FlxPieDialUtils_obj::renderRadialGauge( ::flixel::addons::display::FlxPieDialShape shape,int radius,::hx::Null< int >  __o_innerRadius,::hx::Null< int >  __o_color){
            		int innerRadius = __o_innerRadius.Default(0);
            		int color = __o_color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_120_renderRadialGauge)
HXDLIN( 120)		return ::flixel::addons::display::FlxPieDialUtils_obj::renderPieDial(shape,radius,innerRadius,1,true,color);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxPieDialUtils_obj,renderRadialGauge,return )

 ::openfl::display::BitmapData FlxPieDialUtils_obj::renderPieDial( ::flixel::addons::display::FlxPieDialShape shape,int radius,int innerRadius,int frames,::hx::Null< bool >  __o_clockwise,::hx::Null< int >  __o_color){
            		bool clockwise = __o_clockwise.Default(true);
            		int color = __o_color.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_135_renderPieDial)
HXLINE( 136)		int W = (radius * 2);
HXLINE( 137)		int H = (radius * 2);
HXLINE( 139)		int rows = ::Math_obj::ceil(::Math_obj::sqrt(( (Float)(frames) )));
HXLINE( 140)		int cols = ::Math_obj::ceil((( (Float)(frames) ) / ( (Float)(rows) )));
HXLINE( 142)		 ::openfl::display::BitmapData maskFrame = ::flixel::util::FlxBitmapDataPool_obj::get(W,H,true,0,true);
HXLINE( 143)		 ::openfl::display::BitmapData fullFrame = ::flixel::util::FlxBitmapDataPool_obj::get(W,H,true,0,true);
HXLINE( 144)		{
HXLINE( 144)			int W1 = (radius << 1);
HXDLIN( 144)			int H1 = (radius << 1);
HXDLIN( 144)			switch((int)(shape->_hx_getIndex())){
            				case (int)0: {
HXLINE( 144)					bool _hx_tmp;
HXDLIN( 144)					if ((innerRadius > 0)) {
HXLINE( 144)						_hx_tmp = (innerRadius < radius);
            					}
            					else {
HXLINE( 144)						_hx_tmp = false;
            					}
HXDLIN( 144)					if (_hx_tmp) {
HXLINE( 144)						 ::openfl::display::BitmapData alpha = ::flixel::util::FlxBitmapDataPool_obj::get(W1,H1,false,-16777216,true);
HXDLIN( 144)						alpha->fillRect(alpha->rect,-16777216);
HXDLIN( 144)						::flixel::addons::display::FlxPieDialUtils_obj::drawCircle(alpha,radius,-1,null(), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("smoothing",74,d5,e1,95),true)));
HXDLIN( 144)						::flixel::addons::display::FlxPieDialUtils_obj::drawCircle(alpha,innerRadius,-16777216,null(), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("smoothing",74,d5,e1,95),true)));
HXDLIN( 144)						alpha->copyPixels(fullFrame,fullFrame->rect,::flixel::addons::display::FlxPieDialUtils_obj::_zero,null(),null(),true);
HXDLIN( 144)						fullFrame->fillRect(fullFrame->rect,color);
HXDLIN( 144)						fullFrame->copyChannel(alpha,alpha->rect,::flixel::addons::display::FlxPieDialUtils_obj::_zero,1,8);
HXDLIN( 144)						::flixel::util::FlxBitmapDataPool_obj::put(alpha);
            					}
            					else {
HXLINE( 144)						::flixel::addons::display::FlxPieDialUtils_obj::drawCircle(fullFrame,radius,color,null(),null());
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 144)					bool _hx_tmp1;
HXDLIN( 144)					if ((innerRadius > 0)) {
HXLINE( 144)						_hx_tmp1 = (innerRadius < radius);
            					}
            					else {
HXLINE( 144)						_hx_tmp1 = false;
            					}
HXDLIN( 144)					if (_hx_tmp1) {
HXLINE( 144)						int thickness = (radius - innerRadius);
HXDLIN( 144)						::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(W1) ),( (Float)(thickness) ));
HXDLIN( 144)						fullFrame->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXDLIN( 144)						::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(thickness) ),( (Float)(H1) ));
HXDLIN( 144)						fullFrame->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXDLIN( 144)						::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)((W1 - thickness)) ),( (Float)(0) ),( (Float)(thickness) ),( (Float)(H1) ));
HXDLIN( 144)						fullFrame->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXDLIN( 144)						::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)((H1 - thickness)) ),( (Float)(W1) ),( (Float)(thickness) ));
HXDLIN( 144)						fullFrame->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            					}
            					else {
HXLINE( 144)						fullFrame->fillRect(fullFrame->rect,color);
            					}
            				}
            				break;
            			}
            		}
HXLINE( 146)		 ::openfl::display::BitmapData result =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,(W * cols),(H * rows),true,0);
HXLINE( 147)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 147)		point->_inPool = false;
HXDLIN( 147)		 ::flixel::math::FlxBasePoint p = point;
HXLINE( 148)		int degreeInterval;
HXDLIN( 148)		if (clockwise) {
HXLINE( 148)			degreeInterval = 1;
            		}
            		else {
HXLINE( 148)			degreeInterval = -1;
            		}
HXDLIN( 148)		Float degreeInterval1 = (( (Float)((degreeInterval * 360)) ) / ( (Float)(frames) ));
HXLINE( 150)		 ::openfl::display::BitmapData mask = ::flixel::util::FlxBitmapDataPool_obj::get(result->width,result->height,result->transparent,0,true);
HXLINE( 152)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 152)		point1->_inPool = false;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint polygon_0 = point1;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 152)		point2->_inPool = false;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint polygon_1 = point2;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint point3 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 152)		point3->_inPool = false;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint polygon_2 = point3;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint point4 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 152)		point4->_inPool = false;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint polygon_3 = point4;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint point5 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 152)		point5->_inPool = false;
HXDLIN( 152)		 ::flixel::math::FlxBasePoint polygon_4 = point5;
HXLINE( 153)		{
HXLINE( 153)			int _g = 0;
HXDLIN( 153)			int _g1 = frames;
HXDLIN( 153)			while((_g < _g1)){
HXLINE( 153)				_g = (_g + 1);
HXDLIN( 153)				int i = (_g - 1);
HXLINE( 155)				::flixel::addons::display::FlxPieDialUtils_obj::_point->setTo(( (Float)((::hx::Mod(i,cols) * W)) ),( (Float)((::Std_obj::_hx_int((( (Float)(i) ) / ( (Float)(cols) ))) * H)) ));
HXLINE( 156)				result->copyPixels(fullFrame,fullFrame->rect,::flixel::addons::display::FlxPieDialUtils_obj::_point,null(),null(),null());
HXLINE( 157)				if ((i <= 0)) {
HXLINE( 159)					mask->fillRect(fullFrame->rect,-1);
            				}
            				else {
HXLINE( 163)					Float angle = (degreeInterval1 * ( (Float)(i) ));
HXLINE( 164)					maskFrame->fillRect(maskFrame->rect,0);
HXLINE( 165)					::flixel::addons::display::FlxPieDialUtils_obj::drawSweep(maskFrame,angle,null());
HXLINE( 166)					mask->copyPixels(maskFrame,maskFrame->rect,::flixel::addons::display::FlxPieDialUtils_obj::_point,null(),null(),true);
            				}
            			}
            		}
HXLINE( 170)		result->copyPixels(result,result->rect,::flixel::addons::display::FlxPieDialUtils_obj::_zero,mask,null(),null());
HXLINE( 171)		::flixel::util::FlxBitmapDataPool_obj::put(mask);
HXLINE( 172)		::flixel::util::FlxBitmapDataPool_obj::put(maskFrame);
HXLINE( 173)		::flixel::util::FlxBitmapDataPool_obj::put(fullFrame);
HXLINE( 175)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxPieDialUtils_obj,renderPieDial,return )

 ::openfl::display::BitmapData FlxPieDialUtils_obj::drawShape( ::openfl::display::BitmapData dest,int radius,int color, ::flixel::addons::display::FlxPieDialShape shape,::hx::Null< int >  __o_innerRadius){
            		int innerRadius = __o_innerRadius.Default(0);
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_188_drawShape)
HXLINE( 189)		int W = (radius << 1);
HXLINE( 190)		int H = (radius << 1);
HXLINE( 192)		switch((int)(shape->_hx_getIndex())){
            			case (int)0: {
HXLINE( 208)				bool _hx_tmp;
HXDLIN( 208)				if ((innerRadius > 0)) {
HXLINE( 208)					_hx_tmp = (innerRadius < radius);
            				}
            				else {
HXLINE( 208)					_hx_tmp = false;
            				}
HXDLIN( 208)				if (_hx_tmp) {
HXLINE( 209)					 ::openfl::display::BitmapData alpha = ::flixel::util::FlxBitmapDataPool_obj::get(W,H,false,-16777216,true);
HXLINE( 210)					alpha->fillRect(alpha->rect,-16777216);
HXLINE( 211)					::flixel::addons::display::FlxPieDialUtils_obj::drawCircle(alpha,radius,-1,null(), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("smoothing",74,d5,e1,95),true)));
HXLINE( 212)					::flixel::addons::display::FlxPieDialUtils_obj::drawCircle(alpha,innerRadius,-16777216,null(), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("smoothing",74,d5,e1,95),true)));
HXLINE( 214)					alpha->copyPixels(dest,dest->rect,::flixel::addons::display::FlxPieDialUtils_obj::_zero,null(),null(),true);
HXLINE( 216)					dest->fillRect(dest->rect,color);
HXLINE( 217)					dest->copyChannel(alpha,alpha->rect,::flixel::addons::display::FlxPieDialUtils_obj::_zero,1,8);
HXLINE( 219)					::flixel::util::FlxBitmapDataPool_obj::put(alpha);
            				}
            				else {
HXLINE( 222)					::flixel::addons::display::FlxPieDialUtils_obj::drawCircle(dest,radius,color,null(),null());
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 194)				bool _hx_tmp1;
HXDLIN( 194)				if ((innerRadius > 0)) {
HXLINE( 194)					_hx_tmp1 = (innerRadius < radius);
            				}
            				else {
HXLINE( 194)					_hx_tmp1 = false;
            				}
HXDLIN( 194)				if (_hx_tmp1) {
HXLINE( 195)					int thickness = (radius - innerRadius);
HXLINE( 196)					::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(W) ),( (Float)(thickness) ));
HXLINE( 197)					dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXLINE( 198)					::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(thickness) ),( (Float)(H) ));
HXLINE( 199)					dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXLINE( 200)					::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)((W - thickness)) ),( (Float)(0) ),( (Float)(thickness) ),( (Float)(H) ));
HXLINE( 201)					dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXLINE( 202)					::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)((H - thickness)) ),( (Float)(W) ),( (Float)(thickness) ));
HXLINE( 203)					dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            				}
            				else {
HXLINE( 206)					dest->fillRect(dest->rect,color);
            				}
            			}
            			break;
            		}
HXLINE( 224)		return dest;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxPieDialUtils_obj,drawShape,return )

::Array< ::Dynamic> FlxPieDialUtils_obj::sweepPoints;

void FlxPieDialUtils_obj::drawSweep( ::openfl::display::BitmapData dest,Float degrees,::hx::Null< int >  __o_color){
            		int color = __o_color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_239_drawSweep)
HXLINE( 240)		degrees = ::hx::Mod(degrees,360);
HXLINE( 241)		::Array< ::Dynamic> p = ::flixel::addons::display::FlxPieDialUtils_obj::sweepPoints;
HXLINE( 242)		int radius = (dest->width >> 1);
HXLINE( 243)		 ::flixel::math::FlxBasePoint this1 = p->__get(0).StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN( 243)		this1->set_x(( (Float)(radius) ));
HXDLIN( 243)		this1->set_y(( (Float)(radius) ));
HXDLIN( 243)		 ::flixel::math::FlxBasePoint center = this1;
HXLINE( 244)		Float cornerLength = ::Math_obj::sqrt(((center->x * center->x) + (center->y * center->y)));
HXLINE( 246)		if ((degrees >= 270)) {
HXLINE( 249)			::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(radius) ),( (Float)(0) ),( (Float)(radius) ),( (Float)(dest->height) ));
HXLINE( 250)			dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXLINE( 252)			::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(radius) ),( (Float)(radius) ),( (Float)(radius) ));
HXLINE( 253)			dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            		}
            		else {
HXLINE( 255)			if ((degrees >= 180)) {
HXLINE( 258)				::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(radius) ),( (Float)(0) ),( (Float)(radius) ),( (Float)(dest->height) ));
HXLINE( 259)				dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            			}
            			else {
HXLINE( 261)				if ((degrees >= 90)) {
HXLINE( 264)					::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(radius) ),( (Float)(0) ),( (Float)(radius) ),( (Float)(radius) ));
HXLINE( 265)					dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            				}
            				else {
HXLINE( 267)					if ((degrees <= -270)) {
HXLINE( 270)						::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(radius) ),( (Float)(dest->height) ));
HXLINE( 271)						dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
HXLINE( 273)						::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(radius) ),( (Float)(radius) ),( (Float)(radius) ),( (Float)(radius) ));
HXLINE( 274)						dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            					}
            					else {
HXLINE( 276)						if ((degrees <= -180)) {
HXLINE( 279)							::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(radius) ),( (Float)(dest->height) ));
HXLINE( 280)							dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            						}
            						else {
HXLINE( 282)							if ((degrees <= -90)) {
HXLINE( 285)								::flixel::addons::display::FlxPieDialUtils_obj::_rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(radius) ),( (Float)(radius) ));
HXLINE( 286)								dest->fillRect(::flixel::addons::display::FlxPieDialUtils_obj::_rect,color);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 290)		if ((::Math_obj::abs(::hx::Mod(degrees,90)) < 45)) {
HXLINE( 292)			{
HXLINE( 292)				Float degrees1 = ( (Float)((-90 + (::Std_obj::_hx_int((degrees / ( (Float)(90) ))) * 90))) );
HXDLIN( 292)				 ::flixel::math::FlxBasePoint this2 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(p->__get(1).StaticCast<  ::flixel::math::FlxBasePoint >(),( (Float)(radius) ),(degrees1 * (::Math_obj::PI / ( (Float)(180) ))));
HXDLIN( 292)				{
HXLINE( 292)					{
HXLINE( 292)						Float y = center->y;
HXDLIN( 292)						this2->set_x((this2->x + center->x));
HXDLIN( 292)						this2->set_y((this2->y + y));
            					}
HXDLIN( 292)					{
HXLINE( 292)						 ::flixel::math::FlxBasePoint _this = center;
HXDLIN( 292)						if (_this->_weak) {
HXLINE( 292)							_this->put();
            						}
            					}
            				}
            			}
HXLINE( 293)			{
HXLINE( 293)				 ::flixel::math::FlxBasePoint this3 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(p->__get(2).StaticCast<  ::flixel::math::FlxBasePoint >(),cornerLength,((-90 + degrees) * (::Math_obj::PI / ( (Float)(180) ))));
HXDLIN( 293)				{
HXLINE( 293)					{
HXLINE( 293)						Float y1 = center->y;
HXDLIN( 293)						this3->set_x((this3->x + center->x));
HXDLIN( 293)						this3->set_y((this3->y + y1));
            					}
HXDLIN( 293)					{
HXLINE( 293)						 ::flixel::math::FlxBasePoint _this1 = center;
HXDLIN( 293)						if (_this1->_weak) {
HXLINE( 293)							_this1->put();
            						}
            					}
            				}
            			}
HXLINE( 294)			{
HXLINE( 294)				 ::flixel::math::FlxBasePoint this4 = p->__get(3).StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN( 294)				{
HXLINE( 294)					Float y2 = center->y;
HXDLIN( 294)					this4->set_x(center->x);
HXDLIN( 294)					this4->set_y(y2);
            				}
HXDLIN( 294)				{
HXLINE( 294)					 ::flixel::math::FlxBasePoint _this2 = center;
HXDLIN( 294)					if (_this2->_weak) {
HXLINE( 294)						_this2->put();
            					}
            				}
            			}
            		}
            		else {
HXLINE( 298)			int quadDegreesStart = (::Std_obj::_hx_int((degrees / ( (Float)(90) ))) * 90);
HXLINE( 299)			int cornerDegrees;
HXDLIN( 299)			if ((degrees < 0)) {
HXLINE( 299)				cornerDegrees = -45;
            			}
            			else {
HXLINE( 299)				cornerDegrees = 45;
            			}
HXDLIN( 299)			int cornerDegrees1 = (quadDegreesStart + cornerDegrees);
HXLINE( 300)			{
HXLINE( 300)				 ::flixel::math::FlxBasePoint this5 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(p->__get(1).StaticCast<  ::flixel::math::FlxBasePoint >(),( (Float)(radius) ),(( (Float)((-90 + quadDegreesStart)) ) * (::Math_obj::PI / ( (Float)(180) ))));
HXDLIN( 300)				{
HXLINE( 300)					{
HXLINE( 300)						Float y3 = center->y;
HXDLIN( 300)						this5->set_x((this5->x + center->x));
HXDLIN( 300)						this5->set_y((this5->y + y3));
            					}
HXDLIN( 300)					{
HXLINE( 300)						 ::flixel::math::FlxBasePoint _this3 = center;
HXDLIN( 300)						if (_this3->_weak) {
HXLINE( 300)							_this3->put();
            						}
            					}
            				}
            			}
HXLINE( 301)			{
HXLINE( 301)				 ::flixel::math::FlxBasePoint this6 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(p->__get(2).StaticCast<  ::flixel::math::FlxBasePoint >(),cornerLength,(( (Float)((-90 + cornerDegrees1)) ) * (::Math_obj::PI / ( (Float)(180) ))));
HXDLIN( 301)				{
HXLINE( 301)					{
HXLINE( 301)						Float y4 = center->y;
HXDLIN( 301)						this6->set_x((this6->x + center->x));
HXDLIN( 301)						this6->set_y((this6->y + y4));
            					}
HXDLIN( 301)					{
HXLINE( 301)						 ::flixel::math::FlxBasePoint _this4 = center;
HXDLIN( 301)						if (_this4->_weak) {
HXLINE( 301)							_this4->put();
            						}
            					}
            				}
            			}
HXLINE( 302)			{
HXLINE( 302)				 ::flixel::math::FlxBasePoint this7 = ::flixel::math::_FlxPoint::FlxPoint_Impl__obj::setPolarRadians(p->__get(3).StaticCast<  ::flixel::math::FlxBasePoint >(),cornerLength,((-90 + degrees) * (::Math_obj::PI / ( (Float)(180) ))));
HXDLIN( 302)				{
HXLINE( 302)					{
HXLINE( 302)						Float y5 = center->y;
HXDLIN( 302)						this7->set_x((this7->x + center->x));
HXDLIN( 302)						this7->set_y((this7->y + y5));
            					}
HXDLIN( 302)					{
HXLINE( 302)						 ::flixel::math::FlxBasePoint _this5 = center;
HXDLIN( 302)						if (_this5->_weak) {
HXLINE( 302)							_this5->put();
            						}
            					}
            				}
            			}
            		}
HXLINE( 305)		::flixel::addons::display::FlxPieDialUtils_obj::drawPolygon(dest,p,color,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxPieDialUtils_obj,drawSweep,(void))

 ::openfl::display::BitmapData FlxPieDialUtils_obj::drawCircle( ::openfl::display::BitmapData bitmap, ::Dynamic radius,::hx::Null< int >  __o_color, ::Dynamic lineStyle, ::Dynamic drawStyle){
            		int color = __o_color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_321_drawCircle)
HXLINE( 322)		Float x = (( (Float)(bitmap->width) ) * ((Float)0.5));
HXLINE( 323)		Float y = (( (Float)(bitmap->height) ) * ((Float)0.5));
HXLINE( 325)		if (::hx::IsNull( radius )) {
HXLINE( 326)			radius = (::Math_obj::min(( (Float)(bitmap->width) ),( (Float)(bitmap->height) )) * ((Float)0.5));
            		}
HXLINE( 328)		{
HXLINE( 328)			::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->clear();
HXDLIN( 328)			if (::hx::IsNotNull( lineStyle )) {
HXLINE( 328)				 ::Dynamic color1;
HXDLIN( 328)				if (::hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic) )) {
HXLINE( 328)					color1 = -16777216;
            				}
            				else {
HXLINE( 328)					color1 = lineStyle->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic);
            				}
HXDLIN( 328)				if (::hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),::hx::paccDynamic) )) {
HXLINE( 328)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),1,::hx::paccDynamic);
            				}
HXDLIN( 328)				if (::hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),::hx::paccDynamic) )) {
HXLINE( 328)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,::hx::paccDynamic);
            				}
HXDLIN( 328)				if (::hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),::hx::paccDynamic) )) {
HXLINE( 328)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),3,::hx::paccDynamic);
            				}
HXDLIN( 328)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),::hx::paccDynamic),(( (int)(color1) ) & 16777215),(( (Float)(((( (int)(color1) ) >> 24) & 255)) ) / ( (Float)(255) )),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),::hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),::hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),::hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),::hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),::hx::paccDynamic));
            			}
HXDLIN( 328)			if ((color != 0)) {
HXLINE( 328)				::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->beginFill((color & 16777215),(( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )));
            			}
            		}
HXLINE( 329)		::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->drawCircle(x,y,( (Float)(radius) ));
HXLINE( 330)		{
HXLINE( 330)			 ::Dynamic style = drawStyle;
HXDLIN( 330)			::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->endFill();
HXDLIN( 330)			if (::hx::IsNull( style )) {
HXLINE( 330)				style =  ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("smoothing",74,d5,e1,95),false));
            			}
            			else {
HXLINE( 330)				if (::hx::IsNull( style->__Field(HX_("smoothing",74,d5,e1,95),::hx::paccDynamic) )) {
HXLINE( 330)					style->__SetField(HX_("smoothing",74,d5,e1,95),false,::hx::paccDynamic);
            				}
            			}
HXDLIN( 330)			 ::openfl::display::Sprite sprite = ::flixel::util::FlxSpriteUtil_obj::flashGfxSprite;
HXDLIN( 330)			bitmap->draw(sprite,( ( ::openfl::geom::Matrix)(style->__Field(HX_("matrix",41,36,c8,bb),::hx::paccDynamic)) ),( ( ::openfl::geom::ColorTransform)(style->__Field(HX_("colorTransform",89,d7,3f,ad),::hx::paccDynamic)) ),style->__Field(HX_("blendMode",54,e4,37,0c),::hx::paccDynamic),( ( ::openfl::geom::Rectangle)(style->__Field(HX_("clipRect",14,90,6a,58),::hx::paccDynamic)) ),style->__Field(HX_("smoothing",74,d5,e1,95),::hx::paccDynamic));
            		}
HXLINE( 331)		return bitmap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxPieDialUtils_obj,drawCircle,return )

 ::openfl::display::BitmapData FlxPieDialUtils_obj::drawPolygon( ::openfl::display::BitmapData bitmap,::Array< ::Dynamic> vertices,::hx::Null< int >  __o_fillColor, ::Dynamic lineStyle, ::Dynamic drawStyle){
            		int fillColor = __o_fillColor.Default(-1);
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_346_drawPolygon)
HXLINE( 347)		{
HXLINE( 347)			::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->clear();
HXDLIN( 347)			if (::hx::IsNotNull( lineStyle )) {
HXLINE( 347)				 ::Dynamic color;
HXDLIN( 347)				if (::hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic) )) {
HXLINE( 347)					color = -16777216;
            				}
            				else {
HXLINE( 347)					color = lineStyle->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic);
            				}
HXDLIN( 347)				if (::hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),::hx::paccDynamic) )) {
HXLINE( 347)					lineStyle->__SetField(HX_("thickness",74,f1,66,5a),1,::hx::paccDynamic);
            				}
HXDLIN( 347)				if (::hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),::hx::paccDynamic) )) {
HXLINE( 347)					lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,::hx::paccDynamic);
            				}
HXDLIN( 347)				if (::hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),::hx::paccDynamic) )) {
HXLINE( 347)					lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),3,::hx::paccDynamic);
            				}
HXDLIN( 347)				::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),::hx::paccDynamic),(( (int)(color) ) & 16777215),(( (Float)(((( (int)(color) ) >> 24) & 255)) ) / ( (Float)(255) )),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),::hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),::hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),::hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),::hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),::hx::paccDynamic));
            			}
HXDLIN( 347)			if ((fillColor != 0)) {
HXLINE( 347)				::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->beginFill((fillColor & 16777215),(( (Float)(((fillColor >> 24) & 255)) ) / ( (Float)(255) )));
            			}
            		}
HXLINE( 348)		 ::flixel::math::FlxBasePoint p = vertices->shift().StaticCast<  ::flixel::math::FlxBasePoint >();
HXLINE( 349)		::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->moveTo(p->x,p->y);
HXLINE( 350)		{
HXLINE( 350)			int _g = 0;
HXDLIN( 350)			while((_g < vertices->length)){
HXLINE( 350)				 ::flixel::math::FlxBasePoint p1 = vertices->__get(_g).StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN( 350)				_g = (_g + 1);
HXLINE( 352)				::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->lineTo(p1->x,p1->y);
            			}
            		}
HXLINE( 354)		{
HXLINE( 354)			 ::Dynamic style = drawStyle;
HXDLIN( 354)			::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->endFill();
HXDLIN( 354)			if (::hx::IsNull( style )) {
HXLINE( 354)				style =  ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("smoothing",74,d5,e1,95),false));
            			}
            			else {
HXLINE( 354)				if (::hx::IsNull( style->__Field(HX_("smoothing",74,d5,e1,95),::hx::paccDynamic) )) {
HXLINE( 354)					style->__SetField(HX_("smoothing",74,d5,e1,95),false,::hx::paccDynamic);
            				}
            			}
HXDLIN( 354)			 ::openfl::display::Sprite sprite = ::flixel::util::FlxSpriteUtil_obj::flashGfxSprite;
HXDLIN( 354)			bitmap->draw(sprite,( ( ::openfl::geom::Matrix)(style->__Field(HX_("matrix",41,36,c8,bb),::hx::paccDynamic)) ),( ( ::openfl::geom::ColorTransform)(style->__Field(HX_("colorTransform",89,d7,3f,ad),::hx::paccDynamic)) ),style->__Field(HX_("blendMode",54,e4,37,0c),::hx::paccDynamic),( ( ::openfl::geom::Rectangle)(style->__Field(HX_("clipRect",14,90,6a,58),::hx::paccDynamic)) ),style->__Field(HX_("smoothing",74,d5,e1,95),::hx::paccDynamic));
            		}
HXLINE( 355)		vertices->unshift(p);
HXLINE( 356)		return bitmap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxPieDialUtils_obj,drawPolygon,return )

void FlxPieDialUtils_obj::beginDraw(int color, ::Dynamic lineStyle){
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_360_beginDraw)
HXLINE( 361)		::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->clear();
HXLINE( 362)		if (::hx::IsNotNull( lineStyle )) {
HXLINE( 362)			 ::Dynamic color1;
HXDLIN( 362)			if (::hx::IsNull( lineStyle->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic) )) {
HXLINE( 362)				color1 = -16777216;
            			}
            			else {
HXLINE( 362)				color1 = lineStyle->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic);
            			}
HXDLIN( 362)			if (::hx::IsNull( lineStyle->__Field(HX_("thickness",74,f1,66,5a),::hx::paccDynamic) )) {
HXLINE( 362)				lineStyle->__SetField(HX_("thickness",74,f1,66,5a),1,::hx::paccDynamic);
            			}
HXDLIN( 362)			if (::hx::IsNull( lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),::hx::paccDynamic) )) {
HXLINE( 362)				lineStyle->__SetField(HX_("pixelHinting",d5,9b,fb,6c),false,::hx::paccDynamic);
            			}
HXDLIN( 362)			if (::hx::IsNull( lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),::hx::paccDynamic) )) {
HXLINE( 362)				lineStyle->__SetField(HX_("miterLimit",f6,5c,6a,54),3,::hx::paccDynamic);
            			}
HXDLIN( 362)			::flixel::util::FlxSpriteUtil_obj::flashGfx->lineStyle(lineStyle->__Field(HX_("thickness",74,f1,66,5a),::hx::paccDynamic),(( (int)(color1) ) & 16777215),(( (Float)(((( (int)(color1) ) >> 24) & 255)) ) / ( (Float)(255) )),lineStyle->__Field(HX_("pixelHinting",d5,9b,fb,6c),::hx::paccDynamic),lineStyle->__Field(HX_("scaleMode",0d,db,d3,2b),::hx::paccDynamic),lineStyle->__Field(HX_("capsStyle",50,61,32,83),::hx::paccDynamic),lineStyle->__Field(HX_("jointStyle",87,ef,1c,e2),::hx::paccDynamic),lineStyle->__Field(HX_("miterLimit",f6,5c,6a,54),::hx::paccDynamic));
            		}
HXLINE( 364)		if ((color != 0)) {
HXLINE( 365)			::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->beginFill((color & 16777215),(( (Float)(((color >> 24) & 255)) ) / ( (Float)(255) )));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPieDialUtils_obj,beginDraw,(void))

 ::openfl::display::BitmapData FlxPieDialUtils_obj::endDraw( ::openfl::display::BitmapData bitmap, ::Dynamic style){
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_369_endDraw)
HXLINE( 370)		::flixel::addons::display::FlxPieDialUtils_obj::flashGfx->endFill();
HXLINE( 371)		if (::hx::IsNull( style )) {
HXLINE( 372)			style =  ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("smoothing",74,d5,e1,95),false));
            		}
            		else {
HXLINE( 373)			if (::hx::IsNull( style->__Field(HX_("smoothing",74,d5,e1,95),::hx::paccDynamic) )) {
HXLINE( 374)				style->__SetField(HX_("smoothing",74,d5,e1,95),false,::hx::paccDynamic);
            			}
            		}
HXLINE( 376)		 ::openfl::display::Sprite sprite = ::flixel::util::FlxSpriteUtil_obj::flashGfxSprite;
HXLINE( 377)		bitmap->draw(sprite,( ( ::openfl::geom::Matrix)(style->__Field(HX_("matrix",41,36,c8,bb),::hx::paccDynamic)) ),( ( ::openfl::geom::ColorTransform)(style->__Field(HX_("colorTransform",89,d7,3f,ad),::hx::paccDynamic)) ),style->__Field(HX_("blendMode",54,e4,37,0c),::hx::paccDynamic),( ( ::openfl::geom::Rectangle)(style->__Field(HX_("clipRect",14,90,6a,58),::hx::paccDynamic)) ),style->__Field(HX_("smoothing",74,d5,e1,95),::hx::paccDynamic));
HXLINE( 378)		return bitmap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxPieDialUtils_obj,endDraw,return )


FlxPieDialUtils_obj::FlxPieDialUtils_obj()
{
}

bool FlxPieDialUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_rect") ) { outValue = ( _rect ); return true; }
		if (HX_FIELD_EQ(inName,"_zero") ) { outValue = ( _zero ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { outValue = ( _point ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endDraw") ) { outValue = endDraw_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"flashGfx") ) { outValue = ( flashGfx ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawShape") ) { outValue = drawShape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawSweep") ) { outValue = drawSweep_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"beginDraw") ) { outValue = beginDraw_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawCircle") ) { outValue = drawCircle_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sweepPoints") ) { outValue = ( sweepPoints ); return true; }
		if (HX_FIELD_EQ(inName,"drawPolygon") ) { outValue = drawPolygon_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderPieDial") ) { outValue = renderPieDial_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getPieDialGraphic") ) { outValue = getPieDialGraphic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"renderRadialGauge") ) { outValue = renderRadialGauge_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getRadialGaugeGraphic") ) { outValue = getRadialGaugeGraphic_dyn(); return true; }
	}
	return false;
}

bool FlxPieDialUtils_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_rect") ) { _rect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"_zero") ) { _zero=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"flashGfx") ) { flashGfx=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sweepPoints") ) { sweepPoints=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxPieDialUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxPieDialUtils_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(void *) &FlxPieDialUtils_obj::_rect,HX_("_rect",03,69,b8,fe)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(void *) &FlxPieDialUtils_obj::_zero,HX_("_zero",07,2b,02,04)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(void *) &FlxPieDialUtils_obj::_point,HX_("_point",91,fb,76,c2)},
	{::hx::fsObject /*  ::openfl::display::Graphics */ ,(void *) &FlxPieDialUtils_obj::flashGfx,HX_("flashGfx",a9,b1,ce,99)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &FlxPieDialUtils_obj::sweepPoints,HX_("sweepPoints",2f,d5,d3,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void FlxPieDialUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPieDialUtils_obj::_rect,"_rect");
	HX_MARK_MEMBER_NAME(FlxPieDialUtils_obj::_zero,"_zero");
	HX_MARK_MEMBER_NAME(FlxPieDialUtils_obj::_point,"_point");
	HX_MARK_MEMBER_NAME(FlxPieDialUtils_obj::flashGfx,"flashGfx");
	HX_MARK_MEMBER_NAME(FlxPieDialUtils_obj::sweepPoints,"sweepPoints");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPieDialUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPieDialUtils_obj::_rect,"_rect");
	HX_VISIT_MEMBER_NAME(FlxPieDialUtils_obj::_zero,"_zero");
	HX_VISIT_MEMBER_NAME(FlxPieDialUtils_obj::_point,"_point");
	HX_VISIT_MEMBER_NAME(FlxPieDialUtils_obj::flashGfx,"flashGfx");
	HX_VISIT_MEMBER_NAME(FlxPieDialUtils_obj::sweepPoints,"sweepPoints");
};

#endif

::hx::Class FlxPieDialUtils_obj::__mClass;

static ::String FlxPieDialUtils_obj_sStaticFields[] = {
	HX_("_rect",03,69,b8,fe),
	HX_("_zero",07,2b,02,04),
	HX_("_point",91,fb,76,c2),
	HX_("flashGfx",a9,b1,ce,99),
	HX_("getPieDialGraphic",22,fb,7a,94),
	HX_("getRadialGaugeGraphic",64,2f,ab,ec),
	HX_("renderRadialGauge",e4,dc,21,d4),
	HX_("renderPieDial",66,65,85,7d),
	HX_("drawShape",7d,18,28,44),
	HX_("sweepPoints",2f,d5,d3,6d),
	HX_("drawSweep",48,4b,15,4e),
	HX_("drawCircle",34,ed,d0,97),
	HX_("drawPolygon",d6,46,d9,5b),
	HX_("beginDraw",cd,0a,4a,8b),
	HX_("endDraw",7f,e5,94,24),
	::String(null())
};

void FlxPieDialUtils_obj::__register()
{
	FlxPieDialUtils_obj _hx_dummy;
	FlxPieDialUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.display.FlxPieDialUtils",12,a7,85,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxPieDialUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxPieDialUtils_obj::__SetStatic;
	__mClass->mMarkFunc = FlxPieDialUtils_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxPieDialUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxPieDialUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPieDialUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPieDialUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPieDialUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxPieDialUtils_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_78_boot)
HXDLIN(  78)		_rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_79_boot)
HXDLIN(  79)		_zero =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_80_boot)
HXDLIN(  80)		_point =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_81_boot)
HXDLIN(  81)		flashGfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::Array< ::Dynamic> _hx_run(){
            			HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_230_boot)
HXDLIN( 230)			::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 230)			{
HXDLIN( 230)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 230)				point->_inPool = false;
HXDLIN( 230)				_g->push(point);
HXDLIN( 230)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 230)				point1->_inPool = false;
HXDLIN( 230)				_g->push(point1);
HXDLIN( 230)				 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 230)				point2->_inPool = false;
HXDLIN( 230)				_g->push(point2);
HXDLIN( 230)				 ::flixel::math::FlxBasePoint point3 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 230)				point3->_inPool = false;
HXDLIN( 230)				_g->push(point3);
            			}
HXDLIN( 230)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_2fb76e3d76f2074f_230_boot)
HXDLIN( 230)		sweepPoints = ( (::Array< ::Dynamic>)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
