// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_RuntimePostEffectShader
#include <shaders/RuntimePostEffectShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_429887a55eaa7dfc_101_new,"shaders.RuntimePostEffectShader","new",0x18f78b20,"shaders.RuntimePostEffectShader.new","shaders/RuntimePostEffectShader.hx",101,0x7b0af591)
HX_LOCAL_STACK_FRAME(_hx_pos_429887a55eaa7dfc_110_updateViewInfo,"shaders.RuntimePostEffectShader","updateViewInfo",0xd17bdddc,"shaders.RuntimePostEffectShader.updateViewInfo","shaders/RuntimePostEffectShader.hx",110,0x7b0af591)
HX_LOCAL_STACK_FRAME(_hx_pos_429887a55eaa7dfc_117_updateFrameInfo,"shaders.RuntimePostEffectShader","updateFrameInfo",0xaf77a2b2,"shaders.RuntimePostEffectShader.updateFrameInfo","shaders/RuntimePostEffectShader.hx",117,0x7b0af591)
HX_LOCAL_STACK_FRAME(_hx_pos_429887a55eaa7dfc_122___createGLProgram,"shaders.RuntimePostEffectShader","__createGLProgram",0x1e618803,"shaders.RuntimePostEffectShader.__createGLProgram","shaders/RuntimePostEffectShader.hx",122,0x7b0af591)
namespace shaders{

void RuntimePostEffectShader_obj::__construct(::String fragmentSource,::String vertexSource){
            	HX_STACKFRAME(&_hx_pos_429887a55eaa7dfc_101_new)
HXLINE( 183)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 185)			this->_hx___glFragmentSource = HX_("varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;  // TODO: Is this still needed? Apparently, yes!\n\t\tuniform bool hasColorTransform;\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!(hasTransform || openfl_HasColorTransform))\n\t\t\t\treturn color;\n\t\t\t\n\t\t\tif (color.a == 0.0)\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t\tif (openfl_HasColorTransform || hasColorTransform)\n\t\t\t{\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tvec4 mult = vec4 (openfl_ColorMultiplierv.rgb, 1.0);\n\t\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * mult), 0.0, 1.0);\n\t\t\t\t\n\t\t\t\tif (color.a == 0.0)\n\t\t\t\t\treturn vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t\treturn vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\t\n\t\t\treturn color * openfl_Alphav;\n\t\t}\n\t\n\n\t\t// normalized screen coord\n\t\t//   (0, 0) is the top left of the window\n\t\t//   (1, 1) is the bottom right of the window\n\t\tvarying vec2 screenCoord;\n\n\t\t// equals (FlxG.width, FlxG.height)\n\t\tuniform vec2 uScreenResolution;\n\n\t\t// equals (camera.viewLeft, camera.viewTop, camera.viewRight, camera.viewBottom)\n\t\tuniform vec4 uCameraBounds;\n\n\t\t// equals (frame.left, frame.top, frame.right, frame.bottom)\n\t\tuniform vec4 uFrameBounds;\n\n\t\t// screen coord -> world coord conversion\n\t\t// returns world coord in px\n\t\tvec2 screenToWorld(vec2 screenCoord) {\n\t\t\tfloat left = uCameraBounds.x;\n\t\t\tfloat top = uCameraBounds.y;\n\t\t\tfloat right = uCameraBounds.z;\n\t\t\tfloat bottom = uCameraBounds.w;\n\t\t\tvec2 scale = vec2(right - left, bottom - top);\n\t\t\tvec2 offset = vec2(left, top);\n\t\t\treturn screenCoord * scale + offset;\n\t\t}\n\n\t\t// world coord -> screen coord conversion\n\t\t// returns normalized screen coord\n\t\tvec2 worldToScreen(vec2 worldCoord) {\n\t\t\tfloat left = uCameraBounds.x;\n\t\t\tfloat top = uCameraBounds.y;\n\t\t\tfloat right = uCameraBounds.z;\n\t\t\tfloat bottom = uCameraBounds.w;\n\t\t\tvec2 scale = vec2(right - left, bottom - top);\n\t\t\tvec2 offset = vec2(left, top);\n\t\t\treturn (worldCoord - offset) / scale;\n\t\t}\n\n\t\t// screen coord -> frame coord conversion\n\t\t// returns normalized frame coord\n\t\tvec2 screenToFrame(vec2 screenCoord) {\n\t\t\tfloat left = uFrameBounds.x;\n\t\t\tfloat top = uFrameBounds.y;\n\t\t\tfloat right = uFrameBounds.z;\n\t\t\tfloat bottom = uFrameBounds.w;\n\t\t\tfloat width = right - left;\n\t\t\tfloat height = bottom - top;\n\n\t\t\tfloat clampedX = clamp(screenCoord.x, left, right);\n\t\t\tfloat clampedY = clamp(screenCoord.y, top, bottom);\n\n\t\t\treturn vec2(\n\t\t\t\t(clampedX - left) / (width),\n\t\t\t\t(clampedY - top) / (height)\n\t\t\t);\n\t\t}\n\n\t\t// internally used to get the maximum `openfl_TextureCoordv`\n\t\tvec2 bitmapCoordScale() {\n\t\t\treturn openfl_TextureCoordv / screenCoord;\n\t\t}\n\n\t\t// internally used to compute bitmap coord\n\t\tvec2 screenToBitmap(vec2 screenCoord) {\n\t\t\treturn screenCoord * bitmapCoordScale();\n\t\t}\n\n\t\t// samples the frame buffer using a screen coord\n\t\tvec4 sampleBitmapScreen(vec2 screenCoord) {\n\t\t\treturn texture2D(bitmap, screenToBitmap(screenCoord));\n\t\t}\n\n\t\t// samples the frame buffer using a world coord\n\t\tvec4 sampleBitmapWorld(vec2 worldCoord) {\n\t\t\treturn sampleBitmapScreen(worldToScreen(worldCoord));\n\t\t}\n\t\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\n\n\n\t\t}",b4,ec,db,51);
            		}
HXLINE( 175)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 177)			this->_hx___glVertexSource = HX_("attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\n\n\t\t// normalized screen coord\n\t\t//   (0, 0) is the top left of the window\n\t\t//   (1, 1) is the bottom right of the window\n\t\tvarying vec2 screenCoord;\n\t\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\n\t\tif (hasColorTransform)\n\t\t{\n\t\t\tif (openfl_HasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = (openfl_ColorOffsetv * colorMultiplier) + (colorOffset / 255.0);\n\t\t\t\topenfl_ColorMultiplierv *= colorMultiplier;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}\n\t\n\n\t\tscreenCoord = vec2(\n\t\t\topenfl_TextureCoord.x > 0.0 ? 1.0 : 0.0,\n\t\t\topenfl_TextureCoord.y > 0.0 ? 1.0 : 0.0\n\t\t);\n\t\n\n\t\t}",19,02,bd,97);
            		}
HXLINE( 102)		super::__construct(fragmentSource,vertexSource);
HXLINE( 103)		this->setFloatArray(HX_("uScreenResolution",4d,4a,8e,f5),::Array_obj< Float >::__new(2)->init(0,::flixel::FlxG_obj::width)->init(1,::flixel::FlxG_obj::height));
HXLINE( 104)		this->setFloatArray(HX_("uCameraBounds",0f,f3,17,d8),::Array_obj< Float >::__new(4)->init(0,0)->init(1,0)->init(2,::flixel::FlxG_obj::width)->init(3,::flixel::FlxG_obj::height));
HXLINE( 105)		this->setFloatArray(HX_("uFrameBounds",0d,04,15,35),::Array_obj< Float >::__new(4)->init(0,0)->init(1,0)->init(2,::flixel::FlxG_obj::width)->init(3,::flixel::FlxG_obj::height));
HXLINE(  10)		this->_hx___isGenerated = true;
HXDLIN(  10)		this->_hx___initGL();
            	}

Dynamic RuntimePostEffectShader_obj::__CreateEmpty() { return new RuntimePostEffectShader_obj; }

void *RuntimePostEffectShader_obj::_hx_vtable = 0;

Dynamic RuntimePostEffectShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RuntimePostEffectShader_obj > _hx_result = new RuntimePostEffectShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool RuntimePostEffectShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1efca5b6) {
		if (inClassId<=(int)0x1361bfe4) {
			if (inClassId<=(int)0x04f93fcd) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
			} else {
				return inClassId==(int)0x1361bfe4;
			}
		} else {
			return inClassId==(int)0x1efca5b6;
		}
	} else {
		return inClassId==(int)0x7517ccbe || inClassId==(int)0x78d8d737;
	}
}

void RuntimePostEffectShader_obj::updateViewInfo(Float screenWidth,Float screenHeight, ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_429887a55eaa7dfc_110_updateViewInfo)
HXLINE( 111)		this->setFloatArray(HX_("uScreenResolution",4d,4a,8e,f5),::Array_obj< Float >::__new(2)->init(0,screenWidth)->init(1,screenHeight));
HXLINE( 112)		this->setFloatArray(HX_("uCameraBounds",0f,f3,17,d8),::Array_obj< Float >::__new(4)->init(0,(camera->scroll->x + camera->viewMarginX))->init(1,(camera->scroll->y + camera->viewMarginY))->init(2,(camera->scroll->x + (( (Float)(camera->width) ) - camera->viewMarginX)))->init(3,(camera->scroll->y + (( (Float)(camera->height) ) - camera->viewMarginY))));
            	}


HX_DEFINE_DYNAMIC_FUNC3(RuntimePostEffectShader_obj,updateViewInfo,(void))

void RuntimePostEffectShader_obj::updateFrameInfo( ::flixel::graphics::frames::FlxFrame frame){
            	HX_STACKFRAME(&_hx_pos_429887a55eaa7dfc_117_updateFrameInfo)
HXDLIN( 117)		this->setFloatArray(HX_("uFrameBounds",0d,04,15,35),::Array_obj< Float >::__new(4)->init(0,frame->uv->x)->init(1,frame->uv->width)->init(2,frame->uv->y)->init(3,frame->uv->height));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RuntimePostEffectShader_obj,updateFrameInfo,(void))

 ::lime::graphics::opengl::GLObject RuntimePostEffectShader_obj::_hx___createGLProgram(::String vertexSource,::String fragmentSource){
            	HX_STACKFRAME(&_hx_pos_429887a55eaa7dfc_122___createGLProgram)
HXDLIN( 122)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 124)			 ::lime::graphics::opengl::GLObject res = this->super::_hx___createGLProgram(vertexSource,fragmentSource);
HXLINE( 125)			return res;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 127)				 ::haxe::Exception error = ::haxe::Exception_obj::caught(_g);
HXLINE( 129)				::lime::utils::Log_obj::warn(error,::hx::SourceInfo(HX_("source/shaders/RuntimePostEffectShader.hx",85,f9,30,4d),129,HX_("shaders.RuntimePostEffectShader",2e,bb,d3,a9),HX_("__createGLProgram",43,7d,b4,bf)));
HXLINE( 130)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 122)		return null();
            	}



::hx::ObjectPtr< RuntimePostEffectShader_obj > RuntimePostEffectShader_obj::__new(::String fragmentSource,::String vertexSource) {
	::hx::ObjectPtr< RuntimePostEffectShader_obj > __this = new RuntimePostEffectShader_obj();
	__this->__construct(fragmentSource,vertexSource);
	return __this;
}

::hx::ObjectPtr< RuntimePostEffectShader_obj > RuntimePostEffectShader_obj::__alloc(::hx::Ctx *_hx_ctx,::String fragmentSource,::String vertexSource) {
	RuntimePostEffectShader_obj *__this = (RuntimePostEffectShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RuntimePostEffectShader_obj), true, "shaders.RuntimePostEffectShader"));
	*(void **)__this = RuntimePostEffectShader_obj::_hx_vtable;
	__this->__construct(fragmentSource,vertexSource);
	return __this;
}

RuntimePostEffectShader_obj::RuntimePostEffectShader_obj()
{
}

void RuntimePostEffectShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RuntimePostEffectShader);
	HX_MARK_MEMBER_NAME(uScreenResolution,"uScreenResolution");
	HX_MARK_MEMBER_NAME(uCameraBounds,"uCameraBounds");
	HX_MARK_MEMBER_NAME(uFrameBounds,"uFrameBounds");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RuntimePostEffectShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uScreenResolution,"uScreenResolution");
	HX_VISIT_MEMBER_NAME(uCameraBounds,"uCameraBounds");
	HX_VISIT_MEMBER_NAME(uFrameBounds,"uFrameBounds");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val RuntimePostEffectShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"uFrameBounds") ) { return ::hx::Val( uFrameBounds ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"uCameraBounds") ) { return ::hx::Val( uCameraBounds ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateViewInfo") ) { return ::hx::Val( updateViewInfo_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateFrameInfo") ) { return ::hx::Val( updateFrameInfo_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__createGLProgram") ) { return ::hx::Val( _hx___createGLProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"uScreenResolution") ) { return ::hx::Val( uScreenResolution ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RuntimePostEffectShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"uFrameBounds") ) { uFrameBounds=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"uCameraBounds") ) { uCameraBounds=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"uScreenResolution") ) { uScreenResolution=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RuntimePostEffectShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uScreenResolution",4d,4a,8e,f5));
	outFields->push(HX_("uCameraBounds",0f,f3,17,d8));
	outFields->push(HX_("uFrameBounds",0d,04,15,35));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RuntimePostEffectShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(RuntimePostEffectShader_obj,uScreenResolution),HX_("uScreenResolution",4d,4a,8e,f5)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(RuntimePostEffectShader_obj,uCameraBounds),HX_("uCameraBounds",0f,f3,17,d8)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(RuntimePostEffectShader_obj,uFrameBounds),HX_("uFrameBounds",0d,04,15,35)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RuntimePostEffectShader_obj_sStaticStorageInfo = 0;
#endif

static ::String RuntimePostEffectShader_obj_sMemberFields[] = {
	HX_("updateViewInfo",9c,20,07,b8),
	HX_("updateFrameInfo",f2,c7,c6,82),
	HX_("__createGLProgram",43,7d,b4,bf),
	HX_("uScreenResolution",4d,4a,8e,f5),
	HX_("uCameraBounds",0f,f3,17,d8),
	HX_("uFrameBounds",0d,04,15,35),
	::String(null()) };

::hx::Class RuntimePostEffectShader_obj::__mClass;

void RuntimePostEffectShader_obj::__register()
{
	RuntimePostEffectShader_obj _hx_dummy;
	RuntimePostEffectShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.RuntimePostEffectShader",2e,bb,d3,a9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RuntimePostEffectShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RuntimePostEffectShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RuntimePostEffectShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RuntimePostEffectShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
