// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_cutscenes_DialogueBoxMeme
#include <cutscenes/DialogueBoxMeme.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a84c99dedaa96de1_8_new,"cutscenes.DialogueBoxMeme","new",0xb54c6030,"cutscenes.DialogueBoxMeme.new","cutscenes/DialogueBoxMeme.hx",8,0x13a3c981)
HX_LOCAL_STACK_FRAME(_hx_pos_a84c99dedaa96de1_41_update,"cutscenes.DialogueBoxMeme","update",0x4c0cb839,"cutscenes.DialogueBoxMeme.update","cutscenes/DialogueBoxMeme.hx",41,0x13a3c981)
namespace cutscenes{

void DialogueBoxMeme_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a84c99dedaa96de1_8_new)
HXLINE(  40)		this->index = 0;
HXLINE(  19)		this->de = ::Array_obj< int >::__new(0);
HXLINE(  18)		this->dr = 0;
HXLINE(  12)		::String _hx_tmp = HX_("IN A LUCID PARADISE",5c,2c,60,c9).toLowerCase();
HXLINE(  13)		::String _hx_tmp1 = HX_(" YOU COME HERE TO BREAK THE TIME",4d,f0,3f,da).toLowerCase();
HXLINE(  14)		::String _hx_tmp2 = HX_(" I'LL MAKE YOU A PROTAGONIST",ce,70,c9,7c).toLowerCase();
HXLINE(  11)		this->dialogues = ::Array_obj< ::String >::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,HX_(" AFTER WE PLAY HIDE AND SEEK",01,e7,1e,9c).toLowerCase());
HXLINE(  21)		super::__construct(null(),null(),null());
HXLINE(  23)		int _hx_tmp3 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6)));
HXDLIN(  23)		this->swagDialogue =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(240) ),( (Float)(500) ),_hx_tmp3,(((this->dialogues->__get(0) + this->dialogues->__get(1)) + this->dialogues->__get(2)) + this->dialogues->__get(3)),32,null());
HXLINE(  24)		 ::flixel::addons::text::FlxTypeText _hx_tmp11 = this->swagDialogue;
HXDLIN(  24)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("pixel-latin.ttf",b5,c3,d6,c6));
HXDLIN(  24)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  24)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  24)		if (::hx::IsNotNull( str )) {
HXLINE(  24)			key = str;
            		}
HXDLIN(  24)		::String folderKey = key;
HXDLIN(  24)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  24)		::String _hx_tmp21;
HXDLIN(  24)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  24)			_hx_tmp21 = file;
            		}
            		else {
HXLINE(  24)			_hx_tmp21 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  24)		_hx_tmp11->set_font(_hx_tmp21);
HXLINE(  25)		this->swagDialogue->set_color(-12640223);
HXLINE(  26)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp31 = ::flixel::FlxG_obj::sound;
HXDLIN(  26)		 ::flixel::sound::FlxSound _hx_tmp4 = _hx_tmp31->load(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("pixelText",53,7a,83,06)),null(),true,null()),((Float)0.6),null(),null(),null(),null(),null(),null(),null());
HXDLIN(  26)		this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp4);
HXLINE(  27)		this->swagDialogue->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXLINE(  28)		this->swagDialogue->set_borderColor(-2583404);
HXLINE(  29)		{
HXLINE(  29)			 ::flixel::math::FlxBasePoint this2 = this->swagDialogue->_shadowOffset;
HXDLIN(  29)			this2->set_x(( (Float)(2) ));
HXDLIN(  29)			this2->set_y(( (Float)(2) ));
            		}
HXLINE(  30)		this->add(this->swagDialogue);
HXLINE(  32)		this->swagDialogue->start(((Float)0.04),false,null(),null(),null());
HXLINE(  34)		{
HXLINE(  34)			int _g = 0;
HXDLIN(  34)			int _g1 = this->dialogues->length;
HXDLIN(  34)			while((_g < _g1)){
HXLINE(  34)				_g = (_g + 1);
HXDLIN(  34)				int i = (_g - 1);
HXLINE(  35)				 ::cutscenes::DialogueBoxMeme _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  35)				_hx_tmp5->dr = (_hx_tmp5->dr + this->dialogues->__get(i).length);
HXLINE(  36)				this->de->push(this->dr);
            			}
            		}
            	}

Dynamic DialogueBoxMeme_obj::__CreateEmpty() { return new DialogueBoxMeme_obj; }

void *DialogueBoxMeme_obj::_hx_vtable = 0;

Dynamic DialogueBoxMeme_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DialogueBoxMeme_obj > _hx_result = new DialogueBoxMeme_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DialogueBoxMeme_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x40ccc33a) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x40ccc33a;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void DialogueBoxMeme_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a84c99dedaa96de1_41_update)
HXLINE(  42)		this->super::update(elapsed);
HXLINE(  46)		if ((this->swagDialogue->text.length >= this->de->__get(this->index))) {
HXLINE(  47)			 ::cutscenes::DialogueBoxMeme _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  47)			_hx_tmp->index = (_hx_tmp->index + 1);
HXLINE(  48)			this->swagDialogue->paused = true;
            		}
HXLINE(  51)		if (::backend::Controls_obj::instance->get_ACCEPT()) {
HXLINE(  53)			this->swagDialogue->paused = false;
            		}
            	}



::hx::ObjectPtr< DialogueBoxMeme_obj > DialogueBoxMeme_obj::__new() {
	::hx::ObjectPtr< DialogueBoxMeme_obj > __this = new DialogueBoxMeme_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DialogueBoxMeme_obj > DialogueBoxMeme_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DialogueBoxMeme_obj *__this = (DialogueBoxMeme_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DialogueBoxMeme_obj), true, "cutscenes.DialogueBoxMeme"));
	*(void **)__this = DialogueBoxMeme_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DialogueBoxMeme_obj::DialogueBoxMeme_obj()
{
}

void DialogueBoxMeme_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DialogueBoxMeme);
	HX_MARK_MEMBER_NAME(swagDialogue,"swagDialogue");
	HX_MARK_MEMBER_NAME(dialogues,"dialogues");
	HX_MARK_MEMBER_NAME(dr,"dr");
	HX_MARK_MEMBER_NAME(de,"de");
	HX_MARK_MEMBER_NAME(index,"index");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DialogueBoxMeme_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(swagDialogue,"swagDialogue");
	HX_VISIT_MEMBER_NAME(dialogues,"dialogues");
	HX_VISIT_MEMBER_NAME(dr,"dr");
	HX_VISIT_MEMBER_NAME(de,"de");
	HX_VISIT_MEMBER_NAME(index,"index");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DialogueBoxMeme_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dr") ) { return ::hx::Val( dr ); }
		if (HX_FIELD_EQ(inName,"de") ) { return ::hx::Val( de ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dialogues") ) { return ::hx::Val( dialogues ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swagDialogue") ) { return ::hx::Val( swagDialogue ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DialogueBoxMeme_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"dr") ) { dr=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"de") ) { de=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dialogues") ) { dialogues=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swagDialogue") ) { swagDialogue=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DialogueBoxMeme_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("swagDialogue",c2,ad,00,ad));
	outFields->push(HX_("dialogues",5b,48,13,fa));
	outFields->push(HX_("dr",8e,57,00,00));
	outFields->push(HX_("de",81,57,00,00));
	outFields->push(HX_("index",12,9b,14,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DialogueBoxMeme_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(DialogueBoxMeme_obj,swagDialogue),HX_("swagDialogue",c2,ad,00,ad)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DialogueBoxMeme_obj,dialogues),HX_("dialogues",5b,48,13,fa)},
	{::hx::fsInt,(int)offsetof(DialogueBoxMeme_obj,dr),HX_("dr",8e,57,00,00)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(DialogueBoxMeme_obj,de),HX_("de",81,57,00,00)},
	{::hx::fsInt,(int)offsetof(DialogueBoxMeme_obj,index),HX_("index",12,9b,14,be)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DialogueBoxMeme_obj_sStaticStorageInfo = 0;
#endif

static ::String DialogueBoxMeme_obj_sMemberFields[] = {
	HX_("swagDialogue",c2,ad,00,ad),
	HX_("dialogues",5b,48,13,fa),
	HX_("dr",8e,57,00,00),
	HX_("de",81,57,00,00),
	HX_("index",12,9b,14,be),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class DialogueBoxMeme_obj::__mClass;

void DialogueBoxMeme_obj::__register()
{
	DialogueBoxMeme_obj _hx_dummy;
	DialogueBoxMeme_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("cutscenes.DialogueBoxMeme",3e,c8,b4,d5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DialogueBoxMeme_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DialogueBoxMeme_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DialogueBoxMeme_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DialogueBoxMeme_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cutscenes
