// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_cutscenes_Conversation
#include <cutscenes/Conversation.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_50_new,"cutscenes.Conversation","new",0x1c3e537a,"cutscenes.Conversation.new","cutscenes/Conversation.hx",50,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_97_textLengthList,"cutscenes.Conversation","textLengthList",0xa0a71297,"cutscenes.Conversation.textLengthList","cutscenes/Conversation.hx",97,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_112_update,"cutscenes.Conversation","update",0xe17e6f2f,"cutscenes.Conversation.update","cutscenes/Conversation.hx",112,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_182_dialogueStart,"cutscenes.Conversation","dialogueStart",0xead567c4,"cutscenes.Conversation.dialogueStart","cutscenes/Conversation.hx",182,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_173_dialogueStart,"cutscenes.Conversation","dialogueStart",0xead567c4,"cutscenes.Conversation.dialogueStart","cutscenes/Conversation.hx",173,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_192_dialogueContinue,"cutscenes.Conversation","dialogueContinue",0x4e3fb645,"cutscenes.Conversation.dialogueContinue","cutscenes/Conversation.hx",192,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_212_dialogueSpeedChange,"cutscenes.Conversation","dialogueSpeedChange",0xe7872539,"cutscenes.Conversation.dialogueSpeedChange","cutscenes/Conversation.hx",212,0x04286255)
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_229_dialogueParse,"cutscenes.Conversation","dialogueParse",0x241f8395,"cutscenes.Conversation.dialogueParse","cutscenes/Conversation.hx",229,0x04286255)
static const ::String _hx_array_data_1184ce88_11[] = {
	HX_("Cut copper stairs are a cut copper variant of stairs.",a7,25,0e,da),HX_(" Unlike other types of stairs, cut copper stairs can oxidize over time.",c2,58,12,fc),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8e3294b2a6d4e0c4_240_dialogueTemplate,"cutscenes.Conversation","dialogueTemplate",0xc8bebe18,"cutscenes.Conversation.dialogueTemplate","cutscenes/Conversation.hx",240,0x04286255)
static const ::String _hx_array_data_1184ce88_13[] = {
	HX_("Cut copper stairs are a cut copper variant of stairs.",a7,25,0e,da),HX_(" Unlike other types of stairs, cut copper stairs can oxidize over time.",c2,58,12,fc),
};
namespace cutscenes{

void Conversation_obj::__construct( ::Dynamic conversation){
            	HX_GC_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_50_new)
HXLINE(  64)		this->dialogueEnded = false;
HXLINE(  63)		this->dialoguePaused = false;
HXLINE(  62)		this->dialogueStarted = false;
HXLINE(  61)		this->dialogueOpened = false;
HXLINE(  59)		this->textIndexLengthList = ::Array_obj< int >::__new(0);
HXLINE(  58)		this->textIndexLength = 0;
HXLINE(  57)		this->textIndex = 0;
HXLINE(  56)		this->pageIndex = 0;
HXLINE(  54)		this->convTextSpeed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  53)		this->convTextLength = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  52)		this->convTextContent = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  66)		super::__construct(null(),null(),null());
HXLINE(  68)		{
HXLINE(  68)			int _g = 0;
HXDLIN(  68)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(conversation->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) );
HXDLIN(  68)			while((_g < _g1->length)){
HXLINE(  68)				 ::Dynamic dialogues = _g1->__get(_g);
HXDLIN(  68)				_g = (_g + 1);
HXLINE(  69)				this->convTextContent->push( ::Dynamic(dialogues->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic)));
HXLINE(  70)				this->convTextSpeed->push( ::Dynamic(dialogues->__Field(HX_("speedChanges",3c,50,bf,f2),::hx::paccDynamic)));
            			}
            		}
HXLINE(  72)		{
HXLINE(  72)			int _g2 = 0;
HXDLIN(  72)			::Array< ::Dynamic> _g3 = this->convTextContent;
HXDLIN(  72)			while((_g2 < _g3->length)){
HXLINE(  72)				::Array< ::String > dialogues1 = _g3->__get(_g2).StaticCast< ::Array< ::String > >();
HXDLIN(  72)				_g2 = (_g2 + 1);
HXLINE(  73)				{
HXLINE(  73)					int _g4 = 0;
HXDLIN(  73)					while((_g4 < dialogues1->length)){
HXLINE(  73)						::String lines = dialogues1->__get(_g4);
HXDLIN(  73)						_g4 = (_g4 + 1);
HXLINE(  74)						this->textLengthList(dialogues1,lines);
            					}
            				}
            			}
            		}
HXLINE(  77)		int _hx_tmp = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6)));
HXDLIN(  77)		this->convDialogue =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(240) ),( (Float)(500) ),_hx_tmp,this->convTextContent->__get(0).StaticCast< ::Array< ::String > >()->join(HX_("",00,00,00,00)),32,null());
HXLINE(  78)		 ::flixel::addons::text::FlxTypeText _hx_tmp1 = this->convDialogue;
HXDLIN(  78)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("Pixel Arial 11-Bold.ttf",33,17,d9,dc));
HXDLIN(  78)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  78)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  78)		if (::hx::IsNotNull( str )) {
HXLINE(  78)			key = str;
            		}
HXDLIN(  78)		::String folderKey = key;
HXDLIN(  78)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  78)		::String _hx_tmp2;
HXDLIN(  78)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  78)			_hx_tmp2 = file;
            		}
            		else {
HXLINE(  78)			_hx_tmp2 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  78)		_hx_tmp1->set_font(_hx_tmp2);
HXLINE(  79)		this->convDialogue->set_color(-12640223);
HXLINE(  80)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(  80)		 ::flixel::sound::FlxSound _hx_tmp4 = _hx_tmp3->load(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("pixelText",53,7a,83,06)),null(),true,null()),((Float)0.6),null(),null(),null(),null(),null(),null(),null());
HXDLIN(  80)		this->convDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp4);
HXLINE(  81)		this->convDialogue->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXLINE(  82)		this->convDialogue->set_borderColor(-2583404);
HXLINE(  83)		{
HXLINE(  83)			 ::flixel::math::FlxBasePoint this2 = this->convDialogue->_shadowOffset;
HXDLIN(  83)			this2->set_x(( (Float)(2) ));
HXDLIN(  83)			this2->set_y(( (Float)(2) ));
            		}
HXLINE(  84)		this->add(this->convDialogue);
HXLINE(  86)		this->convDialogue->start(((Float)0.04),false,null(),null(),null());
            	}

Dynamic Conversation_obj::__CreateEmpty() { return new Conversation_obj; }

void *Conversation_obj::_hx_vtable = 0;

Dynamic Conversation_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Conversation_obj > _hx_result = new Conversation_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Conversation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6c105e0c) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x6c105e0c;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Conversation_obj::textLengthList(::Array< ::String > dialogues,::String lines){
            	HX_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_97_textLengthList)
HXDLIN(  97)		bool _hx_tmp;
HXDLIN(  97)		if ((dialogues->indexOf(lines,null()) == 0)) {
HXDLIN(  97)			_hx_tmp = ((dialogues->length - 1) == 0);
            		}
            		else {
HXDLIN(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  98)			this->textIndexLength = 0;
HXLINE(  99)			this->textIndexLengthList = ::Array_obj< int >::__new(0);
HXLINE( 101)			this->convTextLength->push(::Array_obj< int >::__new(1)->init(0,lines.length));
            		}
            		else {
HXLINE( 103)			 ::cutscenes::Conversation _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 103)			_hx_tmp1->textIndexLength = (_hx_tmp1->textIndexLength + lines.length);
HXLINE( 104)			this->textIndexLengthList->push(this->textIndexLength);
HXLINE( 106)			int _hx_tmp2 = dialogues->indexOf(lines,null());
HXDLIN( 106)			if ((_hx_tmp2 == (dialogues->length - 1))) {
HXLINE( 107)				this->convTextLength->push(this->textIndexLengthList);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Conversation_obj,textLengthList,(void))

void Conversation_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_112_update)
HXLINE( 113)		this->super::update(elapsed);
HXLINE( 115)		if (!(this->dialogueStarted)) {
HXLINE( 116)			this->dialogueStart();
HXLINE( 117)			this->dialogueStarted = true;
            		}
HXLINE( 119)		this->dialogueContinue();
HXLINE( 121)		if (!(::backend::Controls_obj::instance->get_BACK())) {
HXLINE( 123)			if (::backend::Controls_obj::instance->get_ACCEPT()) {
HXLINE( 124)				if (this->dialogueEnded) {
HXLINE( 125)					this->textIndex = 0;
HXLINE( 126)					 ::cutscenes::Conversation _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 126)					_hx_tmp->pageIndex = (_hx_tmp->pageIndex + 1);
HXLINE( 127)					this->dialoguePaused = false;
HXLINE( 129)					this->dialogueStart();
HXLINE( 130)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 130)					_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("clickText",15,39,f9,2b)),null(),true,null()),((Float)0.8),null(),null(),null(),null());
            				}
            				else {
HXLINE( 131)					if (this->dialoguePaused) {
HXLINE( 132)						this->dialogueSpeedChange();
HXLINE( 134)						this->convDialogue->paused = false;
HXLINE( 135)						this->dialoguePaused = false;
            					}
            					else {
HXLINE( 136)						if (this->dialogueStarted) {
HXLINE( 137)							this->convDialogue->skip();
HXLINE( 138)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 138)							_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("clickText",15,39,f9,2b)),null(),true,null()),((Float)0.8),null(),null(),null(),null());
            						}
            					}
            				}
            			}
            		}
            	}


void Conversation_obj::dialogueStart(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::cutscenes::Conversation,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_182_dialogueStart)
HXLINE( 182)			_gthis->dialogueEnded = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_173_dialogueStart)
HXDLIN( 173)		 ::cutscenes::Conversation _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 174)		if (::hx::IsNull( this->convTextContent->__get(this->pageIndex).StaticCast< ::Array< ::String > >() )) {
HXLINE( 175)			return;
            		}
HXLINE( 178)		 ::flixel::addons::text::FlxTypeText _hx_tmp = this->convDialogue;
HXDLIN( 178)		_hx_tmp->resetText(this->convTextContent->__get(this->pageIndex).StaticCast< ::Array< ::String > >()->join(HX_("",00,00,00,00)));
HXLINE( 179)		this->convDialogue->start(((Float)0.04),true,null(),null(),null());
HXLINE( 180)		this->convDialogue->delay = ((Float)0.05);
HXLINE( 181)		this->convDialogue->completeCallback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 185)		this->dialogueEnded = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Conversation_obj,dialogueStart,(void))

void Conversation_obj::dialogueContinue(){
            	HX_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_192_dialogueContinue)
HXLINE( 193)		if (::hx::IsNull( this->convTextContent->__get(this->pageIndex).StaticCast< ::Array< ::String > >() )) {
HXLINE( 194)			return;
            		}
HXLINE( 196)		if ((this->convTextLength->__get(this->pageIndex).StaticCast< ::Array< int > >()->__get(this->textIndex) <= 0)) {
HXLINE( 197)			return;
            		}
HXLINE( 200)		if ((this->convDialogue->text.length >= this->convTextLength->__get(this->pageIndex).StaticCast< ::Array< int > >()->__get(this->textIndex))) {
HXLINE( 201)			 ::cutscenes::Conversation _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 201)			_hx_tmp->textIndex = (_hx_tmp->textIndex + 1);
HXLINE( 202)			this->convDialogue->paused = true;
HXLINE( 204)			this->dialoguePaused = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Conversation_obj,dialogueContinue,(void))

void Conversation_obj::dialogueSpeedChange(){
            	HX_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_212_dialogueSpeedChange)
HXLINE( 213)		::String textSpeedLines = (HX_("dialogueLineText",f9,db,7f,f5) + this->textIndex);
HXLINE( 214)		 ::haxe::ds::StringMap textSpeedIndex = this->convTextSpeed->__get(this->pageIndex).StaticCast<  ::haxe::ds::StringMap >();
HXLINE( 216)		bool textSpeedExists = textSpeedIndex->exists(textSpeedLines);
HXLINE( 217)		Float textSpeedValue;
HXDLIN( 217)		if ((textSpeedExists == true)) {
HXLINE( 217)			textSpeedValue = ( (Float)(textSpeedIndex->get(textSpeedLines)) );
            		}
            		else {
HXLINE( 217)			textSpeedValue = ((Float)0.05);
            		}
HXLINE( 218)		this->convDialogue->delay = textSpeedValue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Conversation_obj,dialogueSpeedChange,(void))

 ::Dynamic Conversation_obj::dialogueParse(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_229_dialogueParse)
HXDLIN( 229)		if (::sys::FileSystem_obj::exists(path)) {
HXDLIN( 229)			return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(path))->doParse();
            		}
            		else {
HXDLIN( 229)			return  ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("dialogue",18,2d,94,a7),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(7)
            					->setFixed(0,HX_("speed",87,97,69,81),((Float)0.05))
            					->setFixed(1,HX_("speakerAnimation",05,22,fe,c5),HX_("BF",c4,39,00,00))
            					->setFixed(2,HX_("speaker",ff,94,04,de),HX_("boyfriend",6a,29,b8,e6))
            					->setFixed(3,HX_("speedChanges",3c,50,bf,f2), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ))
            					->setFixed(4,HX_("box",0b,be,4a,00),HX_("default",c1,d8,c3,9b))
            					->setFixed(5,HX_("boxAnimation",79,77,a8,1b),HX_("enter",18,6d,86,70))
            					->setFixed(6,HX_("text",ad,cc,f9,4c),::Array_obj< ::String >::fromData( _hx_array_data_1184ce88_11,2)))))
            				->setFixed(1,HX_("music",a5,d0,5a,10), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("fadeTime",a9,1b,ba,e6),((Float)2.0))
            					->setFixed(1,HX_("asset",f0,69,39,26),HX_("",00,00,00,00))
            					->setFixed(2,HX_("looped",c3,5f,b9,61),true)))
            				->setFixed(2,HX_("backdrop",d6,b1,96,1a), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("fadeTime",a9,1b,ba,e6),((Float)2.0))
            					->setFixed(1,HX_("color",63,71,5c,4a),HX_("#000000",63,3a,ab,a3))
            					->setFixed(2,HX_("type",ba,f2,08,4d),HX_("solid",2b,b4,c5,80))))
            				->setFixed(3,HX_("outro",cb,c3,28,37), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("fadeTime",a9,1b,ba,e6),((Float)1.0))
            					->setFixed(1,HX_("type",ba,f2,08,4d),HX_("none",b8,12,0a,49)))));
            		}
HXDLIN( 229)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Conversation_obj,dialogueParse,return )

 ::Dynamic Conversation_obj::dialogueTemplate(){
            	HX_GC_STACKFRAME(&_hx_pos_8e3294b2a6d4e0c4_240_dialogueTemplate)
HXDLIN( 240)		return  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("dialogue",18,2d,94,a7),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(7)
            				->setFixed(0,HX_("speed",87,97,69,81),((Float)0.05))
            				->setFixed(1,HX_("speakerAnimation",05,22,fe,c5),HX_("BF",c4,39,00,00))
            				->setFixed(2,HX_("speaker",ff,94,04,de),HX_("boyfriend",6a,29,b8,e6))
            				->setFixed(3,HX_("speedChanges",3c,50,bf,f2), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ))
            				->setFixed(4,HX_("box",0b,be,4a,00),HX_("default",c1,d8,c3,9b))
            				->setFixed(5,HX_("boxAnimation",79,77,a8,1b),HX_("enter",18,6d,86,70))
            				->setFixed(6,HX_("text",ad,cc,f9,4c),::Array_obj< ::String >::fromData( _hx_array_data_1184ce88_13,2)))))
            			->setFixed(1,HX_("music",a5,d0,5a,10), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("fadeTime",a9,1b,ba,e6),((Float)2.0))
            				->setFixed(1,HX_("asset",f0,69,39,26),HX_("",00,00,00,00))
            				->setFixed(2,HX_("looped",c3,5f,b9,61),true)))
            			->setFixed(2,HX_("backdrop",d6,b1,96,1a), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("fadeTime",a9,1b,ba,e6),((Float)2.0))
            				->setFixed(1,HX_("color",63,71,5c,4a),HX_("#000000",63,3a,ab,a3))
            				->setFixed(2,HX_("type",ba,f2,08,4d),HX_("solid",2b,b4,c5,80))))
            			->setFixed(3,HX_("outro",cb,c3,28,37), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("fadeTime",a9,1b,ba,e6),((Float)1.0))
            				->setFixed(1,HX_("type",ba,f2,08,4d),HX_("none",b8,12,0a,49)))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Conversation_obj,dialogueTemplate,return )


::hx::ObjectPtr< Conversation_obj > Conversation_obj::__new( ::Dynamic conversation) {
	::hx::ObjectPtr< Conversation_obj > __this = new Conversation_obj();
	__this->__construct(conversation);
	return __this;
}

::hx::ObjectPtr< Conversation_obj > Conversation_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic conversation) {
	Conversation_obj *__this = (Conversation_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Conversation_obj), true, "cutscenes.Conversation"));
	*(void **)__this = Conversation_obj::_hx_vtable;
	__this->__construct(conversation);
	return __this;
}

Conversation_obj::Conversation_obj()
{
}

void Conversation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Conversation);
	HX_MARK_MEMBER_NAME(convDialogue,"convDialogue");
	HX_MARK_MEMBER_NAME(convTextContent,"convTextContent");
	HX_MARK_MEMBER_NAME(convTextLength,"convTextLength");
	HX_MARK_MEMBER_NAME(convTextSpeed,"convTextSpeed");
	HX_MARK_MEMBER_NAME(pageIndex,"pageIndex");
	HX_MARK_MEMBER_NAME(textIndex,"textIndex");
	HX_MARK_MEMBER_NAME(textIndexLength,"textIndexLength");
	HX_MARK_MEMBER_NAME(textIndexLengthList,"textIndexLengthList");
	HX_MARK_MEMBER_NAME(dialogueOpened,"dialogueOpened");
	HX_MARK_MEMBER_NAME(dialogueStarted,"dialogueStarted");
	HX_MARK_MEMBER_NAME(dialoguePaused,"dialoguePaused");
	HX_MARK_MEMBER_NAME(dialogueEnded,"dialogueEnded");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Conversation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(convDialogue,"convDialogue");
	HX_VISIT_MEMBER_NAME(convTextContent,"convTextContent");
	HX_VISIT_MEMBER_NAME(convTextLength,"convTextLength");
	HX_VISIT_MEMBER_NAME(convTextSpeed,"convTextSpeed");
	HX_VISIT_MEMBER_NAME(pageIndex,"pageIndex");
	HX_VISIT_MEMBER_NAME(textIndex,"textIndex");
	HX_VISIT_MEMBER_NAME(textIndexLength,"textIndexLength");
	HX_VISIT_MEMBER_NAME(textIndexLengthList,"textIndexLengthList");
	HX_VISIT_MEMBER_NAME(dialogueOpened,"dialogueOpened");
	HX_VISIT_MEMBER_NAME(dialogueStarted,"dialogueStarted");
	HX_VISIT_MEMBER_NAME(dialoguePaused,"dialoguePaused");
	HX_VISIT_MEMBER_NAME(dialogueEnded,"dialogueEnded");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Conversation_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pageIndex") ) { return ::hx::Val( pageIndex ); }
		if (HX_FIELD_EQ(inName,"textIndex") ) { return ::hx::Val( textIndex ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"convDialogue") ) { return ::hx::Val( convDialogue ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convTextSpeed") ) { return ::hx::Val( convTextSpeed ); }
		if (HX_FIELD_EQ(inName,"dialogueEnded") ) { return ::hx::Val( dialogueEnded ); }
		if (HX_FIELD_EQ(inName,"dialogueStart") ) { return ::hx::Val( dialogueStart_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"convTextLength") ) { return ::hx::Val( convTextLength ); }
		if (HX_FIELD_EQ(inName,"dialogueOpened") ) { return ::hx::Val( dialogueOpened ); }
		if (HX_FIELD_EQ(inName,"dialoguePaused") ) { return ::hx::Val( dialoguePaused ); }
		if (HX_FIELD_EQ(inName,"textLengthList") ) { return ::hx::Val( textLengthList_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convTextContent") ) { return ::hx::Val( convTextContent ); }
		if (HX_FIELD_EQ(inName,"textIndexLength") ) { return ::hx::Val( textIndexLength ); }
		if (HX_FIELD_EQ(inName,"dialogueStarted") ) { return ::hx::Val( dialogueStarted ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dialogueContinue") ) { return ::hx::Val( dialogueContinue_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"textIndexLengthList") ) { return ::hx::Val( textIndexLengthList ); }
		if (HX_FIELD_EQ(inName,"dialogueSpeedChange") ) { return ::hx::Val( dialogueSpeedChange_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Conversation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"dialogueParse") ) { outValue = dialogueParse_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"dialogueTemplate") ) { outValue = dialogueTemplate_dyn(); return true; }
	}
	return false;
}

::hx::Val Conversation_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"pageIndex") ) { pageIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textIndex") ) { textIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"convDialogue") ) { convDialogue=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convTextSpeed") ) { convTextSpeed=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueEnded") ) { dialogueEnded=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"convTextLength") ) { convTextLength=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueOpened") ) { dialogueOpened=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialoguePaused") ) { dialoguePaused=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convTextContent") ) { convTextContent=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textIndexLength") ) { textIndexLength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueStarted") ) { dialogueStarted=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"textIndexLengthList") ) { textIndexLengthList=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Conversation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("convDialogue",2c,b7,03,aa));
	outFields->push(HX_("convTextContent",78,82,92,26));
	outFields->push(HX_("convTextLength",87,4c,ed,fa));
	outFields->push(HX_("convTextSpeed",06,6f,80,39));
	outFields->push(HX_("pageIndex",43,72,2b,64));
	outFields->push(HX_("textIndex",25,2b,02,57));
	outFields->push(HX_("textIndexLength",eb,9d,aa,75));
	outFields->push(HX_("textIndexLengthList",e9,b7,73,fd));
	outFields->push(HX_("dialogueOpened",e1,e5,9f,10));
	outFields->push(HX_("dialogueStarted",09,77,22,70));
	outFields->push(HX_("dialoguePaused",e6,c3,8f,de));
	outFields->push(HX_("dialogueEnded",c2,14,61,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Conversation_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(Conversation_obj,convDialogue),HX_("convDialogue",2c,b7,03,aa)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Conversation_obj,convTextContent),HX_("convTextContent",78,82,92,26)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Conversation_obj,convTextLength),HX_("convTextLength",87,4c,ed,fa)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Conversation_obj,convTextSpeed),HX_("convTextSpeed",06,6f,80,39)},
	{::hx::fsInt,(int)offsetof(Conversation_obj,pageIndex),HX_("pageIndex",43,72,2b,64)},
	{::hx::fsInt,(int)offsetof(Conversation_obj,textIndex),HX_("textIndex",25,2b,02,57)},
	{::hx::fsInt,(int)offsetof(Conversation_obj,textIndexLength),HX_("textIndexLength",eb,9d,aa,75)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Conversation_obj,textIndexLengthList),HX_("textIndexLengthList",e9,b7,73,fd)},
	{::hx::fsBool,(int)offsetof(Conversation_obj,dialogueOpened),HX_("dialogueOpened",e1,e5,9f,10)},
	{::hx::fsBool,(int)offsetof(Conversation_obj,dialogueStarted),HX_("dialogueStarted",09,77,22,70)},
	{::hx::fsBool,(int)offsetof(Conversation_obj,dialoguePaused),HX_("dialoguePaused",e6,c3,8f,de)},
	{::hx::fsBool,(int)offsetof(Conversation_obj,dialogueEnded),HX_("dialogueEnded",c2,14,61,0b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Conversation_obj_sStaticStorageInfo = 0;
#endif

static ::String Conversation_obj_sMemberFields[] = {
	HX_("convDialogue",2c,b7,03,aa),
	HX_("convTextContent",78,82,92,26),
	HX_("convTextLength",87,4c,ed,fa),
	HX_("convTextSpeed",06,6f,80,39),
	HX_("pageIndex",43,72,2b,64),
	HX_("textIndex",25,2b,02,57),
	HX_("textIndexLength",eb,9d,aa,75),
	HX_("textIndexLengthList",e9,b7,73,fd),
	HX_("dialogueOpened",e1,e5,9f,10),
	HX_("dialogueStarted",09,77,22,70),
	HX_("dialoguePaused",e6,c3,8f,de),
	HX_("dialogueEnded",c2,14,61,0b),
	HX_("textLengthList",71,93,c7,05),
	HX_("update",09,86,05,87),
	HX_("dialogueStart",2a,40,f2,1e),
	HX_("dialogueContinue",9f,a1,25,9d),
	HX_("dialogueSpeedChange",1f,4e,63,c6),
	::String(null()) };

::hx::Class Conversation_obj::__mClass;

static ::String Conversation_obj_sStaticFields[] = {
	HX_("dialogueParse",fb,5b,3c,58),
	HX_("dialogueTemplate",72,a9,a4,17),
	::String(null())
};

void Conversation_obj::__register()
{
	Conversation_obj _hx_dummy;
	Conversation_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("cutscenes.Conversation",88,ce,84,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Conversation_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Conversation_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Conversation_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Conversation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Conversation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Conversation_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cutscenes
