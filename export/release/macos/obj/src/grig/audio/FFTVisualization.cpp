// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_grig_audio_FFT
#include <grig/audio/FFT.h>
#endif
#ifndef INCLUDED_grig_audio_FFTVisualization
#include <grig/audio/FFTVisualization.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4fbfbf912e3d94ff_24_new,"grig.audio.FFTVisualization","new",0x0c394dbf,"grig.audio.FFTVisualization.new","grig/audio/FFTVisualization.hx",24,0x6becf90f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fbfbf912e3d94ff_67_makeLogGraph,"grig.audio.FFTVisualization","makeLogGraph",0x516e3ef9,"grig.audio.FFTVisualization.makeLogGraph","grig/audio/FFTVisualization.hx",67,0x6becf90f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fbfbf912e3d94ff_26_computeLogXScale,"grig.audio.FFTVisualization","computeLogXScale",0x43785360,"grig.audio.FFTVisualization.computeLogXScale","grig/audio/FFTVisualization.hx",26,0x6becf90f)
HX_LOCAL_STACK_FRAME(_hx_pos_4fbfbf912e3d94ff_35_computeFreqBand,"grig.audio.FFTVisualization","computeFreqBand",0x3381cb03,"grig.audio.FFTVisualization.computeFreqBand","grig/audio/FFTVisualization.hx",35,0x6becf90f)
namespace grig{
namespace audio{

void FFTVisualization_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4fbfbf912e3d94ff_24_new)
HXDLIN(  24)		this->xscale = ::Array_obj< Float >::__new();
            	}

Dynamic FFTVisualization_obj::__CreateEmpty() { return new FFTVisualization_obj; }

void *FFTVisualization_obj::_hx_vtable = 0;

Dynamic FFTVisualization_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FFTVisualization_obj > _hx_result = new FFTVisualization_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FFTVisualization_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f716b95;
}

::Array< int > FFTVisualization_obj::makeLogGraph(::Array< Float > freq,int bands,int dbRange,int intRange){
            	HX_STACKFRAME(&_hx_pos_4fbfbf912e3d94ff_67_makeLogGraph)
HXLINE(  69)		if ((this->xscale->length != (bands + 1))) {
HXLINE(  70)			this->xscale = ::grig::audio::FFTVisualization_obj::computeLogXScale(bands);
            		}
HXLINE(  73)		::Array< int > graph = ::Array_obj< int >::__new();
HXLINE(  74)		graph->resize(bands);
HXLINE(  75)		{
HXLINE(  75)			int _g = 0;
HXDLIN(  75)			int _g1 = bands;
HXDLIN(  75)			while((_g < _g1)){
HXLINE(  75)				_g = (_g + 1);
HXDLIN(  75)				int i = (_g - 1);
HXLINE(  76)				Float val = ::grig::audio::FFTVisualization_obj::computeFreqBand(freq,this->xscale,i,bands);
HXLINE(  84)				val = ((1 + (val / ( (Float)(dbRange) ))) * ( (Float)(intRange) ));
HXLINE(  85)				graph[i] = ::grig::audio::FFT_obj::clamp_Int(::Std_obj::_hx_int(val),0,intRange);
            			}
            		}
HXLINE(  88)		return graph;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FFTVisualization_obj,makeLogGraph,return )

::Array< Float > FFTVisualization_obj::computeLogXScale(int bands){
            	HX_STACKFRAME(&_hx_pos_4fbfbf912e3d94ff_26_computeLogXScale)
HXLINE(  27)		::Array< Float > xscale = ::Array_obj< Float >::__new();
HXLINE(  28)		xscale->resize((bands + 1));
HXLINE(  29)		xscale[bands] = ((Float)0.0);
HXLINE(  30)		{
HXLINE(  30)			int _g = 0;
HXDLIN(  30)			int _g1 = bands;
HXDLIN(  30)			while((_g < _g1)){
HXLINE(  30)				_g = (_g + 1);
HXDLIN(  30)				int i = (_g - 1);
HXLINE(  31)				xscale[i] = (::Math_obj::pow(( (Float)(256) ),(( (Float)(i) ) / ( (Float)(bands) ))) - ((Float)0.5));
            			}
            		}
HXLINE(  32)		return xscale;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FFTVisualization_obj,computeLogXScale,return )

Float FFTVisualization_obj::computeFreqBand(::Array< Float > freq,::Array< Float > xscale,int band,int bands){
            	HX_STACKFRAME(&_hx_pos_4fbfbf912e3d94ff_35_computeFreqBand)
HXLINE(  36)		int a = ::Math_obj::ceil(xscale->__get(band));
HXLINE(  37)		int b = ::Math_obj::floor(xscale->__get((band + 1)));
HXLINE(  38)		Float n = ((Float)0.0);
HXLINE(  40)		if ((b < a)) {
HXLINE(  41)			n = (n + (freq->__get(b) * (xscale->__get((band + 1)) - xscale->__get(band))));
            		}
            		else {
HXLINE(  43)			if ((a > 0)) {
HXLINE(  44)				n = (n + (freq->__get((a - 1)) * (( (Float)(a) ) - xscale->__get(band))));
            			}
HXLINE(  45)			while((a < b)){
HXLINE(  46)				n = (n + freq->__get(a));
HXLINE(  47)				a = (a + 1);
            			}
HXLINE(  49)			if ((b < 256)) {
HXLINE(  50)				n = (n + (freq->__get(b) * (xscale->__get((band + 1)) - ( (Float)(b) ))));
            			}
            		}
HXLINE(  55)		n = (n * (( (Float)(bands) ) / ( (Float)(12) )));
HXLINE(  62)		return (( (Float)(20) ) * ::grig::audio::FFT_obj::log(( (Float)(10) ),n));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FFTVisualization_obj,computeFreqBand,return )


::hx::ObjectPtr< FFTVisualization_obj > FFTVisualization_obj::__new() {
	::hx::ObjectPtr< FFTVisualization_obj > __this = new FFTVisualization_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FFTVisualization_obj > FFTVisualization_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FFTVisualization_obj *__this = (FFTVisualization_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FFTVisualization_obj), true, "grig.audio.FFTVisualization"));
	*(void **)__this = FFTVisualization_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FFTVisualization_obj::FFTVisualization_obj()
{
}

void FFTVisualization_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FFTVisualization);
	HX_MARK_MEMBER_NAME(xscale,"xscale");
	HX_MARK_END_CLASS();
}

void FFTVisualization_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(xscale,"xscale");
}

::hx::Val FFTVisualization_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"xscale") ) { return ::hx::Val( xscale ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"makeLogGraph") ) { return ::hx::Val( makeLogGraph_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FFTVisualization_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"computeFreqBand") ) { outValue = computeFreqBand_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"computeLogXScale") ) { outValue = computeLogXScale_dyn(); return true; }
	}
	return false;
}

::hx::Val FFTVisualization_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"xscale") ) { xscale=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FFTVisualization_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("xscale",12,1b,a2,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FFTVisualization_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(FFTVisualization_obj,xscale),HX_("xscale",12,1b,a2,73)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FFTVisualization_obj_sStaticStorageInfo = 0;
#endif

static ::String FFTVisualization_obj_sMemberFields[] = {
	HX_("xscale",12,1b,a2,73),
	HX_("makeLogGraph",38,e0,c8,c9),
	::String(null()) };

::hx::Class FFTVisualization_obj::__mClass;

static ::String FFTVisualization_obj_sStaticFields[] = {
	HX_("computeLogXScale",1f,00,76,ba),
	HX_("computeFreqBand",24,3b,66,84),
	::String(null())
};

void FFTVisualization_obj::__register()
{
	FFTVisualization_obj _hx_dummy;
	FFTVisualization_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("grig.audio.FFTVisualization",4d,02,7a,85);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FFTVisualization_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FFTVisualization_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FFTVisualization_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FFTVisualization_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FFTVisualization_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FFTVisualization_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace grig
} // end namespace audio
