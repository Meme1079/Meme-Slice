// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_animation_PsychAnimationController
#include <backend/animation/PsychAnimationController.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteHoldCover
#include <objects/NoteHoldCover.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_shaders_RGBPaletteShader
#include <shaders/RGBPaletteShader.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e95cef2065d20a82_15_new,"objects.NoteHoldCover","new",0x901d00de,"objects.NoteHoldCover.new","objects/NoteHoldCover.hx",15,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_35_loadNoteHold,"objects.NoteHoldCover","loadNoteHold",0x57e6aa59,"objects.NoteHoldCover.loadNoteHold","objects/NoteHoldCover.hx",35,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_134_spawnNoteHold,"objects.NoteHoldCover","spawnNoteHold",0xc86d75aa,"objects.NoteHoldCover.spawnNoteHold","objects/NoteHoldCover.hx",134,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_69_spawnNoteHold,"objects.NoteHoldCover","spawnNoteHold",0xc86d75aa,"objects.NoteHoldCover.spawnNoteHold","objects/NoteHoldCover.hx",69,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_126_spawnNoteHold,"objects.NoteHoldCover","spawnNoteHold",0xc86d75aa,"objects.NoteHoldCover.spawnNoteHold","objects/NoteHoldCover.hx",126,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_130_spawnNoteHold,"objects.NoteHoldCover","spawnNoteHold",0xc86d75aa,"objects.NoteHoldCover.spawnNoteHold","objects/NoteHoldCover.hx",130,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_144_update,"objects.NoteHoldCover","update",0x4863384b,"objects.NoteHoldCover.update","objects/NoteHoldCover.hx",144,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_154_getHoldCoverSkinPostfix,"objects.NoteHoldCover","getHoldCoverSkinPostfix",0x76543d14,"objects.NoteHoldCover.getHoldCoverSkinPostfix","objects/NoteHoldCover.hx",154,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_26_boot,"objects.NoteHoldCover","boot",0x815cc1f4,"objects.NoteHoldCover.boot","objects/NoteHoldCover.hx",26,0x5db71653)
HX_LOCAL_STACK_FRAME(_hx_pos_e95cef2065d20a82_34_boot,"objects.NoteHoldCover","boot",0x815cc1f4,"objects.NoteHoldCover.boot","objects/NoteHoldCover.hx",34,0x5db71653)
namespace objects{

void NoteHoldCover_obj::__construct( ::Dynamic x, ::Dynamic y,::String holdCover){
            	HX_GC_STACKFRAME(&_hx_pos_e95cef2065d20a82_15_new)
HXLINE(  23)		this->inEditor = false;
HXLINE(  22)		this->copyY = true;
HXLINE(  21)		this->copyX = true;
HXLINE(  19)		this->noteData = 0;
HXLINE(  17)		this->texture = null();
HXLINE(  28)		super::__construct(x,y,null());
HXLINE(  30)		this->animation =  ::backend::animation::PsychAnimationController_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  31)		this->loadNoteHold(holdCover);
            	}

Dynamic NoteHoldCover_obj::__CreateEmpty() { return new NoteHoldCover_obj; }

void *NoteHoldCover_obj::_hx_vtable = 0;

Dynamic NoteHoldCover_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteHoldCover_obj > _hx_result = new NoteHoldCover_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NoteHoldCover_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6aa048b2) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x6aa048b2;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void NoteHoldCover_obj::loadNoteHold(::String holdcover){
            	HX_STACKFRAME(&_hx_pos_e95cef2065d20a82_35_loadNoteHold)
HXLINE(  36)		if (::hx::IsNull( holdcover )) {
HXLINE(  37)			holdcover = (::objects::NoteHoldCover_obj::defaultNoteHoldCover + ::objects::NoteHoldCover_obj::getHoldCoverSkinPostfix());
HXLINE(  38)			bool _hx_tmp;
HXDLIN(  38)			bool _hx_tmp1;
HXDLIN(  38)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE(  38)				_hx_tmp1 = ::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("holdCoverSkin",15,20,fa,bc),::hx::paccDynamic) );
            			}
            			else {
HXLINE(  38)				_hx_tmp1 = false;
            			}
HXDLIN(  38)			if (_hx_tmp1) {
HXLINE(  38)				_hx_tmp = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("holdCoverSkin",15,20,fa,bc),::hx::paccDynamic)) ).length > 0);
            			}
            			else {
HXLINE(  38)				_hx_tmp = false;
            			}
HXDLIN(  38)			if (_hx_tmp) {
HXLINE(  39)				holdcover = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("holdCoverSkin",15,20,fa,bc),::hx::paccDynamic)) );
            			}
            		}
HXLINE(  42)		this->texture = holdcover;
HXLINE(  43)		::String key = this->texture;
HXDLIN(  43)		::String parentFolder = null();
HXDLIN(  43)		if ((key.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  43)			::haxe::Log_obj::trace(key, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  43)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,true);
HXDLIN(  43)		bool xmlExists = false;
HXDLIN(  43)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  43)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE(  43)			xmlExists = true;
            		}
HXDLIN(  43)		 ::Dynamic _hx_tmp2;
HXDLIN(  43)		if (xmlExists) {
HXLINE(  43)			_hx_tmp2 = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  43)			::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN(  43)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  43)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  43)			if (::hx::IsNotNull( str )) {
HXLINE(  43)				key1 = str;
            			}
HXDLIN(  43)			_hx_tmp2 = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  43)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp2));
HXLINE(  44)		if (::hx::IsNull( this->frames )) {
HXLINE(  45)			this->texture = (::objects::NoteHoldCover_obj::defaultNoteHoldCover + ::objects::NoteHoldCover_obj::getHoldCoverSkinPostfix());
HXLINE(  46)			::String key2 = this->texture;
HXDLIN(  46)			::String parentFolder1 = null();
HXDLIN(  46)			if ((key2.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  46)				::haxe::Log_obj::trace(key2, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            			}
HXDLIN(  46)			 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key2,parentFolder1,true);
HXDLIN(  46)			bool xmlExists1 = false;
HXDLIN(  46)			::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key2) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  46)			if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE(  46)				xmlExists1 = true;
            			}
HXDLIN(  46)			 ::Dynamic _hx_tmp3;
HXDLIN(  46)			if (xmlExists1) {
HXLINE(  46)				_hx_tmp3 = ::sys::io::File_obj::getContent(xml1);
            			}
            			else {
HXLINE(  46)				::String key3 = (HX_("images/",77,50,74,c1) + key2);
HXDLIN(  46)				::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  46)				::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN(  46)				if (::hx::IsNotNull( str1 )) {
HXLINE(  46)					key3 = str1;
            				}
HXDLIN(  46)				_hx_tmp3 = ::backend::Paths_obj::getPath((key3 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            			}
HXDLIN(  46)			this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp3));
HXLINE(  47)			if (::hx::IsNull( this->frames )) {
HXLINE(  48)				this->texture = ::objects::NoteHoldCover_obj::defaultNoteHoldCover;
HXLINE(  49)				::String key4 = this->texture;
HXDLIN(  49)				::String parentFolder2 = null();
HXDLIN(  49)				if ((key4.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  49)					::haxe::Log_obj::trace(key4, ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            						->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder2)->init(1,true))
            						->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            						->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            						->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            				}
HXDLIN(  49)				 ::flixel::graphics::FlxGraphic imageLoaded2 = ::backend::Paths_obj::image(key4,parentFolder2,true);
HXDLIN(  49)				bool xmlExists2 = false;
HXDLIN(  49)				::String xml2 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key4) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  49)				if (::sys::FileSystem_obj::exists(xml2)) {
HXLINE(  49)					xmlExists2 = true;
            				}
HXDLIN(  49)				 ::Dynamic _hx_tmp4;
HXDLIN(  49)				if (xmlExists2) {
HXLINE(  49)					_hx_tmp4 = ::sys::io::File_obj::getContent(xml2);
            				}
            				else {
HXLINE(  49)					::String key5 = (HX_("images/",77,50,74,c1) + key4);
HXDLIN(  49)					::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  49)					::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key5).toLowerCase());
HXDLIN(  49)					if (::hx::IsNotNull( str2 )) {
HXLINE(  49)						key5 = str2;
            					}
HXDLIN(  49)					_hx_tmp4 = ::backend::Paths_obj::getPath((key5 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder2,null());
            				}
HXDLIN(  49)				this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded2,_hx_tmp4));
            			}
            		}
HXLINE(  53)		this->animation->addByPrefix(HX_("greenStart",9f,72,d0,58),HX_("holdCoverStartGreen",99,32,54,a2),24,false,null(),null());
HXLINE(  54)		this->animation->addByPrefix(HX_("blueStart",68,f3,45,5c),HX_("holdCoverStartBlue",84,eb,c5,0f),24,false,null(),null());
HXLINE(  55)		this->animation->addByPrefix(HX_("purpleStart",86,d4,3c,3d),HX_("holdCoverStartPurple",a6,2d,62,c3),24,false,null(),null());
HXLINE(  56)		this->animation->addByPrefix(HX_("redStart",51,a5,57,f3),HX_("holdCoverStartRed",a7,3b,e0,89),24,false,null(),null());
HXLINE(  58)		this->animation->addByPrefix(HX_("green",c3,0e,ed,99),HX_("holdCoverGreen",2b,6a,b0,b9),24,true,null(),null());
HXLINE(  59)		this->animation->addByPrefix(HX_("blue",9a,42,19,41),HX_("holdCoverBlue",32,4c,be,b1),24,true,null(),null());
HXLINE(  60)		this->animation->addByPrefix(HX_("purple",3c,f6,89,71),HX_("holdCoverPurple",d4,95,b6,1c),24,true,null(),null());
HXLINE(  61)		this->animation->addByPrefix(HX_("red",51,d9,56,00),HX_("holdCoverRed",b9,0a,1d,bd),24,true,null(),null());
HXLINE(  63)		this->animation->addByPrefix(HX_("greenEnd",d8,08,49,5a),HX_("holdCoverEndGreen",80,56,30,df),24,false,null(),null());
HXLINE(  64)		this->animation->addByPrefix(HX_("blueEnd",61,95,9b,ba),HX_("holdCoverEndBlue",7d,01,1d,3f),24,false,null(),null());
HXLINE(  65)		this->animation->addByPrefix(HX_("purpleEnd",ff,52,71,2c),HX_("holdCoverEndPurple",df,73,25,c7),24,false,null(),null());
HXLINE(  66)		this->animation->addByPrefix(HX_("redEnd",0a,cb,75,fe),HX_("holdCoverEndRed",ce,c7,a3,a5),24,false,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteHoldCover_obj,loadNoteHold,(void))

void NoteHoldCover_obj::spawnNoteHold( ::Dynamic __o_x, ::Dynamic __o_y, ::Dynamic __o_noteData, ::objects::Note note, ::Dynamic __o_strum, ::Dynamic playbackRate){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::objects::NoteHoldCover,_gthis,::Array< ::Dynamic>,noteData1) HXARGC(1)
            		void _hx_run(::String animName){
            			HX_GC_STACKFRAME(&_hx_pos_e95cef2065d20a82_134_spawnNoteHold)
HXLINE( 135)			if ((animName == (::objects::NoteHoldCover_obj::noteColors->__get(( (int)(noteData1->__get(0)) )) + HX_("Start",42,e4,38,17)))) {
HXLINE( 136)				_gthis->animation->play(::objects::NoteHoldCover_obj::noteColors->__get(( (int)(noteData1->__get(0)) )),true,null(),null());
            			}
HXLINE( 138)			if ((animName == (::objects::NoteHoldCover_obj::noteColors->__get(( (int)(noteData1->__get(0)) )) + HX_("End",bb,bb,34,00)))) {
HXLINE( 139)				_gthis->kill();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            		 ::Dynamic noteData = __o_noteData;
            		if (::hx::IsNull(__o_noteData)) noteData = 0;
            		 ::Dynamic strum = __o_strum;
            		if (::hx::IsNull(__o_strum)) strum = true;
            	HX_GC_STACKFRAME(&_hx_pos_e95cef2065d20a82_69_spawnNoteHold)
HXDLIN(  69)		::Array< ::Dynamic> noteData1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,noteData);
HXDLIN(  69)		 ::objects::NoteHoldCover _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  70)		bool _hx_tmp;
HXDLIN(  70)		if (::hx::IsNotNull( note )) {
HXLINE(  70)			_hx_tmp = ( (bool)(note->noteHoldCoverData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  71)			return;
            		}
HXLINE(  73)		this->loadNoteHold(::objects::NoteHoldCover_obj::defaultNoteHoldCover);
HXLINE(  74)		this->setPosition(x,y);
HXLINE(  76)		if (::hx::IsNotNull( this->strumNote )) {
HXLINE(  77)			this->setPosition((this->strumNote->x - (::objects::Note_obj::swagWidth * ((Float)0.95))),((this->strumNote->y - ::objects::Note_obj::swagWidth) + 10));
            		}
HXLINE(  78)		if (::hx::IsNotNull( note )) {
HXLINE(  79)			noteData1[0] = note->noteData;
            		}
HXLINE(  80)		this->noteData = ( (int)(noteData1->__get(0)) );
HXLINE(  82)		this->set_alpha(::backend::ClientPrefs_obj::data->holdCoverAlpha);
HXLINE(  83)		if (::hx::IsNotNull( note )) {
HXLINE(  84)			this->set_alpha(( (Float)(note->noteHoldCoverData->__Field(HX_("a",61,00,00,00),::hx::paccDynamic)) ));
            		}
HXLINE(  85)		bool _hx_tmp1;
HXDLIN(  85)		if (!(this->inEditor)) {
HXLINE(  85)			_hx_tmp1 = ::backend::ClientPrefs_obj::data->middleScroll;
            		}
            		else {
HXLINE(  85)			_hx_tmp1 = false;
            		}
HXDLIN(  85)		if (_hx_tmp1) {
HXLINE(  86)			if (note->mustPress) {
HXLINE(  87)				this->set_alpha(( (Float)(note->noteHoldCoverData->__Field(HX_("a",61,00,00,00),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(  89)				this->set_alpha(this->strumNote->alpha);
            			}
            		}
HXLINE(  93)		this->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  94)		if (::hx::IsNotNull( note )) {
HXLINE(  95)			this->set_antialiasing(( (bool)(note->noteHoldCoverData->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            		}
HXLINE(  96)		if ((::states::PlayState_obj::stageUI == HX_("pixel",86,c6,a3,c2))) {
HXLINE(  97)			this->set_antialiasing(false);
            		}
HXLINE(  99)		 ::shaders::RGBPalette tempShader;
HXLINE( 100)		::objects::Note_obj::initializeGlobalRGBShader(::hx::Mod(noteData1->__get(0),::objects::NoteHoldCover_obj::noteColors->length));
HXLINE( 102)		bool noteUsedRGBShader;
HXDLIN( 102)		if (::hx::IsNotNull( note )) {
HXLINE( 102)			noteUsedRGBShader = ( (bool)(note->noteSplashData->__Field(HX_("useRGBShader",cb,ac,57,46),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 102)			noteUsedRGBShader = true;
            		}
HXLINE( 103)		bool noteUsedGlobalShader;
HXDLIN( 103)		if (::hx::IsNotNull( note )) {
HXLINE( 103)			noteUsedGlobalShader = ( (bool)(note->noteSplashData->__Field(HX_("useRGBShader",cb,ac,57,46),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 103)			noteUsedGlobalShader = true;
            		}
HXLINE( 104)		bool noteDisableShader;
HXDLIN( 104)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE( 104)			noteDisableShader = !(( (bool)(::states::PlayState_obj::SONG->__Field(HX_("disableNoteRGB",33,ad,d1,4a),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 104)			noteDisableShader = true;
            		}
HXLINE( 105)		bool _hx_tmp2;
HXDLIN( 105)		if (!(this->inEditor)) {
HXLINE( 105)			if (noteUsedRGBShader) {
HXLINE( 105)				_hx_tmp2 = noteDisableShader;
            			}
            			else {
HXLINE( 105)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE( 105)			_hx_tmp2 = true;
            		}
HXDLIN( 105)		if (_hx_tmp2) {
HXLINE( 106)			tempShader =  ::shaders::RGBPalette_obj::__alloc( HX_CTX );
HXLINE( 108)			if (noteUsedGlobalShader) {
HXLINE( 109)				::Array< int > arr = ::backend::ClientPrefs_obj::data->arrowRGB->__get(::hx::Mod(noteData1->__get(0),::objects::Note_obj::colArray->length)).StaticCast< ::Array< int > >();
HXLINE( 110)				if ((::states::PlayState_obj::stageUI == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 110)					arr = ::backend::ClientPrefs_obj::data->arrowRGBPixel->__get(::hx::Mod(noteData1->__get(0),::objects::Note_obj::colArray->length)).StaticCast< ::Array< int > >();
            				}
HXLINE( 112)				tempShader->set_r(arr->__get(0));
HXLINE( 113)				tempShader->set_g(arr->__get(1));
HXLINE( 114)				tempShader->set_b(arr->__get(2));
HXLINE( 115)				this->shader = tempShader->shader;
            			}
            		}
HXLINE( 119)		this->animation->play((::objects::NoteHoldCover_obj::noteColors->__get(( (int)(noteData1->__get(0)) )) + HX_("Start",42,e4,38,17)),true,null(),null());
HXLINE( 121)		if ((this->inEditor == false)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::objects::NoteHoldCover,_gthis,::Array< ::Dynamic>,noteData1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_e95cef2065d20a82_126_spawnNoteHold)
HXLINE( 126)				_gthis->animation->play((::objects::NoteHoldCover_obj::noteColors->__get(( (int)(noteData1->__get(0)) )) + HX_("End",bb,bb,34,00)),true,null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 122)			int lengthToGet;
HXDLIN( 122)			if (!(note->isSustainNote)) {
HXLINE( 122)				lengthToGet = note->tail->length;
            			}
            			else {
HXLINE( 122)				lengthToGet = note->parent->tail->length;
            			}
HXLINE( 123)			Float timeToGet;
HXDLIN( 123)			if (!(note->isSustainNote)) {
HXLINE( 123)				timeToGet = note->strumTime;
            			}
            			else {
HXLINE( 123)				timeToGet = note->parent->strumTime;
            			}
HXLINE( 124)			Float timeDuration = ((((::objects::NoteHoldCover_obj::startCrochet * ( (Float)(lengthToGet) )) + ((timeToGet - ::backend::Conductor_obj::songPosition) + ::backend::ClientPrefs_obj::data->ratingOffset)) / ( (Float)(playbackRate) )) * ((Float).001));
HXLINE( 125)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(timeDuration, ::Dynamic(new _hx_Closure_0(_gthis,noteData1)),null());
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::objects::NoteHoldCover,_gthis,::Array< ::Dynamic>,noteData1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_e95cef2065d20a82_130_spawnNoteHold)
HXLINE( 130)				_gthis->animation->play((::objects::NoteHoldCover_obj::noteColors->__get(( (int)(noteData1->__get(0)) )) + HX_("End",bb,bb,34,00)),true,null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 129)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_1(_gthis,noteData1)),null());
            		}
HXLINE( 134)		this->animation->onFinish->add( ::Dynamic(new _hx_Closure_2(_gthis,noteData1)));
            	}


HX_DEFINE_DYNAMIC_FUNC6(NoteHoldCover_obj,spawnNoteHold,(void))

void NoteHoldCover_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_e95cef2065d20a82_144_update)
HXLINE( 145)		if (::hx::IsNotNull( this->strumNote )) {
HXLINE( 146)			if (this->copyX) {
HXLINE( 147)				this->set_x((this->strumNote->x - (::objects::Note_obj::swagWidth * ((Float)0.95))));
            			}
HXLINE( 148)			if (this->copyY) {
HXLINE( 149)				this->set_y(((this->strumNote->y - ::objects::Note_obj::swagWidth) + 10));
            			}
            		}
HXLINE( 151)		this->super::update(elapsed);
            	}


Float NoteHoldCover_obj::startCrochet;

::String NoteHoldCover_obj::defaultNoteHoldCover;

::Array< ::String > NoteHoldCover_obj::noteColors;

::String NoteHoldCover_obj::getHoldCoverSkinPostfix(){
            	HX_STACKFRAME(&_hx_pos_e95cef2065d20a82_154_getHoldCoverSkinPostfix)
HXLINE( 155)		::String skin = HX_("",00,00,00,00);
HXLINE( 156)		if ((::backend::ClientPrefs_obj::data->holdCoverSkin != ::backend::ClientPrefs_obj::defaultData->holdCoverSkin)) {
HXLINE( 157)			skin = (HX_("-",2d,00,00,00) + ::StringTools_obj::replace(::StringTools_obj::trim(::backend::ClientPrefs_obj::data->holdCoverSkin).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)));
            		}
HXLINE( 159)		return skin;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NoteHoldCover_obj,getHoldCoverSkinPostfix,return )


::hx::ObjectPtr< NoteHoldCover_obj > NoteHoldCover_obj::__new( ::Dynamic x, ::Dynamic y,::String holdCover) {
	::hx::ObjectPtr< NoteHoldCover_obj > __this = new NoteHoldCover_obj();
	__this->__construct(x,y,holdCover);
	return __this;
}

::hx::ObjectPtr< NoteHoldCover_obj > NoteHoldCover_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic x, ::Dynamic y,::String holdCover) {
	NoteHoldCover_obj *__this = (NoteHoldCover_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteHoldCover_obj), true, "objects.NoteHoldCover"));
	*(void **)__this = NoteHoldCover_obj::_hx_vtable;
	__this->__construct(x,y,holdCover);
	return __this;
}

NoteHoldCover_obj::NoteHoldCover_obj()
{
}

void NoteHoldCover_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NoteHoldCover);
	HX_MARK_MEMBER_NAME(rgbShader,"rgbShader");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(strumNote,"strumNote");
	HX_MARK_MEMBER_NAME(noteData,"noteData");
	HX_MARK_MEMBER_NAME(copyX,"copyX");
	HX_MARK_MEMBER_NAME(copyY,"copyY");
	HX_MARK_MEMBER_NAME(inEditor,"inEditor");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NoteHoldCover_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rgbShader,"rgbShader");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(strumNote,"strumNote");
	HX_VISIT_MEMBER_NAME(noteData,"noteData");
	HX_VISIT_MEMBER_NAME(copyX,"copyX");
	HX_VISIT_MEMBER_NAME(copyY,"copyY");
	HX_VISIT_MEMBER_NAME(inEditor,"inEditor");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NoteHoldCover_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"copyX") ) { return ::hx::Val( copyX ); }
		if (HX_FIELD_EQ(inName,"copyY") ) { return ::hx::Val( copyY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		if (HX_FIELD_EQ(inName,"inEditor") ) { return ::hx::Val( inEditor ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rgbShader") ) { return ::hx::Val( rgbShader ); }
		if (HX_FIELD_EQ(inName,"strumNote") ) { return ::hx::Val( strumNote ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadNoteHold") ) { return ::hx::Val( loadNoteHold_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"spawnNoteHold") ) { return ::hx::Val( spawnNoteHold_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NoteHoldCover_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"noteColors") ) { outValue = ( noteColors ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startCrochet") ) { outValue = ( startCrochet ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"defaultNoteHoldCover") ) { outValue = ( defaultNoteHoldCover ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getHoldCoverSkinPostfix") ) { outValue = getHoldCoverSkinPostfix_dyn(); return true; }
	}
	return false;
}

::hx::Val NoteHoldCover_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"copyX") ) { copyX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copyY") ) { copyY=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inEditor") ) { inEditor=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rgbShader") ) { rgbShader=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumNote") ) { strumNote=inValue.Cast<  ::objects::StrumNote >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NoteHoldCover_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"noteColors") ) { noteColors=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startCrochet") ) { startCrochet=ioValue.Cast< Float >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"defaultNoteHoldCover") ) { defaultNoteHoldCover=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void NoteHoldCover_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rgbShader",12,56,b9,2f));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("strumNote",db,79,2e,f0));
	outFields->push(HX_("noteData",3c,7b,96,51));
	outFields->push(HX_("copyX",03,83,5f,4a));
	outFields->push(HX_("copyY",04,83,5f,4a));
	outFields->push(HX_("inEditor",72,8b,5b,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NoteHoldCover_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(NoteHoldCover_obj,rgbShader),HX_("rgbShader",12,56,b9,2f)},
	{::hx::fsString,(int)offsetof(NoteHoldCover_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsObject /*  ::objects::StrumNote */ ,(int)offsetof(NoteHoldCover_obj,strumNote),HX_("strumNote",db,79,2e,f0)},
	{::hx::fsInt,(int)offsetof(NoteHoldCover_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{::hx::fsBool,(int)offsetof(NoteHoldCover_obj,copyX),HX_("copyX",03,83,5f,4a)},
	{::hx::fsBool,(int)offsetof(NoteHoldCover_obj,copyY),HX_("copyY",04,83,5f,4a)},
	{::hx::fsBool,(int)offsetof(NoteHoldCover_obj,inEditor),HX_("inEditor",72,8b,5b,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo NoteHoldCover_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &NoteHoldCover_obj::startCrochet,HX_("startCrochet",f2,b8,61,46)},
	{::hx::fsString,(void *) &NoteHoldCover_obj::defaultNoteHoldCover,HX_("defaultNoteHoldCover",a5,4d,46,93)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &NoteHoldCover_obj::noteColors,HX_("noteColors",42,d3,9a,64)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String NoteHoldCover_obj_sMemberFields[] = {
	HX_("rgbShader",12,56,b9,2f),
	HX_("texture",db,c8,e0,9e),
	HX_("strumNote",db,79,2e,f0),
	HX_("noteData",3c,7b,96,51),
	HX_("copyX",03,83,5f,4a),
	HX_("copyY",04,83,5f,4a),
	HX_("inEditor",72,8b,5b,c4),
	HX_("loadNoteHold",97,da,ae,0d),
	HX_("spawnNoteHold",ac,7b,cf,21),
	HX_("update",09,86,05,87),
	::String(null()) };

static void NoteHoldCover_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NoteHoldCover_obj::startCrochet,"startCrochet");
	HX_MARK_MEMBER_NAME(NoteHoldCover_obj::defaultNoteHoldCover,"defaultNoteHoldCover");
	HX_MARK_MEMBER_NAME(NoteHoldCover_obj::noteColors,"noteColors");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NoteHoldCover_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NoteHoldCover_obj::startCrochet,"startCrochet");
	HX_VISIT_MEMBER_NAME(NoteHoldCover_obj::defaultNoteHoldCover,"defaultNoteHoldCover");
	HX_VISIT_MEMBER_NAME(NoteHoldCover_obj::noteColors,"noteColors");
};

#endif

::hx::Class NoteHoldCover_obj::__mClass;

static ::String NoteHoldCover_obj_sStaticFields[] = {
	HX_("startCrochet",f2,b8,61,46),
	HX_("defaultNoteHoldCover",a5,4d,46,93),
	HX_("noteColors",42,d3,9a,64),
	HX_("getHoldCoverSkinPostfix",96,99,76,56),
	::String(null())
};

void NoteHoldCover_obj::__register()
{
	NoteHoldCover_obj _hx_dummy;
	NoteHoldCover_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.NoteHoldCover",ec,f9,df,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NoteHoldCover_obj::__GetStatic;
	__mClass->mSetStaticField = &NoteHoldCover_obj::__SetStatic;
	__mClass->mMarkFunc = NoteHoldCover_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NoteHoldCover_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteHoldCover_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteHoldCover_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NoteHoldCover_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteHoldCover_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteHoldCover_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NoteHoldCover_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e95cef2065d20a82_26_boot)
HXDLIN(  26)		defaultNoteHoldCover = HX_("noteHoldCovers/noteHoldCovers",0f,bb,47,32);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e95cef2065d20a82_34_boot)
HXDLIN(  34)		noteColors = ::objects::Note_obj::colArray;
            	}
}

} // end namespace objects
