// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_animation_PsychAnimationController
#include <backend/animation/PsychAnimationController.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteSplash
#include <objects/NoteSplash.h>
#endif
#ifndef INCLUDED_objects_PixelSplashShader
#include <objects/PixelSplashShader.h>
#endif
#ifndef INCLUDED_objects_PixelSplashShaderRef
#include <objects/PixelSplashShaderRef.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_30_new,"objects.NoteSplash","new",0x6a418ee5,"objects.NoteSplash.new","objects/NoteSplash.hx",30,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_62_initTextureSplash,"objects.NoteSplash","initTextureSplash",0x6f09fcb7,"objects.NoteSplash.initTextureSplash","objects/NoteSplash.hx",62,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_92_initConfigSplash,"objects.NoteSplash","initConfigSplash",0xffc97b54,"objects.NoteSplash.initConfigSplash","objects/NoteSplash.hx",92,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_109_createConfigSplash,"objects.NoteSplash","createConfigSplash",0x1c036600,"objects.NoteSplash.createConfigSplash","objects/NoteSplash.hx",109,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_139_createConfigTextSplash,"objects.NoteSplash","createConfigTextSplash",0x4484a70d,"objects.NoteSplash.createConfigTextSplash","objects/NoteSplash.hx",139,0xe471e78a)
static const Float _hx_array_data_45753873_13[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_204_loadSplash,"objects.NoteSplash","loadSplash",0xfa5efc48,"objects.NoteSplash.loadSplash","objects/NoteSplash.hx",204,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_224_loadSplashPixel,"objects.NoteSplash","loadSplashPixel",0xbf52b51e,"objects.NoteSplash.loadSplashPixel","objects/NoteSplash.hx",224,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_339_spawnSplashNote,"objects.NoteSplash","spawnSplashNote",0x3f35d119,"objects.NoteSplash.spawnSplashNote","objects/NoteSplash.hx",339,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_239_spawnSplashNote,"objects.NoteSplash","spawnSplashNote",0x3f35d119,"objects.NoteSplash.spawnSplashNote","objects/NoteSplash.hx",239,0xe471e78a)
static const Float _hx_array_data_45753873_19[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_369_playDefaultAnim,"objects.NoteSplash","playDefaultAnim",0xfa9677e3,"objects.NoteSplash.playDefaultAnim","objects/NoteSplash.hx",369,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_378_checkForAnim,"objects.NoteSplash","checkForAnim",0x4bc4b2ad,"objects.NoteSplash.checkForAnim","objects/NoteSplash.hx",378,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_389_update,"objects.NoteSplash","update",0x3dabe8a4,"objects.NoteSplash.update","objects/NoteSplash.hx",389,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_441_set_config,"objects.NoteSplash","set_config",0x4172b11a,"objects.NoteSplash.set_config","objects/NoteSplash.hx",441,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_467_set_maxAnims,"objects.NoteSplash","set_maxAnims",0x332ebc56,"objects.NoteSplash.set_maxAnims","objects/NoteSplash.hx",467,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_412_getSplashSkinPostfix,"objects.NoteSplash","getSplashSkinPostfix",0x421668b6,"objects.NoteSplash.getSplashSkinPostfix","objects/NoteSplash.hx",412,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_421_createConfig,"objects.NoteSplash","createConfig",0x86425fb9,"objects.NoteSplash.createConfig","objects/NoteSplash.hx",421,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_432_addAnimationToConfig,"objects.NoteSplash","addAnimationToConfig",0xff39423b,"objects.NoteSplash.addAnimationToConfig","objects/NoteSplash.hx",432,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_45_boot,"objects.NoteSplash","boot",0x87347a0d,"objects.NoteSplash.boot","objects/NoteSplash.hx",45,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_46_boot,"objects.NoteSplash","boot",0x87347a0d,"objects.NoteSplash.boot","objects/NoteSplash.hx",46,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_a3b2eb9b9f1b347d_387_boot,"objects.NoteSplash","boot",0x87347a0d,"objects.NoteSplash.boot","objects/NoteSplash.hx",387,0xe471e78a)
namespace objects{

void NoteSplash_obj::__construct( ::Dynamic __o_x, ::Dynamic __o_y,::String splash){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            	HX_GC_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_30_new)
HXLINE( 386)		this->aliveTime = ((Float)0);
HXLINE(  44)		this->maxAnims = 0;
HXLINE(  42)		this->noteDataMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  41)		this->spawned = false;
HXLINE(  39)		this->inEditor = false;
HXLINE(  38)		this->copyY = true;
HXLINE(  37)		this->copyX = true;
HXLINE(  35)		this->noteData = 0;
HXLINE(  48)		super::__construct(x,y,null());
HXLINE(  50)		this->animation =  ::backend::animation::PsychAnimationController_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  51)		this->rgbShader =  ::objects::PixelSplashShaderRef_obj::__alloc( HX_CTX );
HXLINE(  52)		this->shader = this->rgbShader->shader;
HXLINE(  53)		this->loadSplash(splash);
            	}

Dynamic NoteSplash_obj::__CreateEmpty() { return new NoteSplash_obj; }

void *NoteSplash_obj::_hx_vtable = 0;

Dynamic NoteSplash_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteSplash_obj > _hx_result = new NoteSplash_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NoteSplash_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x12f691ed) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x12f691ed;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void NoteSplash_obj::initTextureSplash(::String splash,::String __o_subfolder){
            		::String subfolder = __o_subfolder;
            		if (::hx::IsNull(__o_subfolder)) subfolder = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_62_initTextureSplash)
HXLINE(  63)		this->set_config(null());
HXLINE(  64)		this->set_maxAnims(0);
HXLINE(  66)		if (::hx::IsNull( splash )) {
HXLINE(  67)			splash = ((subfolder + ::objects::NoteSplash_obj::defaultNoteSplash) + ::objects::NoteSplash_obj::getSplashSkinPostfix());
HXLINE(  68)			bool _hx_tmp;
HXDLIN(  68)			bool _hx_tmp1;
HXDLIN(  68)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE(  68)				_hx_tmp1 = ::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic) );
            			}
            			else {
HXLINE(  68)				_hx_tmp1 = false;
            			}
HXDLIN(  68)			if (_hx_tmp1) {
HXLINE(  68)				_hx_tmp = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) ).length > 0);
            			}
            			else {
HXLINE(  68)				_hx_tmp = false;
            			}
HXDLIN(  68)			if (_hx_tmp) {
HXLINE(  69)				splash = ( (::String)((subfolder + ::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic))) );
            			}
HXLINE(  70)			this->texture = splash;
            		}
            		else {
HXLINE(  72)			this->texture = (subfolder + splash);
            		}
HXLINE(  75)		::String key = this->texture;
HXDLIN(  75)		::String parentFolder = null();
HXDLIN(  75)		if ((key.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  75)			::haxe::Log_obj::trace(key, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),375)));
            		}
HXDLIN(  75)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,true);
HXDLIN(  75)		bool xmlExists = false;
HXDLIN(  75)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  75)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE(  75)			xmlExists = true;
            		}
HXDLIN(  75)		 ::Dynamic _hx_tmp2;
HXDLIN(  75)		if (xmlExists) {
HXLINE(  75)			_hx_tmp2 = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  75)			::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN(  75)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  75)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  75)			if (::hx::IsNotNull( str )) {
HXLINE(  75)				key1 = str;
            			}
HXDLIN(  75)			_hx_tmp2 = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  75)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp2));
HXLINE(  76)		if (::hx::IsNull( this->frames )) {
HXLINE(  77)			this->texture = ((subfolder + ::objects::NoteSplash_obj::defaultNoteSplash) + ::objects::NoteSplash_obj::getSplashSkinPostfix());
HXLINE(  78)			::String key2 = this->texture;
HXDLIN(  78)			::String parentFolder1 = null();
HXDLIN(  78)			if ((key2.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  78)				::haxe::Log_obj::trace(key2, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),375)));
            			}
HXDLIN(  78)			 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key2,parentFolder1,true);
HXDLIN(  78)			bool xmlExists1 = false;
HXDLIN(  78)			::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key2) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  78)			if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE(  78)				xmlExists1 = true;
            			}
HXDLIN(  78)			 ::Dynamic _hx_tmp3;
HXDLIN(  78)			if (xmlExists1) {
HXLINE(  78)				_hx_tmp3 = ::sys::io::File_obj::getContent(xml1);
            			}
            			else {
HXLINE(  78)				::String key3 = (HX_("images/",77,50,74,c1) + key2);
HXDLIN(  78)				::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  78)				::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN(  78)				if (::hx::IsNotNull( str1 )) {
HXLINE(  78)					key3 = str1;
            				}
HXDLIN(  78)				_hx_tmp3 = ::backend::Paths_obj::getPath((key3 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            			}
HXDLIN(  78)			this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp3));
HXLINE(  79)			if (::hx::IsNull( this->frames )) {
HXLINE(  80)				this->texture = (subfolder + ::objects::NoteSplash_obj::defaultNoteSplash);
HXLINE(  81)				::String key4 = this->texture;
HXDLIN(  81)				::String parentFolder2 = null();
HXDLIN(  81)				if ((key4.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  81)					::haxe::Log_obj::trace(key4, ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            						->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder2)->init(1,true))
            						->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            						->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            						->setFixed(4,HX_("lineNumber",dd,81,22,76),375)));
            				}
HXDLIN(  81)				 ::flixel::graphics::FlxGraphic imageLoaded2 = ::backend::Paths_obj::image(key4,parentFolder2,true);
HXDLIN(  81)				bool xmlExists2 = false;
HXDLIN(  81)				::String xml2 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key4) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  81)				if (::sys::FileSystem_obj::exists(xml2)) {
HXLINE(  81)					xmlExists2 = true;
            				}
HXDLIN(  81)				 ::Dynamic _hx_tmp4;
HXDLIN(  81)				if (xmlExists2) {
HXLINE(  81)					_hx_tmp4 = ::sys::io::File_obj::getContent(xml2);
            				}
            				else {
HXLINE(  81)					::String key5 = (HX_("images/",77,50,74,c1) + key4);
HXDLIN(  81)					::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  81)					::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key5).toLowerCase());
HXDLIN(  81)					if (::hx::IsNotNull( str2 )) {
HXLINE(  81)						key5 = str2;
            					}
HXDLIN(  81)					_hx_tmp4 = ::backend::Paths_obj::getPath((key5 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder2,null());
            				}
HXDLIN(  81)				this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded2,_hx_tmp4));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NoteSplash_obj,initTextureSplash,(void))

void NoteSplash_obj::initConfigSplash(::String splash,::String path){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_92_initConfigSplash)
HXLINE(  93)		this->set_config(::objects::NoteSplash_obj::configs->get(path));
HXLINE(  94)		bool _hx_tmp;
HXDLIN(  94)		if (::hx::IsEq( this->config->__Field(HX_("allowPixelVariant",c8,38,2b,e5),::hx::paccDynamic),true )) {
HXLINE(  94)			_hx_tmp = (::states::PlayState_obj::stageUI == HX_("pixel",86,c6,a3,c2));
            		}
            		else {
HXLINE(  94)			_hx_tmp = false;
            		}
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  95)			this->loadSplashPixel(splash);
HXLINE(  96)			return;
            		}
HXLINE(  98)		{
HXLINE(  98)			 ::Dynamic anim = ( ( ::haxe::ds::StringMap)( ::Dynamic(this->config->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))) )->iterator();
HXDLIN(  98)			while(( (bool)(anim->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  98)				 ::Dynamic anim1 = anim->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE(  99)				if ((::hx::Mod(anim1->__Field(HX_("noteData",3c,7b,96,51),::hx::paccDynamic),4) == 0)) {
HXLINE( 100)					this->set_maxAnims((this->maxAnims + 1));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NoteSplash_obj,initConfigSplash,(void))

void NoteSplash_obj::createConfigSplash(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_109_createConfigSplash)
HXLINE( 110)		::String path1 = ::backend::Paths_obj::getPath(((HX_("",00,00,00,00) + path) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),true);
HXDLIN( 110)		::String text;
HXDLIN( 110)		if (::sys::FileSystem_obj::exists(path1)) {
HXLINE( 110)			text = ::sys::io::File_obj::getContent(path1);
            		}
            		else {
HXLINE( 110)			text = null();
            		}
HXDLIN( 110)		 ::Dynamic config =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,text)->doParse();
HXLINE( 111)		if (::hx::IsNull( config )) {
HXLINE( 112)			return;
            		}
HXLINE( 114)		 ::Dynamic tempConfig =  ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("animations",ef,34,1c,83), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ))
            			->setFixed(1,HX_("allowRGB",04,8e,17,9e),( (bool)(config->__Field(HX_("allowRGB",04,8e,17,9e),::hx::paccDynamic)) ))
            			->setFixed(2,HX_("allowPixelVariant",c8,38,2b,e5),( (bool)(config->__Field(HX_("allowPixelVariant",c8,38,2b,e5),::hx::paccDynamic)) ))
            			->setFixed(3,HX_("allowPixel",3d,81,6f,ed),( (bool)(config->__Field(HX_("allowPixel",3d,81,6f,ed),::hx::paccDynamic)) ))
            			->setFixed(4,HX_("rgb",0d,db,56,00),( (::Array< ::Dynamic>)(config->__Field(HX_("rgb",0d,db,56,00),::hx::paccDynamic)) ))
            			->setFixed(5,HX_("scale",8a,ce,ce,78),( (Float)(config->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) )));
HXLINE( 123)		{
HXLINE( 123)			int _g = 0;
HXDLIN( 123)			::Array< ::String > _g1 = ::Reflect_obj::fields( ::Dynamic(config->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)));
HXDLIN( 123)			while((_g < _g1->length)){
HXLINE( 123)				::String i = _g1->__get(_g);
HXDLIN( 123)				_g = (_g + 1);
HXLINE( 124)				 ::Dynamic anim = ::Reflect_obj::field( ::Dynamic(config->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)),i);
HXLINE( 125)				( ( ::haxe::ds::StringMap)( ::Dynamic(tempConfig->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))) )->set(i,anim);
HXLINE( 126)				if ((::hx::Mod(anim->__Field(HX_("noteData",3c,7b,96,51),::hx::paccDynamic),4) == 0)) {
HXLINE( 127)					this->set_maxAnims((this->maxAnims + 1));
            				}
            			}
            		}
HXLINE( 130)		this->set_config(tempConfig);
HXLINE( 131)		::objects::NoteSplash_obj::configs->set(path,this->config);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,createConfigSplash,(void))

void NoteSplash_obj::createConfigTextSplash(::String path){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_139_createConfigTextSplash)
HXLINE( 140)		 ::Dynamic tempConfig = ::objects::NoteSplash_obj::createConfig();
HXLINE( 141)		::String anim = HX_("note splash",d5,03,6e,d8);
HXLINE( 142)		::Array< ::Dynamic> fps = ::Array_obj< ::Dynamic>::__new(2)->init(0,22)->init(1,26);
HXLINE( 143)		::Array< ::Dynamic> offsets = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< Float >::fromData( _hx_array_data_45753873_13,2));
HXLINE( 144)		if (::backend::Paths_obj::fileExists(((HX_("",00,00,00,00) + path) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 145)			::String path1 = ::backend::Paths_obj::getPath(((HX_("",00,00,00,00) + path) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),null(),true);
HXDLIN( 145)			::String string;
HXDLIN( 145)			if (::sys::FileSystem_obj::exists(path1)) {
HXLINE( 145)				string = ::sys::io::File_obj::getContent(path1);
            			}
            			else {
HXLINE( 145)				string = null();
            			}
HXDLIN( 145)			::Array< ::String > daList = ::Array_obj< ::String >::__new(0);
HXLINE(  69)			daList = ::StringTools_obj::trim(string).split(HX_("\n",0a,00,00,00));
HXLINE( 145)			{
HXLINE( 145)				int _g = 0;
HXDLIN( 145)				int _g1 = daList->length;
HXDLIN( 145)				while((_g < _g1)){
HXLINE( 145)					_g = (_g + 1);
HXDLIN( 145)					int i = (_g - 1);
HXDLIN( 145)					daList[i] = ::StringTools_obj::trim(daList->__get(i));
            				}
            			}
HXDLIN( 145)			::Array< ::String > configFile = daList;
HXLINE( 146)			if ((configFile->length <= 0)) {
HXLINE( 147)				return;
            			}
HXLINE( 149)			anim = configFile->__get(0);
HXLINE( 150)			if ((configFile->length <= 1)) {
HXLINE( 151)				return;
            			}
HXLINE( 153)			::Array< ::String > framerates = configFile->__get(1).split(HX_(" ",20,00,00,00));
HXLINE( 154)			 ::Dynamic fps1 = ::Std_obj::parseInt(framerates->__get(0));
HXDLIN( 154)			fps = ::Array_obj< ::Dynamic>::__new(2)->init(0,fps1)->init(1,::Std_obj::parseInt(framerates->__get(1)));
HXLINE( 155)			if (::hx::IsNull( fps->__get(0) )) {
HXLINE( 155)				fps[0] = 22;
            			}
HXLINE( 156)			if (::hx::IsNull( fps->__get(1) )) {
HXLINE( 156)				fps[1] = 26;
            			}
HXLINE( 158)			if ((configFile->length <= 2)) {
HXLINE( 159)				return;
            			}
HXLINE( 161)			offsets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 162)			{
HXLINE( 162)				int _g2 = 2;
HXDLIN( 162)				int _g3 = configFile->length;
HXDLIN( 162)				while((_g2 < _g3)){
HXLINE( 162)					_g2 = (_g2 + 1);
HXDLIN( 162)					int i1 = (_g2 - 1);
HXLINE( 163)					if ((::StringTools_obj::trim(configFile->__get(i1)) != HX_("",00,00,00,00))) {
HXLINE( 164)						::Array< ::String > animOffs = configFile->__get(i1).split(HX_(" ",20,00,00,00));
HXLINE( 165)						Float x = ::Std_obj::parseFloat(animOffs->__get(0));
HXLINE( 166)						Float y = ::Std_obj::parseFloat(animOffs->__get(1));
HXLINE( 167)						if (::Math_obj::isNaN(x)) {
HXLINE( 167)							x = ( (Float)(0) );
            						}
HXLINE( 168)						if (::Math_obj::isNaN(y)) {
HXLINE( 168)							y = ( (Float)(0) );
            						}
HXLINE( 169)						offsets->push(::Array_obj< Float >::__new(2)->init(0,x)->init(1,y));
            					}
            				}
            			}
            		}
HXLINE( 174)		bool failedToFind = false;
HXLINE( 175)		while(true){
HXLINE( 176)			{
HXLINE( 176)				int _g4 = 0;
HXDLIN( 176)				::Array< ::String > _g5 = ::objects::Note_obj::colArray;
HXDLIN( 176)				while((_g4 < _g5->length)){
HXLINE( 176)					::String v = _g5->__get(_g4);
HXDLIN( 176)					_g4 = (_g4 + 1);
HXLINE( 177)					if (!(this->checkForAnim((((((HX_("",00,00,00,00) + anim) + HX_(" ",20,00,00,00)) + v) + HX_(" ",20,00,00,00)) + (this->maxAnims + 1))))) {
HXLINE( 178)						failedToFind = true;
HXLINE( 179)						goto _hx_goto_9;
            					}
            				}
            				_hx_goto_9:;
            			}
HXLINE( 182)			if (failedToFind) {
HXLINE( 183)				goto _hx_goto_8;
            			}
HXLINE( 184)			this->set_maxAnims((this->maxAnims + 1));
            		}
            		_hx_goto_8:;
HXLINE( 187)		{
HXLINE( 187)			int _g6 = 0;
HXDLIN( 187)			int _g7 = this->maxAnims;
HXDLIN( 187)			while((_g6 < _g7)){
HXLINE( 187)				_g6 = (_g6 + 1);
HXDLIN( 187)				int animNum = (_g6 - 1);
HXLINE( 188)				{
HXLINE( 188)					int _g_current = 0;
HXDLIN( 188)					::Array< ::String > _g_array = ::objects::Note_obj::colArray;
HXDLIN( 188)					while((_g_current < _g_array->length)){
HXLINE( 188)						::String _g_value = _g_array->__get(_g_current);
HXDLIN( 188)						_g_current = (_g_current + 1);
HXDLIN( 188)						int _g_key = (_g_current - 1);
HXDLIN( 188)						int i2 = _g_key;
HXDLIN( 188)						::String col = _g_value;
HXDLIN( 188)						{
HXLINE( 189)							int data = (::hx::Mod(i2,::objects::Note_obj::colArray->length) + (animNum * ::objects::Note_obj::colArray->length));
HXLINE( 190)							::String name;
HXDLIN( 190)							if ((animNum > 0)) {
HXLINE( 190)								name = ((HX_("",00,00,00,00) + col) + (animNum + 1));
            							}
            							else {
HXLINE( 190)								name = col;
            							}
HXLINE( 191)							::Array< Float > offset = offsets->__get(::flixel::math::FlxMath_obj::wrap(data,0,::Std_obj::_hx_int(( (Float)((offsets->length - 1)) )))).StaticCast< ::Array< Float > >();
HXLINE( 192)							::objects::NoteSplash_obj::addAnimationToConfig(tempConfig,( (Float)(1) ),name,(((((HX_("",00,00,00,00) + anim) + HX_(" ",20,00,00,00)) + col) + HX_(" ",20,00,00,00)) + (animNum + 1)),fps,offset,::Array_obj< int >::__new(0),data);
            						}
            					}
            				}
            			}
            		}
HXLINE( 195)		this->set_config(tempConfig);
HXLINE( 196)		::objects::NoteSplash_obj::configs->set(path,this->config);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,createConfigTextSplash,(void))

void NoteSplash_obj::loadSplash(::String splash){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_204_loadSplash)
HXLINE( 205)		this->initTextureSplash(splash,null());
HXLINE( 207)		::String path = (HX_("images/",77,50,74,c1) + this->texture);
HXLINE( 208)		if (::objects::NoteSplash_obj::configs->exists(path)) {
HXLINE( 209)			this->initConfigSplash(splash,path);
HXLINE( 210)			return;
            		}
            		else {
HXLINE( 211)			if (::backend::Paths_obj::fileExists(((HX_("",00,00,00,00) + path) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 212)				this->createConfigSplash(path);
HXLINE( 213)				return;
            			}
            			else {
HXLINE( 215)				this->createConfigTextSplash(path);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,loadSplash,(void))

void NoteSplash_obj::loadSplashPixel(::String splash){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_224_loadSplashPixel)
HXLINE( 225)		this->initTextureSplash(splash,HX_("pixelUI/",95,50,4f,7e));
HXLINE( 227)		::String path = (HX_("images/",77,50,74,c1) + this->texture);
HXLINE( 228)		if (::objects::NoteSplash_obj::configs->exists(path)) {
HXLINE( 229)			this->initConfigSplash(splash,path);
HXLINE( 230)			return;
            		}
            		else {
HXLINE( 231)			if (::backend::Paths_obj::fileExists(((HX_("",00,00,00,00) + path) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 232)				this->createConfigSplash(path);
HXLINE( 233)				return;
            			}
            			else {
HXLINE( 235)				this->createConfigTextSplash(path);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,loadSplashPixel,(void))

void NoteSplash_obj::spawnSplashNote( ::Dynamic __o_x, ::Dynamic __o_y, ::Dynamic __o_noteData, ::objects::Note note, ::Dynamic __o_randomize){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::NoteSplash,_gthis) HXARGC(1)
            		void _hx_run(::String name){
            			HX_GC_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_339_spawnSplashNote)
HXLINE( 340)			_gthis->kill();
HXLINE( 341)			_gthis->spawned = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            		 ::Dynamic noteData = __o_noteData;
            		if (::hx::IsNull(__o_noteData)) noteData = 0;
            		 ::Dynamic randomize = __o_randomize;
            		if (::hx::IsNull(__o_randomize)) randomize = true;
            	HX_GC_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_239_spawnSplashNote)
HXDLIN( 239)		 ::objects::NoteSplash _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 240)		bool _hx_tmp;
HXDLIN( 240)		if (::hx::IsNotNull( note )) {
HXLINE( 240)			_hx_tmp = ( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 240)			_hx_tmp = false;
            		}
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 241)			return;
            		}
HXLINE( 243)		this->aliveTime = ( (Float)(0) );
HXLINE( 245)		if (!(this->inEditor)) {
HXLINE( 246)			::String loadedTexture = (::objects::NoteSplash_obj::defaultNoteSplash + ::objects::NoteSplash_obj::getSplashSkinPostfix());
HXLINE( 247)			bool _hx_tmp1;
HXDLIN( 247)			if (::hx::IsNotNull( note )) {
HXLINE( 247)				_hx_tmp1 = ::hx::IsNotNull( note->noteSplashData->__Field(HX_("texture",db,c8,e0,9e),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 247)				_hx_tmp1 = false;
            			}
HXDLIN( 247)			if (_hx_tmp1) {
HXLINE( 248)				loadedTexture = ( (::String)(note->noteSplashData->__Field(HX_("texture",db,c8,e0,9e),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 249)				bool _hx_tmp2;
HXDLIN( 249)				bool _hx_tmp3;
HXDLIN( 249)				if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE( 249)					_hx_tmp3 = ::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 249)					_hx_tmp3 = false;
            				}
HXDLIN( 249)				if (_hx_tmp3) {
HXLINE( 249)					_hx_tmp2 = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) ).length > 0);
            				}
            				else {
HXLINE( 249)					_hx_tmp2 = false;
            				}
HXDLIN( 249)				if (_hx_tmp2) {
HXLINE( 250)					loadedTexture = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) );
            				}
            			}
HXLINE( 252)			if ((this->texture != loadedTexture)) {
HXLINE( 253)				this->loadSplash(loadedTexture);
            			}
            		}
HXLINE( 256)		this->setPosition(x,y);
HXLINE( 258)		if (::hx::IsNotNull( this->babyArrow )) {
HXLINE( 259)			this->setPosition((this->babyArrow->x - (::objects::Note_obj::swagWidth * ((Float)0.95))),(this->babyArrow->y - ::objects::Note_obj::swagWidth));
            		}
HXLINE( 261)		if (::hx::IsNotNull( note )) {
HXLINE( 262)			noteData = note->noteData;
            		}
HXLINE( 264)		bool _hx_tmp4;
HXDLIN( 264)		if (( (bool)(randomize) )) {
HXLINE( 264)			_hx_tmp4 = (this->maxAnims > 1);
            		}
            		else {
HXLINE( 264)			_hx_tmp4 = false;
            		}
HXDLIN( 264)		if (_hx_tmp4) {
HXLINE( 265)			int noteData1 = ::hx::Mod(noteData,::objects::Note_obj::colArray->length);
HXDLIN( 265)			int noteData2 = ::flixel::FlxG_obj::random->_hx_int(0,(this->maxAnims - 1),null());
HXDLIN( 265)			noteData = (noteData1 + (noteData2 * ::objects::Note_obj::colArray->length));
            		}
HXLINE( 267)		this->noteData = ( (int)(noteData) );
HXLINE( 268)		::String anim = this->playDefaultAnim();
HXLINE( 270)		 ::shaders::RGBPalette tempShader = null();
HXLINE( 271)		if (( (bool)(this->config->__Field(HX_("allowRGB",04,8e,17,9e),::hx::paccDynamic)) )) {
HXLINE( 273)			::objects::Note_obj::initializeGlobalRGBShader(::hx::Mod(noteData,::objects::Note_obj::colArray->length));
HXLINE( 274)			bool _hx_tmp5;
HXDLIN( 274)			if (!(this->inEditor)) {
HXLINE( 274)				bool _hx_tmp6;
HXDLIN( 274)				if (::hx::IsNotNull( note )) {
HXLINE( 274)					_hx_tmp6 = ( (bool)(note->noteSplashData->__Field(HX_("useRGBShader",cb,ac,57,46),::hx::paccDynamic)) );
            				}
            				else {
HXLINE( 274)					_hx_tmp6 = true;
            				}
HXDLIN( 274)				if (_hx_tmp6) {
HXLINE( 274)					if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE( 274)						_hx_tmp5 = !(( (bool)(::states::PlayState_obj::SONG->__Field(HX_("disableNoteRGB",33,ad,d1,4a),::hx::paccDynamic)) ));
            					}
            					else {
HXLINE( 274)						_hx_tmp5 = true;
            					}
            				}
            				else {
HXLINE( 274)					_hx_tmp5 = false;
            				}
            			}
            			else {
HXLINE( 274)				_hx_tmp5 = true;
            			}
HXDLIN( 274)			if (_hx_tmp5) {
HXLINE( 276)				tempShader =  ::shaders::RGBPalette_obj::__alloc( HX_CTX );
HXLINE( 278)				bool _hx_tmp7;
HXDLIN( 278)				bool _hx_tmp8;
HXDLIN( 278)				if (::hx::IsNotNull( note )) {
HXLINE( 278)					_hx_tmp8 = !(( (bool)(note->noteSplashData->__Field(HX_("useGlobalShader",cf,57,4f,53),::hx::paccDynamic)) ));
            				}
            				else {
HXLINE( 278)					_hx_tmp8 = true;
            				}
HXDLIN( 278)				if (!(_hx_tmp8)) {
HXLINE( 278)					_hx_tmp7 = this->inEditor;
            				}
            				else {
HXLINE( 278)					_hx_tmp7 = true;
            				}
HXDLIN( 278)				if (_hx_tmp7) {
HXLINE( 280)					::Array< ::Dynamic> colors = ( (::Array< ::Dynamic>)(this->config->__Field(HX_("rgb",0d,db,56,00),::hx::paccDynamic)) );
HXLINE( 281)					if (::hx::IsNotNull( colors )) {
HXLINE( 283)						int _g = 0;
HXDLIN( 283)						int _g1 = colors->length;
HXDLIN( 283)						while((_g < _g1)){
HXLINE( 283)							_g = (_g + 1);
HXDLIN( 283)							int i = (_g - 1);
HXLINE( 285)							if ((i > 2)) {
HXLINE( 285)								goto _hx_goto_16;
            							}
HXLINE( 287)							::Array< int > arr = ::backend::ClientPrefs_obj::data->arrowRGB->__get(::hx::Mod(noteData,::objects::Note_obj::colArray->length)).StaticCast< ::Array< int > >();
HXLINE( 288)							if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE( 288)								arr = ::backend::ClientPrefs_obj::data->arrowRGBPixel->__get(::hx::Mod(noteData,::objects::Note_obj::colArray->length)).StaticCast< ::Array< int > >();
            							}
HXLINE( 290)							 ::Dynamic rgb = colors->__get(i);
HXLINE( 291)							if (::hx::IsNull( rgb )) {
HXLINE( 293)								if ((i == 0)) {
HXLINE( 293)									tempShader->set_r(arr->__get(0));
            								}
            								else {
HXLINE( 294)									if ((i == 1)) {
HXLINE( 294)										tempShader->set_g(arr->__get(1));
            									}
            									else {
HXLINE( 295)										if ((i == 2)) {
HXLINE( 295)											tempShader->set_b(arr->__get(2));
            										}
            									}
            								}
HXLINE( 296)								continue;
            							}
HXLINE( 299)							 ::Dynamic r = rgb->__Field(HX_("r",72,00,00,00),::hx::paccDynamic);
HXLINE( 300)							 ::Dynamic g = rgb->__Field(HX_("g",67,00,00,00),::hx::paccDynamic);
HXLINE( 301)							 ::Dynamic b = rgb->__Field(HX_("b",62,00,00,00),::hx::paccDynamic);
HXLINE( 303)							bool _hx_tmp9;
HXDLIN( 303)							bool _hx_tmp10;
HXDLIN( 303)							if (::hx::IsNotNull( r )) {
HXLINE( 303)								_hx_tmp10 = ::Math_obj::isNaN(( (Float)(r) ));
            							}
            							else {
HXLINE( 303)								_hx_tmp10 = true;
            							}
HXDLIN( 303)							if (!(_hx_tmp10)) {
HXLINE( 303)								_hx_tmp9 = ::hx::IsLess( r,0 );
            							}
            							else {
HXLINE( 303)								_hx_tmp9 = true;
            							}
HXDLIN( 303)							if (_hx_tmp9) {
HXLINE( 303)								r = arr->__get(0);
            							}
HXLINE( 304)							bool _hx_tmp11;
HXDLIN( 304)							bool _hx_tmp12;
HXDLIN( 304)							if (::hx::IsNotNull( g )) {
HXLINE( 304)								_hx_tmp12 = ::Math_obj::isNaN(( (Float)(g) ));
            							}
            							else {
HXLINE( 304)								_hx_tmp12 = true;
            							}
HXDLIN( 304)							if (!(_hx_tmp12)) {
HXLINE( 304)								_hx_tmp11 = ::hx::IsLess( g,0 );
            							}
            							else {
HXLINE( 304)								_hx_tmp11 = true;
            							}
HXDLIN( 304)							if (_hx_tmp11) {
HXLINE( 304)								g = arr->__get(1);
            							}
HXLINE( 305)							bool _hx_tmp13;
HXDLIN( 305)							bool _hx_tmp14;
HXDLIN( 305)							if (::hx::IsNotNull( b )) {
HXLINE( 305)								_hx_tmp14 = ::Math_obj::isNaN(( (Float)(b) ));
            							}
            							else {
HXLINE( 305)								_hx_tmp14 = true;
            							}
HXDLIN( 305)							if (!(_hx_tmp14)) {
HXLINE( 305)								_hx_tmp13 = ::hx::IsLess( b,0 );
            							}
            							else {
HXLINE( 305)								_hx_tmp13 = true;
            							}
HXDLIN( 305)							if (_hx_tmp13) {
HXLINE( 305)								b = arr->__get(2);
            							}
HXLINE( 307)							int Red = ( (int)(r) );
HXDLIN( 307)							int Green = ( (int)(g) );
HXDLIN( 307)							int Blue = ( (int)(b) );
HXDLIN( 307)							int Alpha = 255;
HXDLIN( 307)							int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 307)							{
HXLINE( 307)								color = (color & -16711681);
HXDLIN( 307)								int color1;
HXDLIN( 307)								if ((Red > 255)) {
HXLINE( 307)									color1 = 255;
            								}
            								else {
HXLINE( 307)									if ((Red < 0)) {
HXLINE( 307)										color1 = 0;
            									}
            									else {
HXLINE( 307)										color1 = Red;
            									}
            								}
HXDLIN( 307)								color = (color | (color1 << 16));
            							}
HXDLIN( 307)							{
HXLINE( 307)								color = (color & -65281);
HXDLIN( 307)								int color2;
HXDLIN( 307)								if ((Green > 255)) {
HXLINE( 307)									color2 = 255;
            								}
            								else {
HXLINE( 307)									if ((Green < 0)) {
HXLINE( 307)										color2 = 0;
            									}
            									else {
HXLINE( 307)										color2 = Green;
            									}
            								}
HXDLIN( 307)								color = (color | (color2 << 8));
            							}
HXDLIN( 307)							{
HXLINE( 307)								color = (color & -256);
HXDLIN( 307)								int color3;
HXDLIN( 307)								if ((Blue > 255)) {
HXLINE( 307)									color3 = 255;
            								}
            								else {
HXLINE( 307)									if ((Blue < 0)) {
HXLINE( 307)										color3 = 0;
            									}
            									else {
HXLINE( 307)										color3 = Blue;
            									}
            								}
HXDLIN( 307)								color = (color | color3);
            							}
HXDLIN( 307)							{
HXLINE( 307)								color = (color & 16777215);
HXDLIN( 307)								int color4;
HXDLIN( 307)								if ((Alpha > 255)) {
HXLINE( 307)									color4 = 255;
            								}
            								else {
HXLINE( 307)									if ((Alpha < 0)) {
HXLINE( 307)										color4 = 0;
            									}
            									else {
HXLINE( 307)										color4 = Alpha;
            									}
            								}
HXDLIN( 307)								color = (color | (color4 << 24));
            							}
HXDLIN( 307)							int color5 = color;
HXLINE( 308)							if ((i == 0)) {
HXLINE( 308)								tempShader->set_r(color5);
            							}
            							else {
HXLINE( 309)								if ((i == 1)) {
HXLINE( 309)									tempShader->set_g(color5);
            								}
            								else {
HXLINE( 310)									if ((i == 2)) {
HXLINE( 310)										tempShader->set_b(color5);
            									}
            								}
            							}
            						}
            						_hx_goto_16:;
            					}
            					else {
HXLINE( 313)						tempShader->copyValues(::objects::Note_obj::globalRgbShaders->__get(::hx::Mod(noteData,::objects::Note_obj::colArray->length)).StaticCast<  ::shaders::RGBPalette >());
            					}
HXLINE( 315)					if (::hx::IsNotNull( note )) {
HXLINE( 317)						if (::hx::IsNotEq( note->noteSplashData->__Field(HX_("r",72,00,00,00),::hx::paccDynamic),-1 )) {
HXLINE( 317)							tempShader->set_r(( (int)(note->noteSplashData->__Field(HX_("r",72,00,00,00),::hx::paccDynamic)) ));
            						}
HXLINE( 318)						if (::hx::IsNotEq( note->noteSplashData->__Field(HX_("g",67,00,00,00),::hx::paccDynamic),-1 )) {
HXLINE( 318)							tempShader->set_g(( (int)(note->noteSplashData->__Field(HX_("g",67,00,00,00),::hx::paccDynamic)) ));
            						}
HXLINE( 319)						if (::hx::IsNotEq( note->noteSplashData->__Field(HX_("b",62,00,00,00),::hx::paccDynamic),-1 )) {
HXLINE( 319)							tempShader->set_b(( (int)(note->noteSplashData->__Field(HX_("b",62,00,00,00),::hx::paccDynamic)) ));
            						}
            					}
            				}
            				else {
HXLINE( 322)					tempShader->copyValues(::objects::Note_obj::globalRgbShaders->__get(::hx::Mod(noteData,::objects::Note_obj::colArray->length)).StaticCast<  ::shaders::RGBPalette >());
            				}
            			}
            		}
HXLINE( 325)		this->rgbShader->copyValues(tempShader);
HXLINE( 326)		if (!(( (bool)(this->config->__Field(HX_("allowPixel",3d,81,6f,ed),::hx::paccDynamic)) ))) {
HXLINE( 326)			this->rgbShader->set_pixelAmount(( (Float)(1) ));
            		}
            		else {
HXLINE( 327)			if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE( 327)				this->rgbShader->set_pixelAmount(( (Float)(6) ));
            			}
            		}
HXLINE( 329)		{
HXLINE( 329)			 ::flixel::math::FlxBasePoint this1 = this->offset;
HXDLIN( 329)			this1->set_x(( (Float)(10) ));
HXDLIN( 329)			this1->set_y(( (Float)(10) ));
            		}
HXLINE( 330)		 ::Dynamic conf = ( ( ::haxe::ds::StringMap)( ::Dynamic(this->config->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))) )->get(anim);
HXLINE( 331)		::Array< Float > offsets = ::Array_obj< Float >::fromData( _hx_array_data_45753873_19,2);
HXLINE( 332)		if (::hx::IsNotNull( conf )) {
HXLINE( 332)			offsets = ( (::Array< Float >)(conf->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)) );
            		}
HXLINE( 333)		if (::hx::IsNotNull( offsets )) {
HXLINE( 335)			this->offset->set_x((this->offset->x + offsets->__get(0)));
HXLINE( 336)			this->offset->set_y((this->offset->y + offsets->__get(1)));
            		}
HXLINE( 339)		this->animation->onFinish->add( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 344)		this->set_alpha(::backend::ClientPrefs_obj::data->splashAlpha);
HXLINE( 345)		if (::hx::IsNotNull( note )) {
HXLINE( 345)			this->set_alpha(( (Float)(note->noteSplashData->__Field(HX_("a",61,00,00,00),::hx::paccDynamic)) ));
            		}
HXLINE( 347)		this->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 348)		if (::hx::IsNotNull( note )) {
HXLINE( 348)			this->set_antialiasing(( (bool)(note->noteSplashData->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            		}
HXLINE( 349)		bool _hx_tmp15;
HXDLIN( 349)		if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE( 349)			_hx_tmp15 = ( (bool)(this->config->__Field(HX_("allowPixel",3d,81,6f,ed),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 349)			_hx_tmp15 = false;
            		}
HXDLIN( 349)		if (_hx_tmp15) {
HXLINE( 349)			this->set_antialiasing(false);
            		}
HXLINE( 351)		int minFps = 22;
HXLINE( 352)		int maxFps = 26;
HXLINE( 353)		if (::hx::IsNotNull( conf )) {
HXLINE( 355)			minFps = ( (int)( ::Dynamic(conf->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 356)			if ((minFps < 0)) {
HXLINE( 356)				minFps = 0;
            			}
HXLINE( 358)			maxFps = ( (int)( ::Dynamic(conf->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 359)			if ((maxFps < 0)) {
HXLINE( 359)				maxFps = 0;
            			}
            		}
HXLINE( 362)		if (::hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 363)			 ::flixel::animation::FlxAnimation _hx_tmp16 = this->animation->_curAnim;
HXDLIN( 363)			_hx_tmp16->set_frameRate(( (Float)(::flixel::FlxG_obj::random->_hx_int(minFps,maxFps,null())) ));
            		}
HXLINE( 365)		this->spawned = true;
            	}


HX_DEFINE_DYNAMIC_FUNC5(NoteSplash_obj,spawnSplashNote,(void))

::String NoteSplash_obj::playDefaultAnim(){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_369_playDefaultAnim)
HXLINE( 370)		::String anim = this->noteDataMap->get_string(this->noteData);
HXLINE( 371)		bool _hx_tmp;
HXDLIN( 371)		if (::hx::IsNotNull( anim )) {
HXLINE( 371)			_hx_tmp = this->animation->exists(anim);
            		}
            		else {
HXLINE( 371)			_hx_tmp = false;
            		}
HXDLIN( 371)		if (_hx_tmp) {
HXLINE( 372)			this->animation->play(anim,true,null(),null());
            		}
HXLINE( 374)		return anim;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NoteSplash_obj,playDefaultAnim,return )

bool NoteSplash_obj::checkForAnim(::String anim){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_378_checkForAnim)
HXLINE( 379)		::Array< ::Dynamic> animFrames = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 381)		this->animation->findByPrefix(animFrames,anim,null());
HXLINE( 383)		return (animFrames->length > 0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,checkForAnim,return )

void NoteSplash_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_389_update)
HXLINE( 390)		if (this->spawned) {
HXLINE( 392)			 ::objects::NoteSplash _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 392)			_hx_tmp->aliveTime = (_hx_tmp->aliveTime + elapsed);
HXLINE( 393)			bool _hx_tmp1;
HXDLIN( 393)			if (::hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 393)				_hx_tmp1 = (this->aliveTime >= ::objects::NoteSplash_obj::buggedKillTime);
            			}
            			else {
HXLINE( 393)				_hx_tmp1 = true;
            			}
HXDLIN( 393)			if (_hx_tmp1) {
HXLINE( 395)				this->kill();
HXLINE( 396)				this->spawned = false;
            			}
            		}
HXLINE( 400)		if (::hx::IsNotNull( this->babyArrow )) {
HXLINE( 402)			if (this->copyX) {
HXLINE( 403)				this->set_x((this->babyArrow->x - (::objects::Note_obj::swagWidth * ((Float)0.95))));
            			}
HXLINE( 405)			if (this->copyY) {
HXLINE( 406)				this->set_y((this->babyArrow->y - ::objects::Note_obj::swagWidth));
            			}
            		}
HXLINE( 408)		this->super::update(elapsed);
            	}


 ::Dynamic NoteSplash_obj::set_config( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_441_set_config)
HXLINE( 442)		if (::hx::IsNull( value )) {
HXLINE( 442)			value = ::objects::NoteSplash_obj::createConfig();
            		}
HXLINE( 445)		this->animation->clearAnimations();
HXLINE( 446)		this->noteDataMap->clear();
HXLINE( 448)		{
HXLINE( 448)			 ::Dynamic i = ( ( ::haxe::ds::StringMap)( ::Dynamic(value->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))) )->iterator();
HXDLIN( 448)			while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 448)				 ::Dynamic i1 = i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXLINE( 450)				::String key = ( (::String)(i1->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 451)				bool _hx_tmp;
HXDLIN( 451)				bool _hx_tmp1;
HXDLIN( 451)				if ((( (::String)(i1->__Field(HX_("prefix",92,d9,b6,ae),::hx::paccDynamic)) ).length > 0)) {
HXLINE( 451)					_hx_tmp1 = ::hx::IsNotNull( key );
            				}
            				else {
HXLINE( 451)					_hx_tmp1 = false;
            				}
HXDLIN( 451)				if (_hx_tmp1) {
HXLINE( 451)					_hx_tmp = (key.length > 0);
            				}
            				else {
HXLINE( 451)					_hx_tmp = false;
            				}
HXDLIN( 451)				if (_hx_tmp) {
HXLINE( 453)					bool _hx_tmp2;
HXDLIN( 453)					if (::hx::IsNotNull( i1->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic) )) {
HXLINE( 453)						_hx_tmp2 = (( (::Array< int >)(i1->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) )->length > 0);
            					}
            					else {
HXLINE( 453)						_hx_tmp2 = false;
            					}
HXDLIN( 453)					if (_hx_tmp2) {
HXLINE( 454)						this->animation->addByIndices(key,( (::String)(i1->__Field(HX_("prefix",92,d9,b6,ae),::hx::paccDynamic)) ),( (::Array< int >)(i1->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) ),HX_("",00,00,00,00), ::Dynamic(i1->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic))->__GetItem(1),false,null(),null());
            					}
            					else {
HXLINE( 456)						this->animation->addByPrefix(key,( (::String)(i1->__Field(HX_("prefix",92,d9,b6,ae),::hx::paccDynamic)) ), ::Dynamic(i1->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic))->__GetItem(1),false,null(),null());
            					}
HXLINE( 458)					this->noteDataMap->set(( (int)(i1->__Field(HX_("noteData",3c,7b,96,51),::hx::paccDynamic)) ),key);
            				}
            			}
            		}
HXLINE( 462)		{
HXLINE( 462)			 ::flixel::math::FlxBasePoint this1 = this->scale;
HXDLIN( 462)			Float y = ( (Float)(value->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) );
HXDLIN( 462)			this1->set_x(( (Float)(value->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) ));
HXDLIN( 462)			this1->set_y(y);
            		}
HXLINE( 463)		return (this->config = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,set_config,return )

int NoteSplash_obj::set_maxAnims(int value){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_467_set_maxAnims)
HXLINE( 468)		if ((value > 0)) {
HXLINE( 469)			this->noteData = ::Std_obj::_hx_int(( (Float)(::flixel::math::FlxMath_obj::wrap(this->noteData,0,((value * ::objects::Note_obj::colArray->length) - 1))) ));
            		}
            		else {
HXLINE( 471)			this->noteData = 0;
            		}
HXLINE( 473)		return (this->maxAnims = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteSplash_obj,set_maxAnims,return )

::String NoteSplash_obj::defaultNoteSplash;

 ::haxe::ds::StringMap NoteSplash_obj::configs;

Float NoteSplash_obj::buggedKillTime;

::String NoteSplash_obj::getSplashSkinPostfix(){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_412_getSplashSkinPostfix)
HXLINE( 413)		::String skin = HX_("",00,00,00,00);
HXLINE( 414)		if ((::backend::ClientPrefs_obj::data->splashSkin != ::backend::ClientPrefs_obj::defaultData->splashSkin)) {
HXLINE( 415)			skin = (HX_("-",2d,00,00,00) + ::StringTools_obj::replace(::StringTools_obj::trim(::backend::ClientPrefs_obj::data->splashSkin).toLowerCase(),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)));
            		}
HXLINE( 416)		return skin;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NoteSplash_obj,getSplashSkinPostfix,return )

 ::Dynamic NoteSplash_obj::createConfig(){
            	HX_GC_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_421_createConfig)
HXDLIN( 421)		return  ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("animations",ef,34,1c,83), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ))
            			->setFixed(1,HX_("allowRGB",04,8e,17,9e),true)
            			->setFixed(2,HX_("allowPixelVariant",c8,38,2b,e5),false)
            			->setFixed(3,HX_("allowPixel",3d,81,6f,ed),true)
            			->setFixed(4,HX_("rgb",0d,db,56,00),null())
            			->setFixed(5,HX_("scale",8a,ce,ce,78),( (Float)(1) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NoteSplash_obj,createConfig,return )

 ::Dynamic NoteSplash_obj::addAnimationToConfig( ::Dynamic config,Float scale,::String name,::String prefix,::Array< int > fps,::Array< Float > offsets,::Array< int > indices,int noteData){
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_432_addAnimationToConfig)
HXLINE( 433)		if (::hx::IsNull( config )) {
HXLINE( 433)			config = ::objects::NoteSplash_obj::createConfig();
            		}
HXLINE( 435)		( ( ::haxe::ds::StringMap)( ::Dynamic(config->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))) )->set(name, ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("prefix",92,d9,b6,ae),prefix)
            			->setFixed(1,HX_("offsets",80,09,65,d7),offsets)
            			->setFixed(2,HX_("indices",27,47,54,e3),indices)
            			->setFixed(3,HX_("fps",e9,c7,4d,00),fps)
            			->setFixed(4,HX_("name",4b,72,ff,48),name)
            			->setFixed(5,HX_("noteData",3c,7b,96,51),noteData)));
HXLINE( 436)		config->__SetField(HX_("scale",8a,ce,ce,78),scale,::hx::paccDynamic);
HXLINE( 437)		return config;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(NoteSplash_obj,addAnimationToConfig,return )


::hx::ObjectPtr< NoteSplash_obj > NoteSplash_obj::__new( ::Dynamic __o_x, ::Dynamic __o_y,::String splash) {
	::hx::ObjectPtr< NoteSplash_obj > __this = new NoteSplash_obj();
	__this->__construct(__o_x,__o_y,splash);
	return __this;
}

::hx::ObjectPtr< NoteSplash_obj > NoteSplash_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_x, ::Dynamic __o_y,::String splash) {
	NoteSplash_obj *__this = (NoteSplash_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteSplash_obj), true, "objects.NoteSplash"));
	*(void **)__this = NoteSplash_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,splash);
	return __this;
}

NoteSplash_obj::NoteSplash_obj()
{
}

void NoteSplash_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NoteSplash);
	HX_MARK_MEMBER_NAME(rgbShader,"rgbShader");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(config,"config");
	HX_MARK_MEMBER_NAME(babyArrow,"babyArrow");
	HX_MARK_MEMBER_NAME(noteData,"noteData");
	HX_MARK_MEMBER_NAME(copyX,"copyX");
	HX_MARK_MEMBER_NAME(copyY,"copyY");
	HX_MARK_MEMBER_NAME(inEditor,"inEditor");
	HX_MARK_MEMBER_NAME(spawned,"spawned");
	HX_MARK_MEMBER_NAME(noteDataMap,"noteDataMap");
	HX_MARK_MEMBER_NAME(maxAnims,"maxAnims");
	HX_MARK_MEMBER_NAME(aliveTime,"aliveTime");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NoteSplash_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rgbShader,"rgbShader");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(config,"config");
	HX_VISIT_MEMBER_NAME(babyArrow,"babyArrow");
	HX_VISIT_MEMBER_NAME(noteData,"noteData");
	HX_VISIT_MEMBER_NAME(copyX,"copyX");
	HX_VISIT_MEMBER_NAME(copyY,"copyY");
	HX_VISIT_MEMBER_NAME(inEditor,"inEditor");
	HX_VISIT_MEMBER_NAME(spawned,"spawned");
	HX_VISIT_MEMBER_NAME(noteDataMap,"noteDataMap");
	HX_VISIT_MEMBER_NAME(maxAnims,"maxAnims");
	HX_VISIT_MEMBER_NAME(aliveTime,"aliveTime");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NoteSplash_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"copyX") ) { return ::hx::Val( copyX ); }
		if (HX_FIELD_EQ(inName,"copyY") ) { return ::hx::Val( copyY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { return ::hx::Val( config ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"spawned") ) { return ::hx::Val( spawned ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		if (HX_FIELD_EQ(inName,"inEditor") ) { return ::hx::Val( inEditor ); }
		if (HX_FIELD_EQ(inName,"maxAnims") ) { return ::hx::Val( maxAnims ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rgbShader") ) { return ::hx::Val( rgbShader ); }
		if (HX_FIELD_EQ(inName,"babyArrow") ) { return ::hx::Val( babyArrow ); }
		if (HX_FIELD_EQ(inName,"aliveTime") ) { return ::hx::Val( aliveTime ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadSplash") ) { return ::hx::Val( loadSplash_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_config") ) { return ::hx::Val( set_config_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"noteDataMap") ) { return ::hx::Val( noteDataMap ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkForAnim") ) { return ::hx::Val( checkForAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxAnims") ) { return ::hx::Val( set_maxAnims_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadSplashPixel") ) { return ::hx::Val( loadSplashPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnSplashNote") ) { return ::hx::Val( spawnSplashNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"playDefaultAnim") ) { return ::hx::Val( playDefaultAnim_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initConfigSplash") ) { return ::hx::Val( initConfigSplash_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"initTextureSplash") ) { return ::hx::Val( initTextureSplash_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createConfigSplash") ) { return ::hx::Val( createConfigSplash_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createConfigTextSplash") ) { return ::hx::Val( createConfigTextSplash_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NoteSplash_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"configs") ) { outValue = ( configs ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createConfig") ) { outValue = createConfig_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buggedKillTime") ) { outValue = ( buggedKillTime ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultNoteSplash") ) { outValue = ( defaultNoteSplash ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getSplashSkinPostfix") ) { outValue = getSplashSkinPostfix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addAnimationToConfig") ) { outValue = addAnimationToConfig_dyn(); return true; }
	}
	return false;
}

::hx::Val NoteSplash_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"copyX") ) { copyX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copyY") ) { copyY=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_config(inValue.Cast<  ::Dynamic >()) );config=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawned") ) { spawned=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inEditor") ) { inEditor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxAnims") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxAnims(inValue.Cast< int >()) );maxAnims=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rgbShader") ) { rgbShader=inValue.Cast<  ::objects::PixelSplashShaderRef >(); return inValue; }
		if (HX_FIELD_EQ(inName,"babyArrow") ) { babyArrow=inValue.Cast<  ::objects::StrumNote >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aliveTime") ) { aliveTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"noteDataMap") ) { noteDataMap=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NoteSplash_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"configs") ) { configs=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buggedKillTime") ) { buggedKillTime=ioValue.Cast< Float >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultNoteSplash") ) { defaultNoteSplash=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void NoteSplash_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rgbShader",12,56,b9,2f));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("config",c2,56,d2,c7));
	outFields->push(HX_("babyArrow",93,78,aa,71));
	outFields->push(HX_("noteData",3c,7b,96,51));
	outFields->push(HX_("copyX",03,83,5f,4a));
	outFields->push(HX_("copyY",04,83,5f,4a));
	outFields->push(HX_("inEditor",72,8b,5b,c4));
	outFields->push(HX_("spawned",5a,3b,f7,9e));
	outFields->push(HX_("noteDataMap",c0,f4,4b,c5));
	outFields->push(HX_("maxAnims",fe,1b,01,cd));
	outFields->push(HX_("aliveTime",7a,c6,79,aa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NoteSplash_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::PixelSplashShaderRef */ ,(int)offsetof(NoteSplash_obj,rgbShader),HX_("rgbShader",12,56,b9,2f)},
	{::hx::fsString,(int)offsetof(NoteSplash_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(NoteSplash_obj,config),HX_("config",c2,56,d2,c7)},
	{::hx::fsObject /*  ::objects::StrumNote */ ,(int)offsetof(NoteSplash_obj,babyArrow),HX_("babyArrow",93,78,aa,71)},
	{::hx::fsInt,(int)offsetof(NoteSplash_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{::hx::fsBool,(int)offsetof(NoteSplash_obj,copyX),HX_("copyX",03,83,5f,4a)},
	{::hx::fsBool,(int)offsetof(NoteSplash_obj,copyY),HX_("copyY",04,83,5f,4a)},
	{::hx::fsBool,(int)offsetof(NoteSplash_obj,inEditor),HX_("inEditor",72,8b,5b,c4)},
	{::hx::fsBool,(int)offsetof(NoteSplash_obj,spawned),HX_("spawned",5a,3b,f7,9e)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(NoteSplash_obj,noteDataMap),HX_("noteDataMap",c0,f4,4b,c5)},
	{::hx::fsInt,(int)offsetof(NoteSplash_obj,maxAnims),HX_("maxAnims",fe,1b,01,cd)},
	{::hx::fsFloat,(int)offsetof(NoteSplash_obj,aliveTime),HX_("aliveTime",7a,c6,79,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo NoteSplash_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &NoteSplash_obj::defaultNoteSplash,HX_("defaultNoteSplash",1a,47,0e,34)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &NoteSplash_obj::configs,HX_("configs",71,93,39,10)},
	{::hx::fsFloat,(void *) &NoteSplash_obj::buggedKillTime,HX_("buggedKillTime",bd,92,40,5e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String NoteSplash_obj_sMemberFields[] = {
	HX_("rgbShader",12,56,b9,2f),
	HX_("texture",db,c8,e0,9e),
	HX_("config",c2,56,d2,c7),
	HX_("babyArrow",93,78,aa,71),
	HX_("noteData",3c,7b,96,51),
	HX_("copyX",03,83,5f,4a),
	HX_("copyY",04,83,5f,4a),
	HX_("inEditor",72,8b,5b,c4),
	HX_("spawned",5a,3b,f7,9e),
	HX_("noteDataMap",c0,f4,4b,c5),
	HX_("maxAnims",fe,1b,01,cd),
	HX_("initTextureSplash",72,bf,11,39),
	HX_("initConfigSplash",f9,a8,e9,11),
	HX_("createConfigSplash",e5,06,c6,18),
	HX_("createConfigTextSplash",72,1e,da,c1),
	HX_("loadSplash",2d,b0,c3,74),
	HX_("loadSplashPixel",19,c3,be,8b),
	HX_("spawnSplashNote",14,df,a1,0b),
	HX_("playDefaultAnim",de,85,02,c7),
	HX_("checkForAnim",d2,e9,a9,af),
	HX_("aliveTime",7a,c6,79,aa),
	HX_("update",09,86,05,87),
	HX_("set_config",ff,64,d7,bb),
	HX_("set_maxAnims",7b,f3,13,97),
	::String(null()) };

static void NoteSplash_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NoteSplash_obj::defaultNoteSplash,"defaultNoteSplash");
	HX_MARK_MEMBER_NAME(NoteSplash_obj::configs,"configs");
	HX_MARK_MEMBER_NAME(NoteSplash_obj::buggedKillTime,"buggedKillTime");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NoteSplash_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NoteSplash_obj::defaultNoteSplash,"defaultNoteSplash");
	HX_VISIT_MEMBER_NAME(NoteSplash_obj::configs,"configs");
	HX_VISIT_MEMBER_NAME(NoteSplash_obj::buggedKillTime,"buggedKillTime");
};

#endif

::hx::Class NoteSplash_obj::__mClass;

static ::String NoteSplash_obj_sStaticFields[] = {
	HX_("defaultNoteSplash",1a,47,0e,34),
	HX_("configs",71,93,39,10),
	HX_("buggedKillTime",bd,92,40,5e),
	HX_("getSplashSkinPostfix",db,cc,6e,ed),
	HX_("createConfig",de,96,27,ea),
	HX_("addAnimationToConfig",60,a6,91,aa),
	::String(null())
};

void NoteSplash_obj::__register()
{
	NoteSplash_obj _hx_dummy;
	NoteSplash_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.NoteSplash",73,38,75,45);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NoteSplash_obj::__GetStatic;
	__mClass->mSetStaticField = &NoteSplash_obj::__SetStatic;
	__mClass->mMarkFunc = NoteSplash_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NoteSplash_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteSplash_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteSplash_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NoteSplash_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteSplash_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteSplash_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NoteSplash_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_45_boot)
HXDLIN(  45)		defaultNoteSplash = HX_("noteSplashes/noteSplashes",4f,0e,1e,ef);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_46_boot)
HXDLIN(  46)		configs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_a3b2eb9b9f1b347d_387_boot)
HXDLIN( 387)		buggedKillTime = ((Float)0.5);
            	}
}

} // end namespace objects
