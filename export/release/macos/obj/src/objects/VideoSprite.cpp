// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxPieDial
#include <flixel/addons/display/FlxPieDial.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxPieDialShape
#include <flixel/addons/display/FlxPieDialShape.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_hxvlc_flixel_FlxVideoSprite
#include <hxvlc/flixel/FlxVideoSprite.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Video
#include <hxvlc/openfl/Video.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_objects_VideoSprite
#include <objects/VideoSprite.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_935a2b3141f963dd_52_new,"objects.VideoSprite","new",0x6018c018,"objects.VideoSprite.new","objects/VideoSprite.hx",52,0x2e186a19)
HX_DEFINE_STACK_FRAME(_hx_pos_935a2b3141f963dd_9_new,"objects.VideoSprite","new",0x6018c018,"objects.VideoSprite.new","objects/VideoSprite.hx",9,0x2e186a19)
static const ::String _hx_array_data_24091426_2[] = {
	HX_("input-repeat=65545",b8,24,75,20),
};
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_72_destroy,"objects.VideoSprite","destroy",0x6ca958b2,"objects.VideoSprite.destroy","objects/VideoSprite.hx",72,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_99_finishVideo,"objects.VideoSprite","finishVideo",0x20509ee0,"objects.VideoSprite.finishVideo","objects/VideoSprite.hx",99,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_109_update,"objects.VideoSprite","update",0xcd5f3951,"objects.VideoSprite.update","objects/VideoSprite.hx",109,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_135_set_canSkip,"objects.VideoSprite","set_canSkip",0xbd63cd8a,"objects.VideoSprite.set_canSkip","objects/VideoSprite.hx",135,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_159_updateSkipAlpha,"objects.VideoSprite","updateSkipAlpha",0x526688ce,"objects.VideoSprite.updateSkipAlpha","objects/VideoSprite.hx",159,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_166_play,"objects.VideoSprite","play",0xb6e6ff3c,"objects.VideoSprite.play","objects/VideoSprite.hx",166,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_167_resume,"objects.VideoSprite","resume",0x4ede1cf5,"objects.VideoSprite.resume","objects/VideoSprite.hx",167,0x2e186a19)
HX_LOCAL_STACK_FRAME(_hx_pos_935a2b3141f963dd_168_pause,"objects.VideoSprite","pause",0x4c0224ae,"objects.VideoSprite.pause","objects/VideoSprite.hx",168,0x2e186a19)
namespace objects{

void VideoSprite_obj::__construct(::String videoName,bool isWaiting,::hx::Null< bool >  __o_canSkip, ::Dynamic __o_shouldLoop){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::VideoSprite,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_935a2b3141f963dd_52_new)
HXLINE(  61)			_gthis->videoSprite->setGraphicSize(::flixel::FlxG_obj::width,null());
HXLINE(  62)			_gthis->videoSprite->updateHitbox();
HXLINE(  63)			{
HXLINE(  63)				 ::hxvlc::flixel::FlxVideoSprite _this = _gthis->videoSprite;
HXDLIN(  63)				int axes = 17;
HXDLIN(  63)				bool _hx_tmp;
HXDLIN(  63)				if ((axes != 1)) {
HXLINE(  63)					_hx_tmp = (axes == 17);
            				}
            				else {
HXLINE(  63)					_hx_tmp = true;
            				}
HXDLIN(  63)				if (_hx_tmp) {
HXLINE(  63)					int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  63)					_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  63)				bool _hx_tmp2;
HXDLIN(  63)				if ((axes != 16)) {
HXLINE(  63)					_hx_tmp2 = (axes == 17);
            				}
            				else {
HXLINE(  63)					_hx_tmp2 = true;
            				}
HXDLIN(  63)				if (_hx_tmp2) {
HXLINE(  63)					int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  63)					_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		bool canSkip = __o_canSkip.Default(false);
            		 ::Dynamic shouldLoop = __o_shouldLoop;
            		if (::hx::IsNull(__o_shouldLoop)) shouldLoop = false;
            	HX_GC_STACKFRAME(&_hx_pos_935a2b3141f963dd_9_new)
HXLINE(  70)		this->alreadyDestroyed = false;
HXLINE(  23)		this->waiting = false;
HXLINE(  19)		this->canSkip = false;
HXLINE(  15)		this->holdingTime = ((Float)0);
HXLINE(  14)		this->_timeToSkip = ((Float)1);
HXLINE(  12)		this->onSkip = null();
HXLINE(  11)		this->finishCallback = null();
HXLINE(  25)		 ::objects::VideoSprite _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  26)		super::__construct(null(),null(),null());
HXLINE(  28)		this->videoName = videoName;
HXLINE(  29)		{
HXLINE(  29)			 ::flixel::math::FlxBasePoint this1 = this->scrollFactor;
HXDLIN(  29)			this1->set_x(( (Float)(0) ));
HXDLIN(  29)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  30)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
HXLINE(  32)		this->waiting = isWaiting;
HXLINE(  33)		if (!(this->waiting)) {
HXLINE(  35)			this->cover =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  36)			{
HXLINE(  36)				 ::flixel::math::FlxBasePoint this2 = this->cover->scale;
HXDLIN(  36)				Float y = ( (Float)((::flixel::FlxG_obj::height + 100)) );
HXDLIN(  36)				this2->set_x(( (Float)((::flixel::FlxG_obj::width + 100)) ));
HXDLIN(  36)				this2->set_y(y);
            			}
HXLINE(  37)			{
HXLINE(  37)				 ::flixel::FlxSprite _this = this->cover;
HXDLIN(  37)				int axes = 17;
HXDLIN(  37)				bool _hx_tmp;
HXDLIN(  37)				if ((axes != 1)) {
HXLINE(  37)					_hx_tmp = (axes == 17);
            				}
            				else {
HXLINE(  37)					_hx_tmp = true;
            				}
HXDLIN(  37)				if (_hx_tmp) {
HXLINE(  37)					int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  37)					_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  37)				bool _hx_tmp2;
HXDLIN(  37)				if ((axes != 16)) {
HXLINE(  37)					_hx_tmp2 = (axes == 17);
            				}
            				else {
HXLINE(  37)					_hx_tmp2 = true;
            				}
HXDLIN(  37)				if (_hx_tmp2) {
HXLINE(  37)					int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  37)					_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  38)			{
HXLINE(  38)				 ::flixel::math::FlxBasePoint this3 = this->cover->scrollFactor;
HXDLIN(  38)				this3->set_x(( (Float)(0) ));
HXDLIN(  38)				this3->set_y(( (Float)(0) ));
            			}
HXLINE(  39)			this->add(this->cover);
            		}
HXLINE(  43)		this->videoSprite =  ::hxvlc::flixel::FlxVideoSprite_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  44)		this->videoSprite->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  45)		this->add(this->videoSprite);
HXLINE(  46)		if (canSkip) {
HXLINE(  46)			this->set_canSkip(true);
            		}
HXLINE(  49)		if (!(( (bool)(shouldLoop) ))) {
HXLINE(  49)			this->videoSprite->bitmap->onEndReached->add(this->finishVideo_dyn(),null(),null());
            		}
HXLINE(  51)		this->videoSprite->bitmap->onFormatSetup->add( ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE(  67)		::Array< ::String > _hx_tmp4;
HXDLIN(  67)		if (( (bool)(shouldLoop) )) {
HXLINE(  67)			_hx_tmp4 = ::Array_obj< ::String >::fromData( _hx_array_data_24091426_2,1);
            		}
            		else {
HXLINE(  67)			_hx_tmp4 = null();
            		}
HXDLIN(  67)		this->videoSprite->load(videoName,_hx_tmp4);
            	}

Dynamic VideoSprite_obj::__CreateEmpty() { return new VideoSprite_obj; }

void *VideoSprite_obj::_hx_vtable = 0;

Dynamic VideoSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VideoSprite_obj > _hx_result = new VideoSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool VideoSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x27b6056c) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x27b6056c;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void VideoSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_72_destroy)
HXLINE(  73)		if (this->alreadyDestroyed) {
HXLINE(  74)			return;
            		}
HXLINE(  76)		::haxe::Log_obj::trace(HX_("Video destroyed",d4,d7,3c,f3),::hx::SourceInfo(HX_("source/objects/VideoSprite.hx",0d,50,83,dd),76,HX_("objects.VideoSprite",26,14,09,24),HX_("destroy",fa,2c,86,24)));
HXLINE(  77)		if (::hx::IsNotNull( this->cover )) {
HXLINE(  79)			this->remove(this->cover,null());
HXLINE(  80)			this->cover->destroy();
            		}
HXLINE(  83)		this->finishCallback = null();
HXLINE(  84)		this->onSkip = null();
HXLINE(  86)		if (::hx::IsNotNull( ::flixel::FlxG_obj::game->_state )) {
HXLINE(  88)			if (::flixel::FlxG_obj::game->_state->members->contains(::hx::ObjectPtr<OBJ_>(this))) {
HXLINE(  89)				::flixel::FlxG_obj::game->_state->remove(::hx::ObjectPtr<OBJ_>(this),null()).StaticCast<  ::flixel::FlxBasic >();
            			}
HXLINE(  91)			bool _hx_tmp;
HXDLIN(  91)			if (::hx::IsNotNull( ::flixel::FlxG_obj::game->_state->subState )) {
HXLINE(  91)				_hx_tmp = ::flixel::FlxG_obj::game->_state->subState->members->contains(::hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE(  91)				_hx_tmp = false;
            			}
HXDLIN(  91)			if (_hx_tmp) {
HXLINE(  92)				::flixel::FlxG_obj::game->_state->subState->remove(::hx::ObjectPtr<OBJ_>(this),null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
HXLINE(  94)		this->super::destroy();
HXLINE(  95)		this->alreadyDestroyed = true;
            	}


void VideoSprite_obj::finishVideo(){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_99_finishVideo)
HXDLIN(  99)		if (!(this->alreadyDestroyed)) {
HXLINE( 101)			if (::hx::IsNotNull( this->finishCallback )) {
HXLINE( 102)				this->finishCallback();
            			}
HXLINE( 104)			this->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoSprite_obj,finishVideo,(void))

void VideoSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_109_update)
HXLINE( 110)		if (this->canSkip) {
HXLINE( 112)			if (::backend::Controls_obj::instance->pressed(HX_("accept",08,93,06,0b))) {
HXLINE( 114)				this->holdingTime = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(this->_timeToSkip,(this->holdingTime + elapsed)));
            			}
            			else {
HXLINE( 116)				if ((this->holdingTime > 0)) {
HXLINE( 118)					Float a = this->holdingTime;
HXDLIN( 118)					Float Value = (elapsed * ( (Float)(3) ));
HXDLIN( 118)					Float lowerBound;
HXDLIN( 118)					if ((Value < 0)) {
HXLINE( 118)						lowerBound = ( (Float)(0) );
            					}
            					else {
HXLINE( 118)						lowerBound = Value;
            					}
HXDLIN( 118)					Float _hx_tmp;
HXDLIN( 118)					if ((lowerBound > 1)) {
HXLINE( 118)						_hx_tmp = ( (Float)(1) );
            					}
            					else {
HXLINE( 118)						_hx_tmp = lowerBound;
            					}
HXDLIN( 118)					this->holdingTime = ::Math_obj::max(( (Float)(0) ),(a + (_hx_tmp * (((Float)-0.1) - a))));
            				}
            			}
HXLINE( 120)			this->updateSkipAlpha();
HXLINE( 122)			if ((this->holdingTime >= this->_timeToSkip)) {
HXLINE( 124)				if (::hx::IsNotNull( this->onSkip )) {
HXLINE( 124)					this->onSkip();
            				}
HXLINE( 125)				this->finishCallback = null();
HXLINE( 126)				this->videoSprite->bitmap->onEndReached->dispatch();
HXLINE( 127)				::haxe::Log_obj::trace(HX_("Skipped video",eb,eb,88,2f),::hx::SourceInfo(HX_("source/objects/VideoSprite.hx",0d,50,83,dd),127,HX_("objects.VideoSprite",26,14,09,24),HX_("update",09,86,05,87)));
HXLINE( 128)				return;
            			}
            		}
HXLINE( 131)		this->super::update(elapsed);
            	}


bool VideoSprite_obj::set_canSkip(bool newValue){
            	HX_GC_STACKFRAME(&_hx_pos_935a2b3141f963dd_135_set_canSkip)
HXLINE( 136)		this->canSkip = newValue;
HXLINE( 137)		if (this->canSkip) {
HXLINE( 139)			if (::hx::IsNull( this->skipSprite )) {
HXLINE( 141)				this->skipSprite =  ::flixel::addons::display::FlxPieDial_obj::__alloc( HX_CTX ,0,0,40,-1,40,null(),true,24);
HXLINE( 142)				this->skipSprite->replaceColor(-16777216,0,null());
HXLINE( 143)				 ::flixel::addons::display::FlxPieDial _hx_tmp = this->skipSprite;
HXDLIN( 143)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 143)				_hx_tmp->set_x((( (Float)(_hx_tmp1) ) - (this->skipSprite->get_width() + 80)));
HXLINE( 144)				 ::flixel::addons::display::FlxPieDial _hx_tmp2 = this->skipSprite;
HXDLIN( 144)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 144)				_hx_tmp2->set_y((( (Float)(_hx_tmp3) ) - (this->skipSprite->get_height() + 72)));
HXLINE( 145)				this->skipSprite->set_amount(( (Float)(0) ));
HXLINE( 146)				this->add(this->skipSprite);
            			}
            		}
            		else {
HXLINE( 149)			if (::hx::IsNotNull( this->skipSprite )) {
HXLINE( 151)				this->remove(this->skipSprite,null());
HXLINE( 152)				this->skipSprite->destroy();
HXLINE( 153)				this->skipSprite = null();
            			}
            		}
HXLINE( 155)		return this->canSkip;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VideoSprite_obj,set_canSkip,return )

void VideoSprite_obj::updateSkipAlpha(){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_159_updateSkipAlpha)
HXLINE( 160)		if (::hx::IsNull( this->skipSprite )) {
HXLINE( 160)			return;
            		}
HXLINE( 162)		this->skipSprite->set_amount(::Math_obj::min(( (Float)(1) ),::Math_obj::max(( (Float)(0) ),((this->holdingTime / this->_timeToSkip) * ((Float)1.025)))));
HXLINE( 163)		 ::flixel::addons::display::FlxPieDial _hx_tmp = this->skipSprite;
HXDLIN( 163)		_hx_tmp->set_alpha(::flixel::math::FlxMath_obj::remapToRange(this->skipSprite->amount,((Float)0.025),( (Float)(1) ),( (Float)(0) ),( (Float)(1) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoSprite_obj,updateSkipAlpha,(void))

void VideoSprite_obj::play(){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_166_play)
HXDLIN( 166)		 ::hxvlc::flixel::FlxVideoSprite tmp = this->videoSprite;
HXDLIN( 166)		if (::hx::IsNotNull( tmp )) {
HXDLIN( 166)			tmp->bitmap->play();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoSprite_obj,play,(void))

void VideoSprite_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_167_resume)
HXDLIN( 167)		 ::hxvlc::flixel::FlxVideoSprite tmp = this->videoSprite;
HXDLIN( 167)		if (::hx::IsNotNull( tmp )) {
HXDLIN( 167)			tmp->bitmap->resume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoSprite_obj,resume,(void))

void VideoSprite_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_168_pause)
HXDLIN( 168)		 ::hxvlc::flixel::FlxVideoSprite tmp = this->videoSprite;
HXDLIN( 168)		if (::hx::IsNotNull( tmp )) {
HXDLIN( 168)			tmp->bitmap->pause();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VideoSprite_obj,pause,(void))


::hx::ObjectPtr< VideoSprite_obj > VideoSprite_obj::__new(::String videoName,bool isWaiting,::hx::Null< bool >  __o_canSkip, ::Dynamic __o_shouldLoop) {
	::hx::ObjectPtr< VideoSprite_obj > __this = new VideoSprite_obj();
	__this->__construct(videoName,isWaiting,__o_canSkip,__o_shouldLoop);
	return __this;
}

::hx::ObjectPtr< VideoSprite_obj > VideoSprite_obj::__alloc(::hx::Ctx *_hx_ctx,::String videoName,bool isWaiting,::hx::Null< bool >  __o_canSkip, ::Dynamic __o_shouldLoop) {
	VideoSprite_obj *__this = (VideoSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VideoSprite_obj), true, "objects.VideoSprite"));
	*(void **)__this = VideoSprite_obj::_hx_vtable;
	__this->__construct(videoName,isWaiting,__o_canSkip,__o_shouldLoop);
	return __this;
}

VideoSprite_obj::VideoSprite_obj()
{
}

void VideoSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VideoSprite);
	HX_MARK_MEMBER_NAME(finishCallback,"finishCallback");
	HX_MARK_MEMBER_NAME(onSkip,"onSkip");
	HX_MARK_MEMBER_NAME(_timeToSkip,"_timeToSkip");
	HX_MARK_MEMBER_NAME(holdingTime,"holdingTime");
	HX_MARK_MEMBER_NAME(videoSprite,"videoSprite");
	HX_MARK_MEMBER_NAME(skipSprite,"skipSprite");
	HX_MARK_MEMBER_NAME(cover,"cover");
	HX_MARK_MEMBER_NAME(canSkip,"canSkip");
	HX_MARK_MEMBER_NAME(videoName,"videoName");
	HX_MARK_MEMBER_NAME(waiting,"waiting");
	HX_MARK_MEMBER_NAME(alreadyDestroyed,"alreadyDestroyed");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VideoSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(finishCallback,"finishCallback");
	HX_VISIT_MEMBER_NAME(onSkip,"onSkip");
	HX_VISIT_MEMBER_NAME(_timeToSkip,"_timeToSkip");
	HX_VISIT_MEMBER_NAME(holdingTime,"holdingTime");
	HX_VISIT_MEMBER_NAME(videoSprite,"videoSprite");
	HX_VISIT_MEMBER_NAME(skipSprite,"skipSprite");
	HX_VISIT_MEMBER_NAME(cover,"cover");
	HX_VISIT_MEMBER_NAME(canSkip,"canSkip");
	HX_VISIT_MEMBER_NAME(videoName,"videoName");
	HX_VISIT_MEMBER_NAME(waiting,"waiting");
	HX_VISIT_MEMBER_NAME(alreadyDestroyed,"alreadyDestroyed");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VideoSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cover") ) { return ::hx::Val( cover ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onSkip") ) { return ::hx::Val( onSkip ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return ::hx::Val( resume_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canSkip") ) { return ::hx::Val( canSkip ); }
		if (HX_FIELD_EQ(inName,"waiting") ) { return ::hx::Val( waiting ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"videoName") ) { return ::hx::Val( videoName ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skipSprite") ) { return ::hx::Val( skipSprite ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_timeToSkip") ) { return ::hx::Val( _timeToSkip ); }
		if (HX_FIELD_EQ(inName,"holdingTime") ) { return ::hx::Val( holdingTime ); }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { return ::hx::Val( videoSprite ); }
		if (HX_FIELD_EQ(inName,"finishVideo") ) { return ::hx::Val( finishVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_canSkip") ) { return ::hx::Val( set_canSkip_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { return ::hx::Val( finishCallback ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateSkipAlpha") ) { return ::hx::Val( updateSkipAlpha_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"alreadyDestroyed") ) { return ::hx::Val( alreadyDestroyed ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VideoSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cover") ) { cover=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onSkip") ) { onSkip=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canSkip") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_canSkip(inValue.Cast< bool >()) );canSkip=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waiting") ) { waiting=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"videoName") ) { videoName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skipSprite") ) { skipSprite=inValue.Cast<  ::flixel::addons::display::FlxPieDial >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_timeToSkip") ) { _timeToSkip=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdingTime") ) { holdingTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { videoSprite=inValue.Cast<  ::hxvlc::flixel::FlxVideoSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { finishCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"alreadyDestroyed") ) { alreadyDestroyed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VideoSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_timeToSkip",a6,96,61,f2));
	outFields->push(HX_("holdingTime",b0,8a,dd,9f));
	outFields->push(HX_("videoSprite",e0,72,3d,3c));
	outFields->push(HX_("skipSprite",e4,cf,99,2b));
	outFields->push(HX_("cover",37,ff,63,4a));
	outFields->push(HX_("canSkip",af,fe,ac,6a));
	outFields->push(HX_("videoName",66,0c,b8,6e));
	outFields->push(HX_("waiting",8d,e9,27,df));
	outFields->push(HX_("alreadyDestroyed",21,cd,1e,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VideoSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VideoSprite_obj,finishCallback),HX_("finishCallback",38,a1,bc,b4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VideoSprite_obj,onSkip),HX_("onSkip",3e,1f,df,ee)},
	{::hx::fsFloat,(int)offsetof(VideoSprite_obj,_timeToSkip),HX_("_timeToSkip",a6,96,61,f2)},
	{::hx::fsFloat,(int)offsetof(VideoSprite_obj,holdingTime),HX_("holdingTime",b0,8a,dd,9f)},
	{::hx::fsObject /*  ::hxvlc::flixel::FlxVideoSprite */ ,(int)offsetof(VideoSprite_obj,videoSprite),HX_("videoSprite",e0,72,3d,3c)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxPieDial */ ,(int)offsetof(VideoSprite_obj,skipSprite),HX_("skipSprite",e4,cf,99,2b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(VideoSprite_obj,cover),HX_("cover",37,ff,63,4a)},
	{::hx::fsBool,(int)offsetof(VideoSprite_obj,canSkip),HX_("canSkip",af,fe,ac,6a)},
	{::hx::fsString,(int)offsetof(VideoSprite_obj,videoName),HX_("videoName",66,0c,b8,6e)},
	{::hx::fsBool,(int)offsetof(VideoSprite_obj,waiting),HX_("waiting",8d,e9,27,df)},
	{::hx::fsBool,(int)offsetof(VideoSprite_obj,alreadyDestroyed),HX_("alreadyDestroyed",21,cd,1e,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VideoSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String VideoSprite_obj_sMemberFields[] = {
	HX_("finishCallback",38,a1,bc,b4),
	HX_("onSkip",3e,1f,df,ee),
	HX_("_timeToSkip",a6,96,61,f2),
	HX_("holdingTime",b0,8a,dd,9f),
	HX_("videoSprite",e0,72,3d,3c),
	HX_("skipSprite",e4,cf,99,2b),
	HX_("cover",37,ff,63,4a),
	HX_("canSkip",af,fe,ac,6a),
	HX_("videoName",66,0c,b8,6e),
	HX_("waiting",8d,e9,27,df),
	HX_("alreadyDestroyed",21,cd,1e,43),
	HX_("destroy",fa,2c,86,24),
	HX_("finishVideo",28,37,01,5e),
	HX_("update",09,86,05,87),
	HX_("set_canSkip",d2,65,14,fb),
	HX_("updateSkipAlpha",16,e5,1c,85),
	HX_("play",f4,2d,5a,4a),
	HX_("resume",ad,69,84,08),
	HX_("pause",f6,d6,57,bd),
	::String(null()) };

::hx::Class VideoSprite_obj::__mClass;

void VideoSprite_obj::__register()
{
	VideoSprite_obj _hx_dummy;
	VideoSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.VideoSprite",26,14,09,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VideoSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VideoSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VideoSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VideoSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
