// Generated by Haxe 4.3.7
#ifndef INCLUDED_grig_audio_FFT
#define INCLUDED_grig_audio_FFT

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(grig,audio,FFT)

namespace grig{
namespace audio{


class HXCPP_CLASS_ATTRIBUTES FFT_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FFT_obj OBJ_;
		FFT_obj();

	public:
		enum { _hx_ClassId = 0x7d4febc7 };

		void __construct(::hx::Null< int >  __o_n);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="grig.audio.FFT")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"grig.audio.FFT"); }
		static ::hx::ObjectPtr< FFT_obj > __new(::hx::Null< int >  __o_n);
		static ::hx::ObjectPtr< FFT_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_n);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FFT_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FFT",14,5b,35,00); }

		static void __boot();
		static int clamp_Int(int value,int lower,int upper);
		static ::Dynamic clamp_Int_dyn();

		static Float TWO_PI;
		static Float log(Float base,Float x);
		static ::Dynamic log_dyn();

		::Array< Float > hamming;
		::Array< int > reversed;
		::Array< ::Dynamic> roots;
		int n;
		int logN;
		int bitReverse(int x);
		::Dynamic bitReverse_dyn();

		void generateTables();
		::Dynamic generateTables_dyn();

		void doFFT(::Array< ::Dynamic> a);
		::Dynamic doFFT_dyn();

		::Array< Float > calcFreq(::Array< Float > data);
		::Dynamic calcFreq_dyn();

};

} // end namespace grig
} // end namespace audio

#endif /* INCLUDED_grig_audio_FFT */ 
