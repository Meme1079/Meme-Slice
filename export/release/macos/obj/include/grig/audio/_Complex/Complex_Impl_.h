// Generated by Haxe 4.3.7
#ifndef INCLUDED_grig_audio__Complex_Complex_Impl_
#define INCLUDED_grig_audio__Complex_Complex_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(grig,audio,_hx__Complex,Complex_Impl_)

namespace grig{
namespace audio{
namespace _hx__Complex{


class HXCPP_CLASS_ATTRIBUTES Complex_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Complex_Impl__obj OBJ_;
		Complex_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1b651572 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="grig.audio._Complex.Complex_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"grig.audio._Complex.Complex_Impl_"); }

		inline static ::hx::ObjectPtr< Complex_Impl__obj > __new() {
			::hx::ObjectPtr< Complex_Impl__obj > __this = new Complex_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Complex_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Complex_Impl__obj *__this = (Complex_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Complex_Impl__obj), false, "grig.audio._Complex.Complex_Impl_"));
			*(void **)__this = Complex_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Complex_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Complex_Impl_",b0,b6,01,1c); }

		static Float get_real( ::Dynamic this1);
		static ::Dynamic get_real_dyn();

		static Float set_real( ::Dynamic this1,Float n);
		static ::Dynamic set_real_dyn();

		static Float get_imag( ::Dynamic this1);
		static ::Dynamic get_imag_dyn();

		static Float set_imag( ::Dynamic this1,Float n);
		static ::Dynamic set_imag_dyn();

		static  ::Dynamic _new(Float real,Float imag);
		static ::Dynamic _new_dyn();

		static ::String toString( ::Dynamic this1);
		static ::Dynamic toString_dyn();

		static  ::Dynamic sum( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic sum_dyn();

		static  ::Dynamic sumWithFloat( ::Dynamic this1,Float x);
		static ::Dynamic sumWithFloat_dyn();

		static  ::Dynamic subWithFloat( ::Dynamic this1,Float x);
		static ::Dynamic subWithFloat_dyn();

		static  ::Dynamic sub( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic sub_dyn();

		static  ::Dynamic mul( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic mul_dyn();

		static  ::Dynamic mulWithFloat( ::Dynamic this1,Float x);
		static ::Dynamic mulWithFloat_dyn();

		static  ::Dynamic div( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic div_dyn();

		static  ::Dynamic divWithFloat( ::Dynamic this1,Float x);
		static ::Dynamic divWithFloat_dyn();

		static  ::Dynamic sumAsn( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic sumAsn_dyn();

		static  ::Dynamic sumWithFloatAsm( ::Dynamic this1,Float x);
		static ::Dynamic sumWithFloatAsm_dyn();

		static  ::Dynamic subAsn( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic subAsn_dyn();

		static  ::Dynamic subWithFloatAsn( ::Dynamic this1,Float x);
		static ::Dynamic subWithFloatAsn_dyn();

		static  ::Dynamic mulAsn( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic mulAsn_dyn();

		static  ::Dynamic mulWithFloatAsn( ::Dynamic this1,Float x);
		static ::Dynamic mulWithFloatAsn_dyn();

		static  ::Dynamic divAsn( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic divAsn_dyn();

		static  ::Dynamic divWithFloatAsn( ::Dynamic this1,Float x);
		static ::Dynamic divWithFloatAsn_dyn();

		static bool equals( ::Dynamic this1, ::Dynamic z);
		static ::Dynamic equals_dyn();

		static  ::Dynamic fromPolar(Float norm,Float phi);
		static ::Dynamic fromPolar_dyn();

		static Float abs( ::Dynamic z);
		static ::Dynamic abs_dyn();

		static Float norm( ::Dynamic z);
		static ::Dynamic norm_dyn();

		static Float arg( ::Dynamic z);
		static ::Dynamic arg_dyn();

		static  ::Dynamic sqrt( ::Dynamic z);
		static ::Dynamic sqrt_dyn();

		static  ::Dynamic exp( ::Dynamic z);
		static ::Dynamic exp_dyn();

		static  ::Dynamic conj( ::Dynamic z);
		static ::Dynamic conj_dyn();

		static  ::Dynamic pow( ::Dynamic base,Float exponent);
		static ::Dynamic pow_dyn();

		static  ::Dynamic log( ::Dynamic z);
		static ::Dynamic log_dyn();

};

} // end namespace grig
} // end namespace audio
} // end namespace _Complex

#endif /* INCLUDED_grig_audio__Complex_Complex_Impl_ */ 
