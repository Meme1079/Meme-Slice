// Generated by Haxe 4.3.7
#ifndef INCLUDED_grig_audio_FFTVisualization
#define INCLUDED_grig_audio_FFTVisualization

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(grig,audio,FFTVisualization)

namespace grig{
namespace audio{


class HXCPP_CLASS_ATTRIBUTES FFTVisualization_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FFTVisualization_obj OBJ_;
		FFTVisualization_obj();

	public:
		enum { _hx_ClassId = 0x7f716b95 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="grig.audio.FFTVisualization")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"grig.audio.FFTVisualization"); }
		static ::hx::ObjectPtr< FFTVisualization_obj > __new();
		static ::hx::ObjectPtr< FFTVisualization_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FFTVisualization_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FFTVisualization",b0,1a,6d,4c); }

		static ::Array< Float > computeLogXScale(int bands);
		static ::Dynamic computeLogXScale_dyn();

		static Float computeFreqBand(::Array< Float > freq,::Array< Float > xscale,int band,int bands);
		static ::Dynamic computeFreqBand_dyn();

		::Array< Float > xscale;
		::Array< int > makeLogGraph(::Array< Float > freq,int bands,int dbRange,int intRange);
		::Dynamic makeLogGraph_dyn();

};

} // end namespace grig
} // end namespace audio

#endif /* INCLUDED_grig_audio_FFTVisualization */ 
