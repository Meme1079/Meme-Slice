// Generated by Haxe 4.3.7
#ifndef INCLUDED_grig_audio_lime_UInt8ArrayTools
#define INCLUDED_grig_audio_lime_UInt8ArrayTools

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(grig,audio,lime,UInt8ArrayTools)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace grig{
namespace audio{
namespace lime{


class HXCPP_CLASS_ATTRIBUTES UInt8ArrayTools_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef UInt8ArrayTools_obj OBJ_;
		UInt8ArrayTools_obj();

	public:
		enum { _hx_ClassId = 0x049fa87e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="grig.audio.lime.UInt8ArrayTools")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"grig.audio.lime.UInt8ArrayTools"); }

		inline static ::hx::ObjectPtr< UInt8ArrayTools_obj > __new() {
			::hx::ObjectPtr< UInt8ArrayTools_obj > __this = new UInt8ArrayTools_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< UInt8ArrayTools_obj > __alloc(::hx::Ctx *_hx_ctx) {
			UInt8ArrayTools_obj *__this = (UInt8ArrayTools_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UInt8ArrayTools_obj), false, "grig.audio.lime.UInt8ArrayTools"));
			*(void **)__this = UInt8ArrayTools_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UInt8ArrayTools_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UInt8ArrayTools",c0,8e,20,f4); }

		static int getInt16( ::lime::utils::ArrayBufferView data,int pos);
		static ::Dynamic getInt16_dyn();

		static int getInt24( ::lime::utils::ArrayBufferView data,int pos);
		static ::Dynamic getInt24_dyn();

		static int getInt32( ::lime::utils::ArrayBufferView data,int pos);
		static ::Dynamic getInt32_dyn();

		static ::Array< Float > toInterleaved( ::lime::utils::ArrayBufferView data,int bitsPerSample);
		static ::Dynamic toInterleaved_dyn();

};

} // end namespace grig
} // end namespace audio
} // end namespace lime

#endif /* INCLUDED_grig_audio_lime_UInt8ArrayTools */ 
