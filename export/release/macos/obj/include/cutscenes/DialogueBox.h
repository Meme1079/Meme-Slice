// Generated by Haxe 4.3.7
#ifndef INCLUDED_cutscenes_DialogueBox
#define INCLUDED_cutscenes_DialogueBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(cutscenes,Conversation)
HX_DECLARE_CLASS1(cutscenes,DialogueBox)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace cutscenes{


class HXCPP_CLASS_ATTRIBUTES DialogueBox_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef DialogueBox_obj OBJ_;
		DialogueBox_obj();

	public:
		enum { _hx_ClassId = 0x24d2556a };

		void __construct( ::Dynamic conversation, ::Dynamic speaker);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="cutscenes.DialogueBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"cutscenes.DialogueBox"); }
		static ::hx::ObjectPtr< DialogueBox_obj > __new( ::Dynamic conversation, ::Dynamic speaker);
		static ::hx::ObjectPtr< DialogueBox_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic conversation, ::Dynamic speaker);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DialogueBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DialogueBox",b3,1f,c8,ff); }

		 ::cutscenes::Conversation dialogueConversation;
		 ::Dynamic onFinish;
		Dynamic onFinish_dyn() { return onFinish;}
		 ::Dynamic onNextDialogue;
		Dynamic onNextDialogue_dyn() { return onNextDialogue;}
		 ::Dynamic onSkipDialogue;
		Dynamic onSkipDialogue_dyn() { return onSkipDialogue;}
		void update(Float elapsed);

};

} // end namespace cutscenes

#endif /* INCLUDED_cutscenes_DialogueBox */ 
