// Generated by Haxe 4.3.7
#ifndef INCLUDED_shaders_RuntimePostEffectShader
#define INCLUDED_shaders_RuntimePostEffectShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS3(flixel,addons,display,FlxRuntimeShader)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFrame)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Float)
HX_DECLARE_CLASS1(shaders,RuntimePostEffectShader)

namespace shaders{


class HXCPP_CLASS_ATTRIBUTES RuntimePostEffectShader_obj : public  ::flixel::addons::display::FlxRuntimeShader_obj
{
	public:
		typedef  ::flixel::addons::display::FlxRuntimeShader_obj super;
		typedef RuntimePostEffectShader_obj OBJ_;
		RuntimePostEffectShader_obj();

	public:
		enum { _hx_ClassId = 0x1361bfe4 };

		void __construct(::String fragmentSource,::String vertexSource);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="shaders.RuntimePostEffectShader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"shaders.RuntimePostEffectShader"); }
		static ::hx::ObjectPtr< RuntimePostEffectShader_obj > __new(::String fragmentSource,::String vertexSource);
		static ::hx::ObjectPtr< RuntimePostEffectShader_obj > __alloc(::hx::Ctx *_hx_ctx,::String fragmentSource,::String vertexSource);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RuntimePostEffectShader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RuntimePostEffectShader",ee,d9,b7,ad); }

		void updateViewInfo(Float screenWidth,Float screenHeight, ::flixel::FlxCamera camera);
		::Dynamic updateViewInfo_dyn();

		void updateFrameInfo( ::flixel::graphics::frames::FlxFrame frame);
		::Dynamic updateFrameInfo_dyn();

		 ::lime::graphics::opengl::GLObject _hx___createGLProgram(::String vertexSource,::String fragmentSource);

		 ::openfl::display::ShaderParameter_Float uScreenResolution;
		 ::openfl::display::ShaderParameter_Float uCameraBounds;
		 ::openfl::display::ShaderParameter_Float uFrameBounds;
};

} // end namespace shaders

#endif /* INCLUDED_shaders_RuntimePostEffectShader */ 
