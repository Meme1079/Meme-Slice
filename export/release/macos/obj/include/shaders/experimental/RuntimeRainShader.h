// Generated by Haxe 4.3.7
#ifndef INCLUDED_shaders_experimental_RuntimeRainShader
#define INCLUDED_shaders_experimental_RuntimeRainShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_shaders_experimental_RuntimePostEffectShader
#include <shaders/experimental/RuntimePostEffectShader.h>
#endif
HX_DECLARE_CLASS3(flixel,addons,display,FlxRuntimeShader)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Float)
HX_DECLARE_CLASS2(shaders,experimental,RuntimePostEffectShader)
HX_DECLARE_CLASS2(shaders,experimental,RuntimeRainShader)

namespace shaders{
namespace experimental{


class HXCPP_CLASS_ATTRIBUTES RuntimeRainShader_obj : public  ::shaders::experimental::RuntimePostEffectShader_obj
{
	public:
		typedef  ::shaders::experimental::RuntimePostEffectShader_obj super;
		typedef RuntimeRainShader_obj OBJ_;
		RuntimeRainShader_obj();

	public:
		enum { _hx_ClassId = 0x05d7fa7f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="shaders.experimental.RuntimeRainShader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"shaders.experimental.RuntimeRainShader"); }
		static ::hx::ObjectPtr< RuntimeRainShader_obj > __new();
		static ::hx::ObjectPtr< RuntimeRainShader_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RuntimeRainShader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RuntimeRainShader",71,2a,ec,d2); }

		static void __boot();
		static int MAX_LIGHTS;
		::Array< ::Dynamic> lights;
		Float time;
		Float set_time(Float value);
		::Dynamic set_time_dyn();

		bool spriteMode;
		bool set_spriteMode(bool value);
		::Dynamic set_spriteMode_dyn();

		Float scale;
		Float set_scale(Float value);
		::Dynamic set_scale_dyn();

		Float intensity;
		Float set_intensity(Float value);
		::Dynamic set_intensity_dyn();

		Float puddleY;
		Float set_puddleY(Float value);
		::Dynamic set_puddleY_dyn();

		Float puddleScaleY;
		Float set_puddleScaleY(Float value);
		::Dynamic set_puddleScaleY_dyn();

		 ::openfl::display::BitmapData blurredScreen;
		 ::openfl::display::BitmapData set_blurredScreen( ::openfl::display::BitmapData value);
		::Dynamic set_blurredScreen_dyn();

		 ::openfl::display::BitmapData mask;
		 ::openfl::display::BitmapData set_mask( ::openfl::display::BitmapData value);
		::Dynamic set_mask_dyn();

		int rainColor;
		int set_rainColor(int color);
		::Dynamic set_rainColor_dyn();

		 ::openfl::display::BitmapData lightMap;
		 ::openfl::display::BitmapData set_lightMap( ::openfl::display::BitmapData value);
		::Dynamic set_lightMap_dyn();

		int numLightsSwag;
		int set_numLightsSwag(int value);
		::Dynamic set_numLightsSwag_dyn();

		void update(Float elapsed);
		::Dynamic update_dyn();

		void _hx___processGLData(::String source,::String storageType);

		 ::openfl::display::ShaderParameter_Float addFloatUniform(::String name,int length);
		::Dynamic addFloatUniform_dyn();

};

} // end namespace shaders
} // end namespace experimental

#endif /* INCLUDED_shaders_experimental_RuntimeRainShader */ 
