// Generated by Haxe 4.3.7
#ifndef INCLUDED_objects_NoteHoldCover
#define INCLUDED_objects_NoteHoldCover

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(objects,Note)
HX_DECLARE_CLASS1(objects,NoteHoldCover)
HX_DECLARE_CLASS1(objects,StrumNote)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES NoteHoldCover_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef NoteHoldCover_obj OBJ_;
		NoteHoldCover_obj();

	public:
		enum { _hx_ClassId = 0x6aa048b2 };

		void __construct( ::Dynamic x, ::Dynamic y,::String holdCover);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.NoteHoldCover")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.NoteHoldCover"); }
		static ::hx::ObjectPtr< NoteHoldCover_obj > __new( ::Dynamic x, ::Dynamic y,::String holdCover);
		static ::hx::ObjectPtr< NoteHoldCover_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic x, ::Dynamic y,::String holdCover);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NoteHoldCover_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NoteHoldCover",06,4b,e5,89); }

		static void __boot();
		static Float startCrochet;
		static ::String defaultNoteHoldCover;
		static ::Array< ::String > noteColors;
		static ::String getHoldCoverSkinPostfix();
		static ::Dynamic getHoldCoverSkinPostfix_dyn();

		 ::Dynamic rgbShader;
		::String texture;
		 ::objects::StrumNote strumNote;
		int noteData;
		bool copyX;
		bool copyY;
		bool inEditor;
		void loadNoteHold(::String holdcover);
		::Dynamic loadNoteHold_dyn();

		void spawnNoteHold( ::Dynamic x, ::Dynamic y, ::Dynamic noteData, ::objects::Note note, ::Dynamic strum, ::Dynamic playbackRate);
		::Dynamic spawnNoteHold_dyn();

		void update(Float elapsed);

};

} // end namespace objects

#endif /* INCLUDED_objects_NoteHoldCover */ 
