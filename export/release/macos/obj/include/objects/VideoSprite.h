// Generated by Haxe 4.3.7
#ifndef INCLUDED_objects_VideoSprite
#define INCLUDED_objects_VideoSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxPieDial)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(hxvlc,flixel,FlxVideoSprite)
HX_DECLARE_CLASS1(objects,VideoSprite)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES VideoSprite_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef VideoSprite_obj OBJ_;
		VideoSprite_obj();

	public:
		enum { _hx_ClassId = 0x27b6056c };

		void __construct(::String videoName,bool isWaiting,::hx::Null< bool >  __o_canSkip, ::Dynamic __o_shouldLoop);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.VideoSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.VideoSprite"); }
		static ::hx::ObjectPtr< VideoSprite_obj > __new(::String videoName,bool isWaiting,::hx::Null< bool >  __o_canSkip, ::Dynamic __o_shouldLoop);
		static ::hx::ObjectPtr< VideoSprite_obj > __alloc(::hx::Ctx *_hx_ctx,::String videoName,bool isWaiting,::hx::Null< bool >  __o_canSkip, ::Dynamic __o_shouldLoop);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VideoSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("VideoSprite",c0,0a,70,20); }

		 ::Dynamic finishCallback;
		Dynamic finishCallback_dyn() { return finishCallback;}
		 ::Dynamic onSkip;
		Dynamic onSkip_dyn() { return onSkip;}
		Float _timeToSkip;
		Float holdingTime;
		 ::hxvlc::flixel::FlxVideoSprite videoSprite;
		 ::flixel::addons::display::FlxPieDial skipSprite;
		 ::flixel::FlxSprite cover;
		bool canSkip;
		::String videoName;
		bool waiting;
		bool alreadyDestroyed;
		void destroy();

		void finishVideo();
		::Dynamic finishVideo_dyn();

		void update(Float elapsed);

		bool set_canSkip(bool newValue);
		::Dynamic set_canSkip_dyn();

		void updateSkipAlpha();
		::Dynamic updateSkipAlpha_dyn();

		void play();
		::Dynamic play_dyn();

		void resume();
		::Dynamic resume_dyn();

		void pause();
		::Dynamic pause_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_VideoSprite */ 
