// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_vis_dsp__Complex_Complex_Impl_
#define INCLUDED_funkin_vis_dsp__Complex_Complex_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(funkin,vis,dsp,_hx__Complex,Complex_Impl_)

namespace funkin{
namespace vis{
namespace dsp{
namespace _hx__Complex{


class HXCPP_CLASS_ATTRIBUTES Complex_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Complex_Impl__obj OBJ_;
		Complex_Impl__obj();

	public:
		enum { _hx_ClassId = 0x510d2049 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="funkin.vis.dsp._Complex.Complex_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"funkin.vis.dsp._Complex.Complex_Impl_"); }

		inline static ::hx::ObjectPtr< Complex_Impl__obj > __new() {
			::hx::ObjectPtr< Complex_Impl__obj > __this = new Complex_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Complex_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Complex_Impl__obj *__this = (Complex_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Complex_Impl__obj), false, "funkin.vis.dsp._Complex.Complex_Impl_"));
			*(void **)__this = Complex_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Complex_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Complex_Impl_",b0,b6,01,1c); }

		static void __boot();
		static  ::Dynamic _new(Float real,Float imag);
		static ::Dynamic _new_dyn();

		static  ::Dynamic fromReal(Float r);
		static ::Dynamic fromReal_dyn();

		static Float get_angle( ::Dynamic this1);
		static ::Dynamic get_angle_dyn();

		static Float get_magnitude( ::Dynamic this1);
		static ::Dynamic get_magnitude_dyn();

		static  ::Dynamic add( ::Dynamic this1, ::Dynamic rhs);
		static ::Dynamic add_dyn();

		static  ::Dynamic sub( ::Dynamic this1, ::Dynamic rhs);
		static ::Dynamic sub_dyn();

		static  ::Dynamic mult( ::Dynamic this1, ::Dynamic rhs);
		static ::Dynamic mult_dyn();

		static  ::Dynamic conj( ::Dynamic this1);
		static ::Dynamic conj_dyn();

		static  ::Dynamic scale( ::Dynamic this1,Float k);
		static ::Dynamic scale_dyn();

		static  ::Dynamic copy( ::Dynamic this1);
		static ::Dynamic copy_dyn();

		static  ::Dynamic im;
		static  ::Dynamic zero;
		static  ::Dynamic exp(Float w);
		static ::Dynamic exp_dyn();

};

} // end namespace funkin
} // end namespace vis
} // end namespace dsp
} // end namespace _Complex

#endif /* INCLUDED_funkin_vis_dsp__Complex_Complex_Impl_ */ 
