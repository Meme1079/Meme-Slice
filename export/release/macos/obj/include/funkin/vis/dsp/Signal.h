// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_vis_dsp_Signal
#define INCLUDED_funkin_vis_dsp_Signal

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(funkin,vis,dsp,Signal)

namespace funkin{
namespace vis{
namespace dsp{


class HXCPP_CLASS_ATTRIBUTES Signal_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Signal_obj OBJ_;
		Signal_obj();

	public:
		enum { _hx_ClassId = 0x0d0b6cfe };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="funkin.vis.dsp.Signal")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"funkin.vis.dsp.Signal"); }

		inline static ::hx::ObjectPtr< Signal_obj > __new() {
			::hx::ObjectPtr< Signal_obj > __this = new Signal_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Signal_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Signal_obj *__this = (Signal_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Signal_obj), false, "funkin.vis.dsp.Signal"));
			*(void **)__this = Signal_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Signal_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Signal",88,a2,1a,e9); }

		static ::Array< Float > smooth(::Array< Float > y,int n);
		static ::Dynamic smooth_dyn();

		static ::Array< int > findPeaks(::Array< Float > y, ::Dynamic threshold, ::Dynamic minHeight);
		static ::Dynamic findPeaks_dyn();

		static Float sum(::Array< Float > array);
		static ::Dynamic sum_dyn();

		static Float mean(::Array< Float > y);
		static ::Dynamic mean_dyn();

		static Float max(::Array< Float > y);
		static ::Dynamic max_dyn();

		static int maxi(::Array< Float > y);
		static ::Dynamic maxi_dyn();

		static Float min(::Array< Float > y);
		static ::Dynamic min_dyn();

		static int mini(::Array< Float > y);
		static ::Dynamic mini_dyn();

};

} // end namespace funkin
} // end namespace vis
} // end namespace dsp

#endif /* INCLUDED_funkin_vis_dsp_Signal */ 
