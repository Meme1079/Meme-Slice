// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_vis_dsp_FFT
#define INCLUDED_funkin_vis_dsp_FFT

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(funkin,vis,dsp,FFT)

namespace funkin{
namespace vis{
namespace dsp{


class HXCPP_CLASS_ATTRIBUTES FFT_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FFT_obj OBJ_;
		FFT_obj();

	public:
		enum { _hx_ClassId = 0x1f010ade };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="funkin.vis.dsp.FFT")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"funkin.vis.dsp.FFT"); }

		inline static ::hx::ObjectPtr< FFT_obj > __new() {
			::hx::ObjectPtr< FFT_obj > __this = new FFT_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FFT_obj > __alloc(::hx::Ctx *_hx_ctx) {
			FFT_obj *__this = (FFT_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FFT_obj), false, "funkin.vis.dsp.FFT"));
			*(void **)__this = FFT_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FFT_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FFT",14,5b,35,00); }

		static ::Array< ::Dynamic> fft(::Array< ::Dynamic> input);
		static ::Dynamic fft_dyn();

		static ::Array< ::Dynamic> rfft(::Array< Float > input);
		static ::Dynamic rfft_dyn();

		static ::Array< ::Dynamic> ifft(::Array< ::Dynamic> input);
		static ::Dynamic ifft_dyn();

		static ::Array< ::Dynamic> do_fft(::Array< ::Dynamic> input,bool inverse);
		static ::Dynamic do_fft_dyn();

		static void ditfft2(::Array< ::Dynamic> time,int t,::Array< ::Dynamic> freq,int f,int n,int step,bool inverse);
		static ::Dynamic ditfft2_dyn();

		static void ditfft4(::Array< ::Dynamic> time,int t,::Array< ::Dynamic> freq,int f,int n,int step,bool inverse);
		static ::Dynamic ditfft4_dyn();

		static ::Array< ::Dynamic> dft(::Array< ::Dynamic> ts, ::Dynamic inverse);
		static ::Dynamic dft_dyn();

		static ::Array< ::Dynamic> twiddleFactorsInversed;
		static ::Array< ::Dynamic> twiddleFactors;
		static void precomputeTwiddleFactors(int maxN,bool inverse);
		static ::Dynamic precomputeTwiddleFactors_dyn();

		static  ::Dynamic computeTwiddle(int index,int fft_len,::hx::Null< bool >  inverse);
		static ::Dynamic computeTwiddle_dyn();

		static  ::Dynamic useTwiddleFactor(int n,int k,::hx::Null< bool >  inverse);
		static ::Dynamic useTwiddleFactor_dyn();

		static int nextPow2(int x);
		static ::Dynamic nextPow2_dyn();

		static void main();
		static ::Dynamic main_dyn();

};

} // end namespace funkin
} // end namespace vis
} // end namespace dsp

#endif /* INCLUDED_funkin_vis_dsp_FFT */ 
