// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_vis__internal_html5_AnalyzerNode
#define INCLUDED_funkin_vis__internal_html5_AnalyzerNode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(funkin,vis,AudioClip)
HX_DECLARE_CLASS4(funkin,vis,_internal,html5,AnalyzerNode)

namespace funkin{
namespace vis{
namespace _internal{
namespace html5{


class HXCPP_CLASS_ATTRIBUTES AnalyzerNode_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AnalyzerNode_obj OBJ_;
		AnalyzerNode_obj();

	public:
		enum { _hx_ClassId = 0x1fa8da05 };

		void __construct(::Dynamic audioClip);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="funkin.vis._internal.html5.AnalyzerNode")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"funkin.vis._internal.html5.AnalyzerNode"); }
		static ::hx::ObjectPtr< AnalyzerNode_obj > __new(::Dynamic audioClip);
		static ::hx::ObjectPtr< AnalyzerNode_obj > __alloc(::hx::Ctx *_hx_ctx,::Dynamic audioClip);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AnalyzerNode_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AnalyzerNode",e8,f4,eb,fe); }

		::Array< Float > getFloatFrequencyData();
		::Dynamic getFloatFrequencyData_dyn();

};

} // end namespace funkin
} // end namespace vis
} // end namespace _internal
} // end namespace html5

#endif /* INCLUDED_funkin_vis__internal_html5_AnalyzerNode */ 
