// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_vis_audioclip_frontends_LimeAudioClip
#define INCLUDED_funkin_vis_audioclip_frontends_LimeAudioClip

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_funkin_vis_AudioClip
#include <funkin/vis/AudioClip.h>
#endif
HX_DECLARE_CLASS2(funkin,vis,AudioBuffer)
HX_DECLARE_CLASS2(funkin,vis,AudioClip)
HX_DECLARE_CLASS4(funkin,vis,audioclip,frontends,LimeAudioClip)
HX_DECLARE_CLASS2(lime,media,AudioSource)

namespace funkin{
namespace vis{
namespace audioclip{
namespace frontends{


class HXCPP_CLASS_ATTRIBUTES LimeAudioClip_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LimeAudioClip_obj OBJ_;
		LimeAudioClip_obj();

	public:
		enum { _hx_ClassId = 0x08ffdd07 };

		void __construct( ::lime::media::AudioSource audioSource);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="funkin.vis.audioclip.frontends.LimeAudioClip")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"funkin.vis.audioclip.frontends.LimeAudioClip"); }
		static ::hx::ObjectPtr< LimeAudioClip_obj > __new( ::lime::media::AudioSource audioSource);
		static ::hx::ObjectPtr< LimeAudioClip_obj > __alloc(::hx::Ctx *_hx_ctx, ::lime::media::AudioSource audioSource);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LimeAudioClip_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("LimeAudioClip",d1,44,09,6c); }

		 ::funkin::vis::AudioBuffer audioBuffer;
		 ::Dynamic source;
		int get_currentFrame();
		::Dynamic get_currentFrame_dyn();

};

} // end namespace funkin
} // end namespace vis
} // end namespace audioclip
} // end namespace frontends

#endif /* INCLUDED_funkin_vis_audioclip_frontends_LimeAudioClip */ 
