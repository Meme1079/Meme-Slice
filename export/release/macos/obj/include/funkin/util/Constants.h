// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_util_Constants
#define INCLUDED_funkin_util_Constants

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(funkin,util,Constants)

namespace funkin{
namespace util{


class HXCPP_CLASS_ATTRIBUTES Constants_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Constants_obj OBJ_;
		Constants_obj();

	public:
		enum { _hx_ClassId = 0x0836eb38 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="funkin.util.Constants")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"funkin.util.Constants"); }

		inline static ::hx::ObjectPtr< Constants_obj > __new() {
			::hx::ObjectPtr< Constants_obj > __this = new Constants_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Constants_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Constants_obj *__this = (Constants_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Constants_obj), false, "funkin.util.Constants"));
			*(void **)__this = Constants_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Constants_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Constants",6f,56,3e,e6); }

		static void __boot();
		static ::String TITLE;
		static ::String get_GENERATED_BY();
		static ::Dynamic get_GENERATED_BY_dyn();

		static ::String VERSION_SUFFIX;
		static ::String get_VERSION();
		static ::Dynamic get_VERSION_dyn();

		static bool DEBUG_BUILD;
		static ::String URL_MERCH_FALLBACK;
		static ::Array< ::String > SITE_LOCK;
		static ::String URL_ITCH;
		static ::String URL_NEWGROUNDS;
		static ::String URL_KICKSTARTER;
		static int COLOR_HEALTH_BAR_RED;
		static int COLOR_HEALTH_BAR_GREEN;
		static ::Array< int > COLOR_NOTES;
		static int COLOR_PRELOADER_BG;
		static int COLOR_PRELOADER_BAR;
		static int COLOR_PRELOADER_LOCK_BG;
		static int COLOR_PRELOADER_LOCK_FG;
		static int COLOR_PRELOADER_LOCK_FONT;
		static int COLOR_PRELOADER_LOCK_LINK;
		static ::String SITE_LOCK_TITLE;
		static ::String SITE_LOCK_DESC;
		static ::String DEFAULT_DIFFICULTY;
		static ::Array< ::String > DEFAULT_DIFFICULTY_LIST;
		static ::Array< ::String > DEFAULT_DIFFICULTY_LIST_ERECT;
		static ::Array< ::String > DEFAULT_DIFFICULTY_LIST_FULL;
		static ::String DEFAULT_CHARACTER;
		static ::String DEFAULT_HEALTH_ICON;
		static ::String DEFAULT_STAGE;
		static ::String DEFAULT_SONG;
		static ::String DEFAULT_VARIATION;
		static ::Array< ::String > DEFAULT_VARIATION_LIST;
		static ::String DEFAULT_STICKER_PACK;
		static Float DEFAULT_BOP_INTENSITY;
		static int DEFAULT_ZOOM_RATE;
		static Float DEFAULT_BPM;
		static ::String DEFAULT_SONGNAME;
		static ::String DEFAULT_ARTIST;
		static ::String DEFAULT_CHARTER;
		static ::String DEFAULT_NOTE_STYLE;
		static ::String DEFAULT_FREEPLAY_STYLE;
		static ::String DEFAULT_PIXEL_NOTE_STYLE;
		static ::String DEFAULT_ALBUM_ID;
		static Float DEFAULT_SCROLLSPEED;
		static int DEFAULT_TIME_SIGNATURE_NUM;
		static int DEFAULT_TIME_SIGNATURE_DEN;
		static ::String ANIMATION_HOLD_SUFFIX;
		static ::String ANIMATION_END_SUFFIX;
		static Float PIXELS_PER_MS;
		static Float HIT_WINDOW_MS;
		static int SECS_PER_MIN;
		static int MS_PER_SEC;
		static int US_PER_MS;
		static int US_PER_SEC;
		static int NS_PER_US;
		static int NS_PER_MS;
		static int NS_PER_SEC;
		static int NOTIFICATION_DISMISS_TIME;
		static Float AUTOSAVE_TIMER_DELAY_SEC;
		static int STEPS_PER_BEAT;
		static Float MP3_DELAY_MS;
		static Float PRELOADER_MIN_STAGE_TIME;
		static Float HEALTH_MAX;
		static Float HEALTH_STARTING;
		static Float HEALTH_MIN;
		static Float HEALTH_KILLER_BONUS;
		static Float HEALTH_SICK_BONUS;
		static Float HEALTH_GOOD_BONUS;
		static Float HEALTH_BAD_BONUS;
		static Float HEALTH_SHIT_BONUS;
		static Float HEALTH_HOLD_BONUS_PER_SECOND;
		static Float HEALTH_MISS_PENALTY;
		static Float HEALTH_GHOST_MISS_PENALTY;
		static Float HEALTH_HOLD_DROP_PENALTY_PER_SECOND;
		static Float HEALTH_HOLD_DROP_PENALTY_MAX;
		static Float HEALTH_MINE_PENALTY;
		static Float SCORE_HOLD_BONUS_PER_SECOND;
		static Float SCORE_HOLD_DROP_PENALTY_PER_SECOND;
		static Float HOLD_DROP_PENALTY_THRESHOLD_MS;
		static bool JUDGEMENT_KILLER_COMBO_BREAK;
		static bool JUDGEMENT_SICK_COMBO_BREAK;
		static bool JUDGEMENT_GOOD_COMBO_BREAK;
		static bool JUDGEMENT_BAD_COMBO_BREAK;
		static bool JUDGEMENT_SHIT_COMBO_BREAK;
		static Float RANK_PERFECT_THRESHOLD;
		static Float RANK_EXCELLENT_THRESHOLD;
		static Float RANK_GREAT_THRESHOLD;
		static Float RANK_GOOD_THRESHOLD;
		static ::String EXT_CHART;
		static ::String EXT_SOUND;
		static ::String EXT_VIDEO;
		static ::String EXT_IMAGE;
		static ::String EXT_DATA;
		static int MAX_PREVIOUS_WORKING_FILES;
		static ::String LIBRARY_SEPARATOR;
		static Float PIXEL_ART_SCALE;
		static Float COUNTDOWN_VOLUME;
		static Float STRUMLINE_X_OFFSET;
		static Float STRUMLINE_Y_OFFSET;
		static Float DEFAULT_CAMERA_FOLLOW_RATE;
};

} // end namespace funkin
} // end namespace util

#endif /* INCLUDED_funkin_util_Constants */ 
