// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_util_MathUtil
#define INCLUDED_funkin_util_MathUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(funkin,util,MathUtil)

namespace funkin{
namespace util{


class HXCPP_CLASS_ATTRIBUTES MathUtil_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MathUtil_obj OBJ_;
		MathUtil_obj();

	public:
		enum { _hx_ClassId = 0x7ff8d0fd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="funkin.util.MathUtil")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"funkin.util.MathUtil"); }

		inline static ::hx::ObjectPtr< MathUtil_obj > __new() {
			::hx::ObjectPtr< MathUtil_obj > __this = new MathUtil_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MathUtil_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MathUtil_obj *__this = (MathUtil_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MathUtil_obj), false, "funkin.util.MathUtil"));
			*(void **)__this = MathUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MathUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MathUtil",0a,06,68,71); }

		static void __boot();
		static Float E;
		static int bitches;
		static Float coolLerp(Float base,Float target,Float ratio);
		static ::Dynamic coolLerp_dyn();

		static Float cameraLerp(Float lerp);
		static ::Dynamic cameraLerp_dyn();

		static Float logBase(Float base,Float value);
		static ::Dynamic logBase_dyn();

		static Float easeInOutCirc(Float x);
		static ::Dynamic easeInOutCirc_dyn();

		static Float easeInOutBack(Float x, ::Dynamic c);
		static ::Dynamic easeInOutBack_dyn();

		static Float easeInBack(Float x, ::Dynamic c);
		static ::Dynamic easeInBack_dyn();

		static Float easeOutBack(Float x, ::Dynamic c);
		static ::Dynamic easeOutBack_dyn();

		static Float exp2(Float x);
		static ::Dynamic exp2_dyn();

		static Float lerp(Float base,Float target,Float progress);
		static ::Dynamic lerp_dyn();

		static Float smoothLerp(Float current,Float target,Float elapsed,Float duration,::hx::Null< Float >  precision);
		static ::Dynamic smoothLerp_dyn();

};

} // end namespace funkin
} // end namespace util

#endif /* INCLUDED_funkin_util_MathUtil */ 
