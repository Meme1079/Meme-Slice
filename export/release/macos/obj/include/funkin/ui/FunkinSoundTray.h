// Generated by Haxe 4.3.7
#ifndef INCLUDED_funkin_ui_FunkinSoundTray
#define INCLUDED_funkin_ui_FunkinSoundTray

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
HX_DECLARE_CLASS3(flixel,_hx_system,ui,FlxSoundTray)
HX_DECLARE_CLASS2(funkin,ui,FunkinSoundTray)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace funkin{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES FunkinSoundTray_obj : public  ::flixel::_hx_system::ui::FlxSoundTray_obj
{
	public:
		typedef  ::flixel::_hx_system::ui::FlxSoundTray_obj super;
		typedef FunkinSoundTray_obj OBJ_;
		FunkinSoundTray_obj();

	public:
		enum { _hx_ClassId = 0x6ce8feef };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="funkin.ui.FunkinSoundTray")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"funkin.ui.FunkinSoundTray"); }
		static ::hx::ObjectPtr< FunkinSoundTray_obj > __new();
		static ::hx::ObjectPtr< FunkinSoundTray_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FunkinSoundTray_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FunkinSoundTray",d4,49,9b,9e); }

		Float graphicScale;
		Float lerpYPos;
		Float alphaTarget;
		::String volumeMaxSound;
		void update(Float ms);

		void showAnim(Float volume, ::Dynamic sound,::hx::Null< Float >  duration,::String label);

};

} // end namespace funkin
} // end namespace ui

#endif /* INCLUDED_funkin_ui_FunkinSoundTray */ 
