// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_addons_display_FlxTiledSprite
#define INCLUDED_flixel_addons_display_FlxTiledSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxStrip
#include <flixel/FlxStrip.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxStrip)
HX_DECLARE_CLASS3(flixel,addons,display,FlxTiledSprite)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFrame)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace flixel{
namespace addons{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FlxTiledSprite_obj : public  ::flixel::FlxStrip_obj
{
	public:
		typedef  ::flixel::FlxStrip_obj super;
		typedef FlxTiledSprite_obj OBJ_;
		FlxTiledSprite_obj();

	public:
		enum { _hx_ClassId = 0x16cfa598 };

		void __construct( ::Dynamic graphic,Float width,Float height,::hx::Null< bool >  __o_repeatX,::hx::Null< bool >  __o_repeatY);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.display.FlxTiledSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.display.FlxTiledSprite"); }
		static ::hx::ObjectPtr< FlxTiledSprite_obj > __new( ::Dynamic graphic,Float width,Float height,::hx::Null< bool >  __o_repeatX,::hx::Null< bool >  __o_repeatY);
		static ::hx::ObjectPtr< FlxTiledSprite_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic graphic,Float width,Float height,::hx::Null< bool >  __o_repeatX,::hx::Null< bool >  __o_repeatY);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxTiledSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxTiledSprite",e9,82,27,67); }

		Float scrollX;
		Float scrollY;
		bool repeatX;
		bool repeatY;
		 ::flixel::FlxSprite renderSprite;
		bool regen;
		bool graphicVisible;
		void destroy();

		 ::flixel::FlxSprite loadGraphic( ::Dynamic graphic,::hx::Null< bool >  animated,::hx::Null< int >  width,::hx::Null< int >  height,::hx::Null< bool >  unique,::String key);

		 ::flixel::addons::display::FlxTiledSprite loadFrame( ::flixel::graphics::frames::FlxFrame frame);
		::Dynamic loadFrame_dyn();

		 ::flixel::math::FlxRect set_clipRect( ::flixel::math::FlxRect value);

		 ::flixel::graphics::FlxGraphic set_graphic( ::flixel::graphics::FlxGraphic value);

		void regenGraphic();
		::Dynamic regenGraphic_dyn();

		void draw();

		void updateRenderSprite();
		::Dynamic updateRenderSprite_dyn();

		void updateVerticesData();
		::Dynamic updateVerticesData_dyn();

		 ::flixel::math::FlxRect getDrawRect( ::flixel::math::FlxRect result);
		::Dynamic getDrawRect_dyn();

		Float set_width(Float value);

		Float set_height(Float value);

		Float set_scrollX(Float value);
		::Dynamic set_scrollX_dyn();

		Float set_scrollY(Float value);
		::Dynamic set_scrollY_dyn();

		bool set_repeatX(bool value);
		::Dynamic set_repeatX_dyn();

		bool set_repeatY(bool value);
		::Dynamic set_repeatY_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace display

#endif /* INCLUDED_flixel_addons_display_FlxTiledSprite */ 
