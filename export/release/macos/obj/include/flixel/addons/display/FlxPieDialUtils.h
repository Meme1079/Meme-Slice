// Generated by Haxe 4.3.7
#ifndef INCLUDED_flixel_addons_display_FlxPieDialUtils
#define INCLUDED_flixel_addons_display_FlxPieDialUtils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(flixel,addons,display,FlxPieDialShape)
HX_DECLARE_CLASS3(flixel,addons,display,FlxPieDialUtils)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flixel{
namespace addons{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FlxPieDialUtils_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxPieDialUtils_obj OBJ_;
		FlxPieDialUtils_obj();

	public:
		enum { _hx_ClassId = 0x36733ef4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flixel.addons.display.FlxPieDialUtils")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flixel.addons.display.FlxPieDialUtils"); }

		inline static ::hx::ObjectPtr< FlxPieDialUtils_obj > __new() {
			::hx::ObjectPtr< FlxPieDialUtils_obj > __this = new FlxPieDialUtils_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< FlxPieDialUtils_obj > __alloc(::hx::Ctx *_hx_ctx) {
			FlxPieDialUtils_obj *__this = (FlxPieDialUtils_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxPieDialUtils_obj), false, "flixel.addons.display.FlxPieDialUtils"));
			*(void **)__this = FlxPieDialUtils_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxPieDialUtils_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxPieDialUtils",e7,fd,9e,80); }

		static void __boot();
		static  ::openfl::geom::Rectangle _rect;
		static  ::openfl::geom::Point _zero;
		static  ::openfl::geom::Point _point;
		static  ::openfl::display::Graphics flashGfx;
		static  ::flixel::graphics::FlxGraphic getPieDialGraphic(int radius,int color,int frames, ::flixel::addons::display::FlxPieDialShape shape,bool clockwise,int innerRadius);
		static ::Dynamic getPieDialGraphic_dyn();

		static  ::flixel::graphics::FlxGraphic getRadialGaugeGraphic( ::flixel::addons::display::FlxPieDialShape shape,int radius,::hx::Null< int >  innerRadius,::hx::Null< int >  color);
		static ::Dynamic getRadialGaugeGraphic_dyn();

		static  ::openfl::display::BitmapData renderRadialGauge( ::flixel::addons::display::FlxPieDialShape shape,int radius,::hx::Null< int >  innerRadius,::hx::Null< int >  color);
		static ::Dynamic renderRadialGauge_dyn();

		static  ::openfl::display::BitmapData renderPieDial( ::flixel::addons::display::FlxPieDialShape shape,int radius,int innerRadius,int frames,::hx::Null< bool >  clockwise,::hx::Null< int >  color);
		static ::Dynamic renderPieDial_dyn();

		static  ::openfl::display::BitmapData drawShape( ::openfl::display::BitmapData dest,int radius,int color, ::flixel::addons::display::FlxPieDialShape shape,::hx::Null< int >  innerRadius);
		static ::Dynamic drawShape_dyn();

		static ::Array< ::Dynamic> sweepPoints;
		static void drawSweep( ::openfl::display::BitmapData dest,Float degrees,::hx::Null< int >  color);
		static ::Dynamic drawSweep_dyn();

		static  ::openfl::display::BitmapData drawCircle( ::openfl::display::BitmapData bitmap, ::Dynamic radius,::hx::Null< int >  color, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawCircle_dyn();

		static  ::openfl::display::BitmapData drawPolygon( ::openfl::display::BitmapData bitmap,::Array< ::Dynamic> vertices,::hx::Null< int >  fillColor, ::Dynamic lineStyle, ::Dynamic drawStyle);
		static ::Dynamic drawPolygon_dyn();

		static void beginDraw(int color, ::Dynamic lineStyle);
		static ::Dynamic beginDraw_dyn();

		static  ::openfl::display::BitmapData endDraw( ::openfl::display::BitmapData bitmap, ::Dynamic style);
		static ::Dynamic endDraw_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace display

#endif /* INCLUDED_flixel_addons_display_FlxPieDialUtils */ 
